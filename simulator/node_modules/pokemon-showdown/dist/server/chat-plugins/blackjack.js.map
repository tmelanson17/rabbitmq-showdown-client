{
  "version": 3,
  "sources": ["../../../server/chat-plugins/blackjack.ts"],
  "sourcesContent": ["/**\n * Blackjack Game\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * This allows users to play the classic blackjack card game.\n * Credits: jd, panpawn\n *\n * @license MIT license\n */\nimport {Utils} from '../../lib';\n\ntype Deck =\n\t'A\u2665' | 'A\u2666' | 'A\u2663' | 'A\u2660' | '2\u2665' | '2\u2666' | '2\u2663' | '2\u2660' | '3\u2665' | '3\u2666' | '3\u2663' | '3\u2660' | '4\u2665' | '4\u2666' | '4\u2663' |\n\t'4\u2660' | '5\u2665' | '5\u2666' | '5\u2663' | '5\u2660' | '6\u2665' | '6\u2666' | '6\u2663' | '6\u2660' | '7\u2665' | '7\u2666' | '7\u2663' | '7\u2660' | '8\u2665' | '8\u2666' |\n\t'8\u2663' | '8\u2660' | '9\u2665' | '9\u2666' | '9\u2663' | '9\u2660' | '10\u2665' | '10\u2666' | '10\u2663' | '10\u2660' | 'J\u2665' | 'J\u2666' | 'J\u2663' | 'J\u2660' |\n\t'Q\u2665' | 'Q\u2666' | 'Q\u2663' | 'Q\u2660' | 'K\u2665' | 'K\u2666' | 'K\u2663' | 'K\u2660';\ntype Symbols = '\u2665' | '\u2666' | '\u2663' | '\u2660';\ntype SymbolName = 'Hearts' | 'Diamonds' | 'Clubs' | 'Spades';\n\nexport class Blackjack extends Rooms.RoomGame<BlackjackPlayer> {\n\troom: Room;\n\n\troomID: RoomID;\n\n\tautostart: NodeJS.Timer | null;\n\tdqTimer: NodeJS.Timer | null;\n\ttimerTick: NodeJS.Timer | null;\n\n\tcardHeight: number;\n\tcardWidth: number;\n\tminimumPlayers: number;\n\tplayerScrollWheel: number;\n\tturnTimeoutMinutes: number;\n\ttimerTickSeconds: number;\n\n\tbutton: string;\n\tcreatedBy: string;\n\tcurUsername: string;\n\tendedBy: string;\n\tinfoboxLimited: string;\n\tlastMessage: string;\n\tslideButton: string;\n\tspectateButton: string;\n\tstartedBy: string;\n\tstate: string;\n\tturnLog: string;\n\tuhtmlChange: string;\n\n\tspectators: {[k: string]: ID};\n\tsymbols: {[k in Symbols]: SymbolName};\n\n\tdealer: BlackjackDealer;\n\tdeck: Deck[];\n\tgameNumber: number;\n\n\tconstructor(room: Room, user: User, autostartMinutes = 0) {\n\t\tsuper(room);\n\t\tthis.gameNumber = room.nextGameNumber();\n\t\tthis.room = room;\n\n\t\tthis.turnTimeoutMinutes = 1;\n\t\tthis.timerTickSeconds = 5;\n\n\t\tthis.createdBy = user.name;\n\t\tthis.startedBy = '';\n\t\tthis.allowRenames = true;\n\n\t\tthis.playerCap = 16;\n\t\tthis.minimumPlayers = 2;\n\t\tthis.playerScrollWheel = 4;\n\t\tthis.cardWidth = 50;\n\t\tthis.cardHeight = 85;\n\n\t\tthis.spectators = Object.create(null);\n\t\tthis.dealer = new BlackjackDealer();\n\n\t\tthis.symbols = {\n\t\t\t'\u2665': 'Hearts',\n\t\t\t'\u2666': 'Diamonds',\n\t\t\t'\u2663': 'Clubs',\n\t\t\t'\u2660': 'Spades',\n\t\t};\n\t\tthis.deck = new BlackjackDeck().shuffle();\n\n\t\tthis.roomID = this.room.roomid;\n\t\tthis.title = `Blackjack (${room.title})`;\n\t\tthis.state = 'signups';\n\n\t\tthis.lastMessage = '';\n\t\tthis.turnLog = '';\n\t\tthis.uhtmlChange = '';\n\t\tthis.curUsername = '';\n\t\tthis.endedBy = '';\n\t\tthis.infoboxLimited = '';\n\n\t\tthis.button = '<button class=\"button\" name=\"send\" value=\"/joingame\" title=\"Join Blackjack\">Join</button> | <button class=\"button\" name=\"send\" value=\"/leavegame\" title=\"Leave Blackjack\">Leave</button>';\n\t\tthis.spectateButton = '<button class=\"button\" name=\"send\" value=\"/blackjack spectate\" title=\"Spectate Blackjack\">Spectate</button>';\n\t\tthis.slideButton = '<button class=\"button\" name=\"send\" value=\"/blackjack slide\" title=\"Slide the game log down in the chat\">(<i class=\"fa fa-arrow-down\" aria-hidden=\"true\"></i> slide)</button>';\n\n\t\tthis.autostart = null;\n\t\tthis.dqTimer = null;\n\t\tthis.timerTick = null;\n\n\t\tthis.makeGame(autostartMinutes);\n\t}\n\n\t/**\n\t * Game Setup\n\t * makeGame - configures required settings for creating a game\n\t * makePlayer - adds blackjack-specific properties to player object\n\t * sendInvite - called when a game is created, or when a player joins/leaves\n\t */\n\tmakeGame(autostartMinutes = 0) {\n\t\tif (autostartMinutes > 0) {\n\t\t\tthis.autostart = setTimeout(() => this.start(), autostartMinutes * 60000);\n\t\t}\n\n\t\tthis.sendInvite();\n\t}\n\tmakePlayer(user: User) {\n\t\treturn new BlackjackPlayer(user, this);\n\t}\n\tsendInvite() {\n\t\tconst change = this.uhtmlChange;\n\t\tconst players = Object.keys(this.playerTable);\n\t\tconst playerList = [];\n\t\tfor (const player of players) playerList.push(Utils.escapeHTML(this.playerTable[player].name));\n\t\tthis.room.send(`|uhtml${change}|blackjack-${this.gameNumber}|<div class=\"infobox${this.infoboxLimited}\">${this.createdBy} has created a game of Blackjack. ${this.button}<br /><strong>Players (${players.length}):</strong> ${!players.length ? '(None)' : playerList.join(', ')}</div>`);\n\t\tthis.uhtmlChange = 'change';\n\t}\n\n\t/**\n\t * Joining/Leaving/Viewing\n\t * joinGame - joins the game\n\t * leaveGame - leaves the game\n\t * spectate - spectates the game\n\t * unspectate - stops spectating the game\n\t */\n\tjoinGame(user: User) {\n\t\tif (!user.named) return this.errorMessage(user, `You must first choose a name to play Blackjack.`);\n\t\tif (this.state === 'started') return this.errorMessage(user, `Blackjack has already started.`);\n\t\tconst joined = this.addPlayer(user);\n\t\tif (!joined) {\n\t\t\tthis.errorMessage(user, `You are already in this game.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.sendInvite();\n\n\t\tif (Object.keys(this.playerTable).length === this.playerCap) {\n\t\t\tthis.start();\n\t\t}\n\t\tif (this.spectators[user.id]) delete this.spectators[user.id]; // prevent player from spectating\n\t\treturn true;\n\t}\n\tleaveGame(user: User) {\n\t\tif (this.state === 'started') return this.errorMessage(user, `You cannot leave this game; it has already started.`);\n\t\tif (!this.playerTable[user.id]) return this.errorMessage(user, \"You are not in this game to leave.\");\n\t\tthis.removePlayer(user);\n\t\tthis.sendInvite();\n\t}\n\tspectate(user: User) {\n\t\tif (this.spectators[user.id]) return this.errorMessage(user, `You are already spectating this game.`);\n\t\tif (this.playerTable[user.id]) {\n\t\t\treturn this.errorMessage(user, `You don't need to spectate the game; you're playing the game.`);\n\t\t}\n\t\tthis.spectators[user.id] = user.id;\n\t\tuser.sendTo(this.roomid, `You are now spectating this game.`);\n\t}\n\tunspectate(user: User) {\n\t\tif (!this.spectators[user.id]) return this.errorMessage(user, `You are already not spectating this game.`);\n\t\tdelete this.spectators[user.id];\n\t\tuser.sendTo(this.roomid, `You are no longer spectating this game.`);\n\t}\n\n\t/**\n\t * Utility\n\t * errorMessage - sends a user an error message\n\t * add - adds/sends text to room\n\t * display - displays gameplay to players and spectators\n\t * clear - clears a user's gameplay screen\n\t * clearAllTimers - clears all possible existing timers pertaining to blackjack\n\t * slide - slides the game log down in the chat\n\t * onConnect - handles replies to send when a user joins the room, if any\n\t * onUpdateConnection - overrides default onUpdateConnection\n\t * createTimer - creates a timer with a countdown for a player\n\t * generateCard - generates the card for the UI\n\t * getWinners - returns an array of the winners and their cards\n\t */\n\terrorMessage(user: User, message: string) {\n\t\tuser.sendTo(this.room, Utils.html`|html|<div class=\"message-error\">${message}</div>`);\n\t}\n\tsend(message: string, clean = false) {\n\t\tconst change = this.uhtmlChange;\n\t\tthis.room.send(`|uhtml${change}|blackjack-${this.gameNumber}|<div class=\"infobox${this.infoboxLimited}\">${(clean ? message : this.lastMessage + message)}</div>`);\n\t\tthis.lastMessage += message;\n\t\tthis.uhtmlChange = 'change';\n\t}\n\tdisplay(text: string, clean = false, playerName?: string, noChange = false, end = false) {\n\t\tconst force = (end && this.endedBy);\n\t\tlet change = this.uhtmlChange;\n\t\tif (noChange) change = '';\n\t\tif (clean) this.lastMessage = '';\n\t\tconst message = `|uhtml${change}|blackjack-${this.gameNumber}|<div class=\"infobox${this.infoboxLimited}\">`;\n\t\tthis.lastMessage += text;\n\t\tif (end) {\n\t\t\ttext = `The game of blackjack has ${force ? `been forcibly ended by ${this.endedBy}` : 'ended'}. <details><summary>View turn log</summary>${this.turnLog}</details>${text}`;\n\t\t\tthis.lastMessage = '';\n\t\t}\n\t\tfor (const player of Object.keys(this.playerTable)) {\n\t\t\tif (playerName && this.playerTable[player].name === playerName) { // turn highlighting\n\t\t\t\tthis.playerTable[player].gameLog += `<span class=\"highlighted\">${text}</span>`;\n\t\t\t\tthis.playerTable[player].sendRoom(`${message}${end ? text : this.playerTable[player].gameLog}</div>`);\n\t\t\t} else {\n\t\t\t\tthis.playerTable[player].gameLog += text;\n\t\t\t\tthis.playerTable[player].sendRoom(`${message}${end ? text : this.playerTable[player].gameLog}</div>`);\n\t\t\t}\n\t\t}\n\t\tfor (const spectatorID of Object.keys(this.spectators)) {\n\t\t\tconst spectator = Users.get(this.spectators[spectatorID]);\n\t\t\tif (spectator) spectator.sendTo(this.roomid, `${message}${this.lastMessage + text}</div>`);\n\t\t}\n\t}\n\tclear() {\n\t\tconst player = this.playerTable[this.curUsername];\n\t\tif (!player) throw new Error(`Player not in player table`); // this should never happen\n\t\tplayer.sendRoom(`|uhtmlchange|user-blackjack-${this.gameNumber}|`);\n\t}\n\tclearAllTimers() {\n\t\tif (this.dqTimer) {\n\t\t\tclearTimeout(this.dqTimer);\n\t\t\tthis.dqTimer = null;\n\t\t}\n\t\tif (this.timerTick) {\n\t\t\tclearInterval(this.timerTick);\n\t\t\tthis.timerTick = null;\n\t\t}\n\t\tif (this.autostart) {\n\t\t\tclearTimeout(this.autostart);\n\t\t\tthis.autostart = null;\n\t\t}\n\t}\n\tslide(user: User) {\n\t\tuser.sendTo(this.roomid, `|uhtml|blackjack-${this.gameNumber}|`);\n\t\tthis.display('', false, user.name);\n\t}\n\tonConnect(user: User) {\n\t\tconst message = `|uhtml|blackjack-${this.gameNumber}|<div class=\"infobox${this.infoboxLimited}\">`;\n\t\tif (this.state === 'signups') {\n\t\t\tthis.sendInvite();\n\t\t} else if (this.state === 'started') {\n\t\t\tconst player = this.playerTable[user.id];\n\t\t\tconst spectator = this.spectators[user.id];\n\t\t\tif (player && user.id === toID(this.curUsername)) { // their turn; send gamelog and game screen\n\t\t\t\tplayer.sendRoom(`${message}${player.gameLog}`);\n\t\t\t\tplayer.sendRoom(player.playScreen.replace('|uhtmlchange|', '|uhtml|'));\n\t\t\t\treturn;\n\t\t\t} else if (player) { // a player, but not their turn; just send gamelog\n\t\t\t\tplayer.sendRoom(`${message}${player.gameLog}`);\n\t\t\t\treturn;\n\t\t\t} else if (spectator) { // spectator; send gamelog\n\t\t\t\tuser.sendTo(this.roomid, `${message}${this.lastMessage}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\tonUpdateConnection() {\n\t\t// This happens (runs onConnect) when a connection in the room\n\t\t// changes, such as going on a new name. We don't want to do\n\t\t// anything for such a situation, so we're overriding this.\n\t}\n\tcreateTimer(user: User) {\n\t\tconst player = this.playerTable[user.id];\n\t\tthis.dqTimer = setTimeout(() => {\n\t\t\tlet cards = '';\n\t\t\tfor (const card of player.cards) cards += `[${card}] `;\n\t\t\tplayer.status = 'stand';\n\t\t\tthis.display(\n\t\t\t\tUtils.html`<br /><strong>${player.name}</strong> stands with ${cards}` +\n\t\t\t\t` (${player.points}) (Auto-stand: took too long to move)`,\n\t\t\t\tfalse,\n\t\t\t\tthis.playerTable[this.curUsername].name\n\t\t\t);\n\t\t\tthis.clear();\n\t\t\tthis.next();\n\t\t}, this.turnTimeoutMinutes * 60 * 1000);\n\t\tthis.timerTick = setInterval(() => {\n\t\t\tconst display = player.playScreen.replace('|uhtml|', '|uhtmlchange|');\n\t\t\tif (display !== '') {\n\t\t\t\tconst timeLeft = player.timerTicksLeft - 5;\n\t\t\t\tconst buffer = (String(timeLeft).length === 1 ? '0' : '');\n\t\t\t\tconst half = (timeLeft <= ((this.turnTimeoutMinutes * 60) / 2));\n\t\t\t\tplayer.sendRoom(`${display} | <span${half ? ` class=\"message-error\"` : ``}>[<i class=\"fa fa-hourglass-${half ? 2 : 1}\" aria-hidden=\"true\"></i> 0:${buffer}${timeLeft}]</span>`);\n\t\t\t\tplayer.timerTicksLeft -= this.timerTickSeconds;\n\t\t\t}\n\t\t}, this.timerTickSeconds * 1000);\n\t}\n\tgenerateCard(card: string) {\n\t\tconst value = toID(card).toUpperCase();\n\t\tconst symbolName = this.symbols[card.substr(-1) as Symbols];\n\t\tconst red = ['D', 'H'].includes(symbolName.charAt(0));\n\t\tlet cardUI = value;\n\t\tif (value === 'K') cardUI = 'King';\n\t\tif (value === 'Q') cardUI = 'Queen';\n\t\tif (value === 'A') cardUI = 'Ace';\n\t\tif (value === 'J') cardUI = 'Joker';\n\t\treturn `<div title=\"${cardUI} of ${symbolName}\" style=\"color: ${red ? '#992222' : '#000000'}; border-radius: 6px; background-color: #ffffff; position: relative; font-size: 14px; display: inline-block; width: ${this.cardWidth}px; height: ${this.cardHeight}px; border: 1px solid #000000; padding: 2px 4px;\">${value}<br /> ${card.substr(-1)}<br /><span style=\"padding: 2px 4px; position: absolute; bottom: 0; right: 0; transform: rotate(-180deg);\">${value}<br />${card.substr(-1)}</span></div> `;\n\t}\n\tgetWinners(forceend = false) {\n\t\tconst winners = [];\n\t\tif (forceend) this.giveCard('dealer');\n\t\tif (this.dealer.points > 21) {\n\t\t\tfor (const player of Object.keys(this.playerTable)) {\n\t\t\t\tif (this.playerTable[player].status === 'bust') continue;\n\t\t\t\twinners.push(\n\t\t\t\t\tUtils.html`<strong>${this.playerTable[player].name}</strong> ` +\n\t\t\t\t\t`[${this.playerTable[player].cards.join(', ')}]`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (this.dealer.points !== 21) {\n\t\t\tfor (const player of Object.keys(this.playerTable)) {\n\t\t\t\tif (this.playerTable[player].status === 'bust' || this.playerTable[player].points <= this.dealer.points) continue;\n\t\t\t\twinners.push(\n\t\t\t\t\tUtils.html`<strong>${this.playerTable[player].name}</strong> ` +\n\t\t\t\t\t`[${this.playerTable[player].cards.join(', ')}]`\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (this.dealer.points === 21) {\n\t\t\twinners.push(`<strong>${this.dealer.name}</strong> [${this.dealer.cards.join(', ')}]`);\n\t\t}\n\t\treturn winners;\n\t}\n\n\t/**\n\t * Game State Changes\n\t * start - starts the game\n\t * end - ends the game\n\t * destroy - destroys the game\n\t */\n\tstart(user?: User) {\n\t\tconst numberOfPlayers = Object.keys(this.playerTable).length;\n\t\tif (numberOfPlayers < this.minimumPlayers) {\n\t\t\tif (this.autostart) {\n\t\t\t\tclearTimeout(this.autostart);\n\t\t\t\tthis.autostart = null;\n\t\t\t}\n\t\t\tthis.send(\"<br />Not enough players to start; game canceled.\");\n\t\t\tthis.destroy();\n\t\t\treturn;\n\t\t}\n\t\tif (user) this.startedBy = Utils.escapeHTML(user.name);\n\t\tthis.infoboxLimited = (numberOfPlayers >= this.playerScrollWheel ? ' infobox-limited' : '');\n\t\tthis.send(`[Blackjack has started. ${this.spectateButton}]`, true);\n\n\t\tthis.curUsername = Object.keys(this.playerTable)[0];\n\n\t\tconst header = `The game of blackjack has started${(this.startedBy !== '' ? ` (started by ${this.startedBy})` : ``)}. ${this.slideButton}<br />`;\n\t\tthis.state = 'started';\n\n\t\tthis.giveCard('dealer');\n\t\tthis.giveCard('dealer');\n\t\tthis.turnLog += `<strong>${this.dealer.name}</strong>: [${this.dealer.cards[0]}]`;\n\n\t\tfor (const player of Object.keys(this.playerTable)) {\n\t\t\tthis.giveCard(this.playerTable[player].user.id);\n\t\t\tthis.giveCard(this.playerTable[player].user.id);\n\t\t\tthis.turnLog += Utils.html`<br /><strong>${this.playerTable[player].name}</strong>: ` +\n\t\t\t\t`[${this.playerTable[player].cards[0]}] [${this.playerTable[player].cards[1]}] (${this.playerTable[player].points})`;\n\t\t}\n\n\t\tthis.display(`${header}${this.turnLog}`, true, '');\n\t\tthis.next();\n\t}\n\tend(user: User | true, cmd?: string) {\n\t\tconst force = (cmd && toID(cmd) === 'forceend');\n\t\tif (user === true) {\n\t\t\tthis.state = 'ended';\n\t\t\tthis.destroy();\n\t\t\treturn true;\n\t\t}\n\t\tif (this.state === 'started' && cmd && !force) {\n\t\t\treturn this.errorMessage(\n\t\t\t\tuser,\n\t\t\t\t`Because this game has started, you can only end this game by using /blackjack forceend.`\n\t\t\t);\n\t\t}\n\t\tlet winners = this.getWinners();\n\t\tif (force) {\n\t\t\twinners = this.getWinners(true);\n\t\t\tthis.endedBy = Utils.escapeHTML(user.name);\n\t\t\tif (this.curUsername) {\n\t\t\t\tthis.playerTable[this.curUsername].send(`|uhtmlchange|user-blackjack-${this.gameNumber}|`);\n\t\t\t}\n\t\t\tif (winners.length < 1) {\n\t\t\t\tthis.display(`There are no winners this time.`, false, undefined, false, true);\n\t\t\t} else {\n\t\t\t\tthis.display(`<strong>Winner${Chat.plural(winners.length)}</strong>: ${winners.join(', ')}`, false, undefined, false, true);\n\t\t\t}\n\t\t}\n\n\t\tif (!force && this.state !== 'signups') {\n\t\t\tif (winners.length < 1) {\n\t\t\t\tthis.display(`There are no winners this time.`, false, undefined, false, true);\n\t\t\t} else {\n\t\t\t\tthis.display(`<strong>Winner${Chat.plural(winners.length)}</strong>: ${winners.join(', ')}`, false, undefined, false, true);\n\t\t\t}\n\t\t} else if (this.state === 'signups') {\n\t\t\tthis.send(\n\t\t\t\tUtils.html`The game of blackjack has been ended by ${user.name}, ` +\n\t\t\t\t`and there are no winners because the game never started.`,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\n\t\tthis.state = 'ended';\n\n\t\tthis.destroy();\n\t\treturn true;\n\t}\n\tdestroy() {\n\t\tif (Object.keys(this.playerTable).length) {\n\t\t\tfor (const player of Object.keys(this.playerTable)) {\n\t\t\t\tthis.playerTable[player].destroy();\n\t\t\t}\n\t\t}\n\t\tthis.clearAllTimers();\n\t\tthis.room.game = null;\n\t}\n\n\t/**\n\t * Gameplay\n\t * hit - player decides to get a new card\n\t * stand - player decides to keep current cards\n\t * giveCard - gives a player a card from the deck\n\t * getCardPoints - returns the point value of a user's cards\n\t * next - game goes on to the next turn\n\t */\n\thit(user: User) {\n\t\tif (this.state !== 'started') return this.errorMessage(user, `Blackjack hasn't started yet.`);\n\t\tif (!this.playerTable[user.id]) return this.errorMessage(user, `You aren't a player in this game.`);\n\t\tif (this.curUsername !== user.id) return this.errorMessage(user, `It's not your turn.`);\n\t\tthis.playerTable[user.id].selfUhtml = 'change';\n\t\tthis.playerTable[user.id].resetTimerTicks();\n\n\t\tthis.giveCard(user.id);\n\t}\n\tstand(user: User) {\n\t\tconst player = this.playerTable[user.id];\n\t\tif (this.state !== 'started') return this.errorMessage(user, `Blackjack hasn't started yet.`);\n\t\tif (!player) return this.errorMessage(user, `You aren't a player in this game.`);\n\t\tif (this.curUsername !== user.id) return this.errorMessage(user, `It's not your turn.`);\n\t\tplayer.status = 'stand';\n\t\tlet cards = '';\n\t\tfor (const card of player.cards) cards += `[${card}] `;\n\t\tconst turnLine = Utils.html`<br /><strong>${player.name}</strong> stands with ${cards} ` +\n\t\t\t`(${player.points}${player.points === 21 ? ' - blackjack!' : ''})`;\n\n\t\tthis.turnLog += turnLine;\n\t\tthis.display(turnLine, false, player.name);\n\t\tthis.clear();\n\n\t\tthis.next();\n\t}\n\tgiveCard(userid: string) {\n\t\tif (this.deck.length < 1) this.deck = new BlackjackDeck().shuffle();\n\t\tconst player = (userid === 'dealer' ? this.dealer : this.playerTable[userid]);\n\t\tif (!player) return; // this should never happen\n\t\tplayer.cards.push(this.deck[0]);\n\n\t\tthis.deck.shift();\n\n\t\tif (this.deck.length === 0) {\n\t\t\tthis.display(`<br />${this.dealer.name} has ran out of cards in the deck; shuffling a new deck...`);\n\t\t\tthis.deck = new BlackjackDeck().shuffle();\n\t\t}\n\n\t\tplayer.points = this.getCardPoints(userid);\n\n\t\tif (player.cards.length < 3) return;\n\n\t\tlet turnLine = Utils.html`<br /><strong>${player.name}</strong> hit and received ` +\n\t\t\t`[${player.cards[player.cards.length - 1]}] (${player.points})`;\n\t\tthis.turnLog += turnLine;\n\t\tif (player.cards.length > 2) this.display(turnLine, false, player.name);\n\n\t\tif (player instanceof BlackjackDealer) {\n\t\t\tif (player.points > 21) {\n\t\t\t\tlet cards = '';\n\t\t\t\tfor (const card of player.cards) {\n\t\t\t\t\tcards += `[${card}] `;\n\t\t\t\t}\n\t\t\t\tturnLine = Utils.html`<br /><strong>${this.dealer.name}</strong> has busted with ${cards} (${player.points})`;\n\t\t\t\tthis.turnLog += turnLine;\n\t\t\t\tthis.display(turnLine);\n\t\t\t\tthis.end(true);\n\t\t\t\treturn;\n\t\t\t} else if (player.points === 21) {\n\t\t\t\tturnLine = Utils.html`<br /><strong>${this.dealer.name}</strong> has blackjack!`;\n\t\t\t\tthis.turnLog += turnLine;\n\t\t\t\tthis.display(turnLine);\n\t\t\t\tthis.end(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (player.points > 21) {\n\t\t\tplayer.status = 'bust';\n\t\t\tlet cards = '';\n\t\t\tfor (const card of player.cards) {\n\t\t\t\tcards += `[${card}] `;\n\t\t\t}\n\t\t\tturnLine = Utils.html`<br /><strong>${player.name}</strong> has busted with ${cards} (${player.points})`;\n\t\t\tthis.turnLog += turnLine;\n\t\t\tthis.display(turnLine, false, player.name);\n\t\t\tthis.clear();\n\t\t} else if (player.points === 21) {\n\t\t\tplayer.status = 'stand';\n\t\t\tturnLine = Utils.html`<br /><strong>${player.name}</strong> has blackjack!`;\n\t\t\tthis.turnLog += turnLine;\n\t\t\tthis.display(turnLine, false, player.name);\n\t\t\tthis.clear();\n\t\t}\n\t\tif (player !== this.dealer) this.playerTable[userid].cards = player.cards;\n\t\tthis.next();\n\t}\n\tgetCardPoints(playerid: string) {\n\t\tconst player = (playerid === 'dealer' ? this.dealer : this.playerTable[playerid]);\n\t\tlet points = 0;\n\t\tlet aceCount = 0;\n\t\tfor (const card of player.cards.map(x => toID(x).toUpperCase())) {\n\t\t\tif (!isNaN(Number(card))) {\n\t\t\t\tpoints += Number(card);\n\t\t\t} else if (['K', 'Q', 'J'].includes(card)) {\n\t\t\t\tpoints += 10;\n\t\t\t} else if (card === 'A') {\n\t\t\t\tpoints += 11;\n\t\t\t\taceCount++;\n\t\t\t}\n\t\t}\n\n\t\t// At first, we value aces as 11, however, we will change their value\n\t\t// to be 1 if having them as 11 would cause an unnecessary bust. We will\n\t\t// do this by subtracting 10 for each ace that would otherwise cause a bust.\n\t\twhile (points > 21 && aceCount > 0) {\n\t\t\tpoints -= 10;\n\t\t\taceCount--;\n\t\t}\n\n\t\treturn points;\n\t}\n\tnext() {\n\t\tthis.clearAllTimers();\n\t\tif (\n\t\t\tObject.keys(this.playerTable)[Object.keys(this.playerTable).length - 1] === this.curUsername &&\n\t\t\tthis.playerTable[this.curUsername].status !== 'playing'\n\t\t) {\n\t\t\tif (this.dealer.points < 17) {\n\t\t\t\tthis.giveCard('dealer');\n\t\t\t} else if (this.dealer.points >= 17) {\n\t\t\t\tlet cards = '';\n\t\t\t\tfor (const card of this.dealer.cards) {\n\t\t\t\t\tcards += `[${card}] `;\n\t\t\t\t}\n\t\t\t\tconst turnLine = `<br /><strong>${this.dealer.name}</strong> stands with ${cards} (${this.dealer.points})`;\n\t\t\t\tthis.turnLog += turnLine;\n\t\t\t\tthis.display(turnLine);\n\t\t\t\tthis.end(true);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (this.playerTable[this.curUsername].status !== 'playing') {\n\t\t\tlet num = 0;\n\t\t\twhile (this.playerTable[Object.keys(this.playerTable)[num]].status !== 'playing') {\n\t\t\t\tnum++;\n\t\t\t}\n\t\t\tthis.curUsername = Object.keys(this.playerTable)[num];\n\t\t}\n\t\tlet output = `|uhtml${this.playerTable[this.curUsername].selfUhtml}|user-blackjack-${this.gameNumber}|<div class=\"infobox\" style=\"line-height: 20px;\">`;\n\t\toutput += `It's your turn to move, ${this.playerTable[this.curUsername].name}<br />`;\n\t\tfor (const card of this.playerTable[this.curUsername].cards) {\n\t\t\toutput += this.generateCard(card);\n\t\t}\n\t\toutput += `<br />Score: ${this.playerTable[this.curUsername].points}${(this.playerTable[this.curUsername].points === 21 ? ` (you have blackjack!)` : ``)}`;\n\t\toutput += `<br /><button class=\"button\" name=\"send\" value=\"/blackjack hit\" title=\"Hit (get another card)\">Hit</button> | <button class=\"button\" name=\"send\" value=\"/blackjack stand\" title=\"Stand (just keep these cards)\">Stand</button>`;\n\n\t\tthis.playerTable[this.curUsername].sendRoom(`|notify|Blackjack (${this.room.title})|It's your turn to play!`);\n\t\tthis.playerTable[this.curUsername].sendRoom(output);\n\t\tthis.playerTable[this.curUsername].playScreen = output;\n\n\t\tthis.createTimer(this.playerTable[this.curUsername].user);\n\t}\n}\n\nclass BlackjackPlayer extends Rooms.RoomGamePlayer<Blackjack> {\n\tuser: User;\n\n\tpoints: number;\n\tslide: number;\n\ttimerTicksLeft: number;\n\n\tcards: string[];\n\n\tgameLog: string;\n\tplayScreen: string;\n\tselfUhtml: string;\n\tstatus: string;\n\n\tconstructor(user: User, game: Blackjack) {\n\t\tsuper(user, game);\n\t\tthis.user = user;\n\n\t\tthis.cards = [];\n\t\tthis.points = 0;\n\t\tthis.slide = 0;\n\t\tthis.status = 'playing';\n\n\t\tthis.selfUhtml = '';\n\t\tthis.gameLog = '';\n\t\tthis.playScreen = '';\n\t\tthis.timerTicksLeft = this.game.turnTimeoutMinutes * 60; // to get into seconds-format\n\t}\n\tresetTimerTicks() {\n\t\tthis.timerTicksLeft = this.game.turnTimeoutMinutes * 60;\n\t}\n}\n\nclass BlackjackDealer {\n\tcards: string[];\n\tpoints: number;\n\tname: string;\n\n\tconstructor() {\n\t\tthis.cards = [];\n\t\tthis.points = 0;\n\t\tthis.name = 'The Dealer';\n\t}\n}\n\nclass BlackjackDeck {\n\tdeck: Deck[];\n\tconstructor() {\n\t\tthis.deck = [\n\t\t\t'A\u2665', 'A\u2666', 'A\u2663', 'A\u2660', '2\u2665', '2\u2666', '2\u2663', '2\u2660', '3\u2665', '3\u2666', '3\u2663',\n\t\t\t'3\u2660', '4\u2665', '4\u2666', '4\u2663', '4\u2660', '5\u2665', '5\u2666', '5\u2663', '5\u2660', '6\u2665', '6\u2666', '6\u2663', '6\u2660',\n\t\t\t'7\u2665', '7\u2666', '7\u2663', '7\u2660', '8\u2665', '8\u2666', '8\u2663', '8\u2660', '9\u2665', '9\u2666', '9\u2663', '9\u2660', '10\u2665',\n\t\t\t'10\u2666', '10\u2663', '10\u2660', 'J\u2665', 'J\u2666', 'J\u2663', 'J\u2660', 'Q\u2665', 'Q\u2666', 'Q\u2663', 'Q\u2660', 'K\u2665', 'K\u2666',\n\t\t\t'K\u2663', 'K\u2660',\n\t\t];\n\t}\n\tshuffle() {\n\t\treturn Utils.shuffle(this.deck);\n\t}\n}\n\nexport const commands: Chat.ChatCommands = {\n\tblj: 'blackjack',\n\tblackjack: {\n\t\tnew: 'create',\n\t\tcreate(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tif (room.game) return this.errorReply(\"There is already a game running in this room.\");\n\t\t\tif (room.settings.blackjackDisabled) return this.errorReply(\"Blackjack is currently disabled in this room.\");\n\t\t\tconst autostartMinutes = target ? parseFloat(target) : 0;\n\t\t\tif (isNaN(autostartMinutes) || autostartMinutes <= 0 || (autostartMinutes * 60 * 1000) > Chat.MAX_TIMEOUT_DURATION) {\n\t\t\t\treturn this.errorReply(\"Usage: /blackjack create [autostart] - where autostart is an integer\");\n\t\t\t}\n\n\t\t\tthis.privateModAction(`A game of blackjack was created by ${user.name}.`);\n\t\t\tthis.modlog(`BLACKJACK CREATE`);\n\t\t\troom.game = new Blackjack(room, user, autostartMinutes);\n\t\t},\n\t\tstart(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(Blackjack);\n\t\t\tif (game.state !== 'signups') return this.errorReply(\"This game of blackjack has already started.\");\n\n\t\t\tthis.privateModAction(`The game of blackjack was started by ${user.name}.`);\n\t\t\tthis.modlog(`BLACKJACK START`);\n\t\t\tgame.start(user);\n\t\t},\n\t\tforceend: 'end',\n\t\tend(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(Blackjack);\n\t\t\tconst force = cmd === 'forceend' ? 'forcibly ' : '';\n\n\t\t\tconst end = game.end(user, cmd);\n\t\t\tif (end) {\n\t\t\t\tthis.privateModAction(`The game of blackjack was ${force}ended by ${user.name}.`);\n\t\t\t\tthis.modlog(`BLACKJACK END`);\n\t\t\t}\n\t\t},\n\t\thit(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Blackjack);\n\t\t\tgame.hit(user);\n\t\t},\n\t\tstand(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Blackjack);\n\t\t\tgame.stand(user);\n\t\t},\n\t\tslide(target, room, user) { // undocumented (used in UI)\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Blackjack);\n\t\t\tgame.slide(user);\n\t\t},\n\t\tj: 'join',\n\t\tjoin(target, room, user) {\n\t\t\treturn this.parse('/joingame');\n\t\t},\n\t\tl: 'leave',\n\t\tleave(target, room, user) {\n\t\t\treturn this.parse('/leavegame');\n\t\t},\n\t\tunspectate: 'spectate',\n\t\tspectate(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(Blackjack);\n\t\t\tif (cmd === 'spectate') {\n\t\t\t\tgame.spectate(user);\n\t\t\t} else if (cmd === 'unspectate') {\n\t\t\t\tgame.unspectate(user);\n\t\t\t}\n\t\t},\n\t\tdisable(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (room.settings.blackjackDisabled) {\n\t\t\t\treturn this.errorReply(\"Blackjack is already disabled in this room.\");\n\t\t\t}\n\t\t\troom.settings.blackjackDisabled = true;\n\t\t\troom.saveSettings();\n\t\t\tthis.sendReply(`Blackjack has been disabled for this room.`);\n\t\t},\n\t\tenable(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (!room.settings.blackjackDisabled) {\n\t\t\t\treturn this.errorReply(\"Blackjack is already enabled in this room.\");\n\t\t\t}\n\n\t\t\tdelete room.settings.blackjackDisabled;\n\t\t\troom.saveSettings();\n\t\t\tthis.sendReply(`Blackjack has been enabled for this room.`);\n\t\t},\n\t\t'': 'help',\n\t\thelp(target, room, user) {\n\t\t\treturn this.parse('/help blackjack');\n\t\t},\n\t},\n\tblackjackhelp: [\n\t\t\"/blackjack create - Creates a game of blackjack. Requires: % @ # &\",\n\t\t\"/blackjack create [autostart] - Automatically creates a game of blackjack in [autostart] minutes. Requires: % @ # &\",\n\t\t\"/blackjack start - Starts a game of blackjack. Requires: % @ # &\",\n\t\t\"/blackjack end - Ends a game of blackjack. Requires: % @ # &\",\n\t\t\"/blackjack join - Joins a game of blackjack.\",\n\t\t\"/blackjack leave - Leaves a game of blackjack.\",\n\t\t\"/blackjack spectate - Spectates a game of blackjack.\",\n\t\t\"/blackjack unspectate - Stops spectating a game of blackjack.\",\n\t\t\"/blackjack disable - Prevents games of blackjack from being made in the room. Requires: # &\",\n\t\t\"/blackjack enable - Allows games of blackjack to be made in the room. Requires: # &\",\n\t],\n};\nexport const roomSettings: Chat.SettingsHandler = room => ({\n\tlabel: \"Blackjack\",\n\tpermission: 'editroom',\n\toptions: [\n\t\t[`disabled`, room.settings.blackjackDisabled || 'blackjack disable'],\n\t\t[`enabled`, !room.settings.blackjackDisabled || 'blackjack enable'],\n\t],\n});\n"],
  "mappings": "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",
  "names": []
}
