{
  "version": 3,
  "sources": ["../../../server/chat-plugins/uno.ts"],
  "sourcesContent": ["/**\n * UNO\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * This plugin allows rooms to run games of scripted UNO\n *\n * @license MIT license\n */\nimport {Utils} from '../../lib';\n\ntype Color = 'Green' | 'Yellow' | 'Red' | 'Blue' | 'Black';\ninterface Card {\n\tvalue: string;\n\tcolor: Color;\n\tchangedColor?: Color;\n\tname: string;\n}\n\nconst maxTime = 60; // seconds\n\nconst rgbGradients: {[k in Color]: string} = {\n\tGreen: \"rgba(0, 122, 0, 1), rgba(0, 185, 0, 0.9)\",\n\tYellow: \"rgba(255, 225, 0, 1), rgba(255, 255, 85, 0.9)\",\n\tBlue: \"rgba(40, 40, 255, 1), rgba(125, 125, 255, 0.9)\",\n\tRed: \"rgba(255, 0, 0, 1), rgba(255, 125, 125, 0.9)\",\n\tBlack: \"rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.55)\",\n};\n\nconst textColors: {[k in Color]: string} = {\n\tGreen: \"rgb(0, 128, 0)\",\n\tYellow: \"rgb(175, 165, 40)\",\n\tBlue: \"rgb(75, 75, 255)\",\n\tRed: \"rgb(255, 0, 0)\",\n\tBlack: 'inherit',\n};\n\nconst textShadow = 'text-shadow: 1px 0px black, -1px 0px black, 0px -1px black, 0px 1px black, 2px -2px black;';\n\nfunction cardHTML(card: Card, fullsize: boolean) {\n\tlet surface = card.value.replace(/[^A-Z0-9+]/g, \"\");\n\tconst background = rgbGradients[card.color];\n\tif (surface === 'R') surface = '<i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>';\n\n\treturn `<button class=\"button\" style=\"font-size: 14px; font-weight: bold; color: white; ${textShadow} padding-bottom: 117px; text-align: left; height: 135px; width: ${fullsize ? '72' : '37'}px; border-radius: 10px 2px 2px 3px; color: white; background: ${card.color}; background: -webkit-linear-gradient(${background}); background: -o-linear-gradient(${background}); background: -moz-linear-gradient(${background}); background: linear-gradient(${background})\" name=send value=\"/uno play ${card.name}\" aria-label=\"${card.name}\">${surface}</button>`;\n}\n\nfunction createDeck() {\n\tconst colors: Color[] = ['Red', 'Blue', 'Green', 'Yellow'];\n\tconst values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'Reverse', 'Skip', '+2'];\n\n\tconst basic: Card[] = [];\n\n\tfor (const color of colors) {\n\t\tbasic.push(...values.map(v => {\n\t\t\tconst c: Card = {value: v, color: color, name: `${color} ${v}`};\n\t\t\treturn c;\n\t\t}));\n\t}\n\n\treturn [\n\t\t// two copies of the basic stuff (total 96)\n\t\t...basic,\n\t\t...basic,\n\t\t// The four 0s\n\t\t...[0, 1, 2, 3].map(v => {\n\t\t\tconst c: Card = {color: colors[v], value: '0', name: `${colors[v]} 0`};\n\t\t\treturn c;\n\t\t}),\n\t\t // Wild cards\n\t\t...[0, 1, 2, 3].map(v => {\n\t\t\tconst c: Card = {color: 'Black', value: 'Wild', name: 'Wild'};\n\t\t\treturn c;\n\t\t}),\n\t\t// Wild +4 cards\n\t\t...[0, 1, 2, 3].map(v => {\n\t\t\tconst c: Card = {color: 'Black', value: '+4', name: 'Wild +4'};\n\t\t\treturn c;\n\t\t}),\n\t]; // 108 cards\n}\n\nexport class UNO extends Rooms.RoomGame<UNOPlayer> {\n\tplayerCap: number;\n\tallowRenames: boolean;\n\tmaxTime: number;\n\ttimer: NodeJS.Timer | null;\n\tautostartTimer: NodeJS.Timer | null;\n\tstate: string;\n\tcurrentPlayerid: ID;\n\tdeck: Card[];\n\tdiscards: Card[];\n\ttopCard: Card | null;\n\tawaitUno: string | null;\n\tunoId: ID | null;\n\tdirection: number;\n\tsuppressMessages: boolean;\n\tspectators: {[k: string]: number};\n\tisPlusFour: boolean;\n\tgameNumber: number;\n\n\tconstructor(room: Room, cap: number, suppressMessages: boolean) {\n\t\tsuper(room);\n\n\t\tthis.gameNumber = room.nextGameNumber();\n\n\t\tthis.playerCap = cap;\n\t\tthis.allowRenames = true;\n\t\tthis.maxTime = maxTime;\n\t\tthis.timer = null;\n\t\tthis.autostartTimer = null;\n\n\t\tthis.gameid = 'uno' as ID;\n\t\tthis.title = 'UNO';\n\n\t\tthis.state = 'signups';\n\t\tthis.currentPlayerid = '';\n\t\tthis.deck = Utils.shuffle(createDeck());\n\t\tthis.discards = [];\n\t\tthis.topCard = null;\n\t\tthis.awaitUno = null;\n\t\tthis.unoId = null;\n\t\tthis.isPlusFour = false;\n\n\t\tthis.direction = 1;\n\n\t\tthis.suppressMessages = suppressMessages || false;\n\t\tthis.spectators = Object.create(null);\n\n\t\tthis.sendToRoom(`|uhtml|uno-${this.gameNumber}|<div class=\"broadcast-blue\"><p style=\"font-size: 14pt; text-align: center\">A new game of <strong>UNO</strong> is starting!</p><p style=\"font-size: 9pt; text-align: center\"><button class=\"button\" name=\"send\" value=\"/uno join\"><strong>Join and play</strong></button> <button class=\"button\" name=\"send\" value=\"/uno spectate\">Watch</button></p>${this.suppressMessages ? `<p style=\"font-size: 6pt; text-align: center\">Game messages won't show up unless you're playing or watching.</p>` : ''}</div>`, true);\n\t}\n\n\tonUpdateConnection() {}\n\n\tonConnect(user: User, connection: Connection) {\n\t\tif (this.state === 'signups') {\n\t\t\tconnection.sendTo(\n\t\t\t\tthis.room,\n\t\t\t\t`|uhtml|uno-${this.gameNumber}|<div class=\"broadcast-blue\">` +\n\t\t\t\t`<p style=\"font-size: 14pt; text-align: center\">A new game of <strong>UNO</strong> is starting!</p>` +\n\t\t\t\t`<p style=\"font-size: 9pt; text-align: center\"><button class=\"button\" name=\"send\" value=\"/uno join\"><strong>Join and play</strong></button> ` +\n\t\t\t\t`<button class=\"button\" name=\"send\" value=\"/uno spectate\">Watch</button></p>` +\n\t\t\t\t`${this.suppressMessages ?\n\t\t\t\t\t`<p style=\"font-size: 6pt; text-align: center\">Game messages won't show up unless you're playing or watching.` : ''}</div>`\n\t\t\t);\n\t\t} else if (this.onSendHand(user) === false) {\n\t\t\tconnection.sendTo(\n\t\t\t\tthis.room,\n\t\t\t\t`|uhtml|uno-${this.gameNumber}|<div class=\"infobox\"><p>A game of UNO is currently in progress.<button class=\"button\" name=\"send\" value=\"/uno spectate\">Spectate Game</button></p>` +\n\t\t\t\t`${this.suppressMessages ? `<p style=\"font-size: 6pt\">Game messages won't show up unless you're playing or watching.` : ''}</div>`\n\t\t\t);\n\t\t}\n\t}\n\n\tonStart(isAutostart?: boolean) {\n\t\tif (this.playerCount < 2) {\n\t\t\tif (isAutostart) {\n\t\t\t\tthis.room.add(\"The game of UNO was forcibly ended because there aren't enough users.\");\n\t\t\t\tthis.destroy();\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tthrow new Chat.ErrorMessage(\"There must be at least 2 players to start a game of UNO.\");\n\t\t\t}\n\t\t}\n\t\tif (this.autostartTimer) clearTimeout(this.autostartTimer);\n\t\tthis.sendToRoom(`|uhtmlchange|uno-${this.gameNumber}|<div class=\"infobox\"><p>The game of UNO has started. <button class=\"button\" name=\"send\" value=\"/uno spectate\">Spectate Game</button></p>${this.suppressMessages ? `<p style=\"font-size: 6pt\">Game messages won't show up unless you're playing or watching.` : ''}</div>`, true);\n\t\tthis.state = 'play';\n\n\t\tthis.onNextPlayer(); // determines the first player\n\n\t\t// give cards to the players\n\t\tfor (const i in this.playerTable) {\n\t\t\tthis.playerTable[i].hand.push(...this.drawCard(7));\n\t\t}\n\n\t\t// top card of the deck.\n\t\tdo {\n\t\t\tthis.topCard = this.drawCard(1)[0];\n\t\t\tthis.discards.unshift(this.topCard);\n\t\t} while (this.topCard.color === 'Black');\n\n\t\tthis.sendToRoom(`|raw|The top card is <span style=\"font-weight:bold;color: ${textColors[this.topCard.color]}\">${this.topCard.name}</span>.`);\n\n\t\tthis.onRunEffect(this.topCard.value, true);\n\t\tthis.nextTurn(true);\n\t}\n\n\tjoinGame(user: User) {\n\t\tif (user.id in this.playerTable) {\n\t\t\tthrow new Chat.ErrorMessage(\"You have already joined the game of UNO.\");\n\t\t}\n\t\tif (this.state === 'signups' && this.addPlayer(user)) {\n\t\t\tthis.sendToRoom(`${user.name} has joined the game of UNO.`);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tleaveGame(user: User) {\n\t\tif (!(user.id in this.playerTable)) return false;\n\t\tif ((this.state === 'signups' && this.removePlayer(user)) || this.eliminate(user.id)) {\n\t\t\tthis.sendToRoom(`${user.name} has left the game of UNO.`);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Overwrite the default makePlayer so it makes an UNOPlayer instead.\n\t */\n\tmakePlayer(user: User) {\n\t\treturn new UNOPlayer(user, this);\n\t}\n\n\tonRename(user: User, oldUserid: ID, isJoining: boolean, isForceRenamed: boolean) {\n\t\tif (!(oldUserid in this.playerTable) || user.id === oldUserid) return false;\n\t\tif (!user.named && !isForceRenamed) {\n\t\t\tuser.games.delete(this.roomid);\n\t\t\tuser.updateSearch();\n\t\t\treturn; // dont set users to their guest accounts.\n\t\t}\n\t\tthis.playerTable[user.id] = this.playerTable[oldUserid];\n\t\t// only run if it's a rename that involves a change of userid\n\t\tif (user.id !== oldUserid) delete this.playerTable[oldUserid];\n\n\t\t// update the user's name information\n\t\tthis.playerTable[user.id].name = user.name;\n\t\tthis.playerTable[user.id].id = user.id;\n\t\tif (this.awaitUno && this.awaitUno === oldUserid) this.awaitUno = user.id;\n\n\t\tif (this.currentPlayerid === oldUserid) this.currentPlayerid = user.id;\n\t}\n\n\teliminate(userid: ID) {\n\t\tif (!(userid in this.playerTable)) return false;\n\n\t\tconst name = this.playerTable[userid].name;\n\n\t\tif (this.playerCount === 2) {\n\t\t\tthis.removePlayer(this.playerTable[userid]);\n\t\t\tthis.onWin(this.playerTable[Object.keys(this.playerTable)[0]]);\n\t\t\treturn name;\n\t\t}\n\n\t\t// handle current player...\n\t\tconst removingCurrentPlayer = userid === this.currentPlayerid;\n\t\tif (removingCurrentPlayer) {\n\t\t\tif (this.state === 'color') {\n\t\t\t\tif (!this.topCard) {\n\t\t\t\t\t// should never happen\n\t\t\t\t\tthrow new Error(`No top card in the discard pile.`);\n\t\t\t\t}\n\t\t\t\tthis.topCard.changedColor = this.discards[1].changedColor || this.discards[1].color;\n\t\t\t\tthis.sendToRoom(`|raw|${Utils.escapeHTML(name)} has not picked a color, the color will stay as <span style=\"color: ${textColors[this.topCard.changedColor]}\">${this.topCard.changedColor}</span>.`);\n\t\t\t}\n\t\t}\n\n\t\tif (this.awaitUno === userid) this.awaitUno = null;\n\t\tif (!this.topCard) {\n\t\t\tthrow new Chat.ErrorMessage(`Unable to disqualify ${name}.`);\n\t\t}\n\n\t\t// put that player's cards into the discard pile to prevent cards from being permanently lost\n\t\tthis.discards.push(...this.playerTable[userid].hand);\n\n\t\tif (removingCurrentPlayer) {\n\t\t\tthis.onNextPlayer();\n\t\t}\n\t\tthis.removePlayer(this.playerTable[userid]);\n\t\tif (removingCurrentPlayer) {\n\t\t\tthis.nextTurn(true);\n\t\t}\n\t\treturn name;\n\t}\n\n\tsendToRoom(msg: string, overrideSuppress = false) {\n\t\tif (!this.suppressMessages || overrideSuppress) {\n\t\t\tthis.room.add(msg).update();\n\t\t} else {\n\t\t\t// send to the players first\n\t\t\tfor (const i in this.playerTable) {\n\t\t\t\tthis.playerTable[i].sendRoom(msg);\n\t\t\t}\n\n\t\t\t// send to spectators\n\t\t\tfor (const i in this.spectators) {\n\t\t\t\tif (i in this.playerTable) continue; // don't double send to users already in the game.\n\t\t\t\tconst user = Users.getExact(i);\n\t\t\t\tif (user) user.sendTo(this.roomid, msg);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetPlayers(showCards?: boolean): string {\n\t\tlet playerList = Object.keys(this.playerTable);\n\t\tif (!showCards) {\n\t\t\treturn playerList.sort().map(id => Utils.escapeHTML(this.playerTable[id].name)).join(', ');\n\t\t}\n\t\tif (this.direction === -1) playerList = playerList.reverse();\n\t\tlet buf = `<ol style=\"padding-left:0;\">`;\n\t\tfor (const playerid of playerList) {\n\t\t\tbuf += `<li${this.currentPlayerid === playerid ? ` style=\"font-weight:bold;\"` : ''}>`;\n\t\t\tbuf += `${Utils.escapeHTML(this.playerTable[playerid].name)} (${this.playerTable[playerid].hand.length})`;\n\t\t\tbuf += `</li>`;\n\t\t}\n\t\tbuf += `</ol>`;\n\t\treturn buf;\n\t}\n\n\tonAwaitUno() {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tif (!this.awaitUno) return resolve();\n\n\t\t\tthis.state = \"uno\";\n\t\t\t// the throttle for sending messages is at 600ms for non-authed users,\n\t\t\t// wait 750ms before sending the next person's turn.\n\t\t\t// this allows games to be fairer, so the next player would not spam the pass command blindly\n\t\t\t// to force the player to draw 2 cards.\n\t\t\t// this also makes games with uno bots not always turn in the bot's favour.\n\t\t\t// without a delayed turn, 3 bots playing will always result in a endless game\n\t\t\tsetTimeout(() => resolve(), 750);\n\t\t});\n\t}\n\n\tnextTurn(starting?: boolean) {\n\t\tvoid this.onAwaitUno().then(() => {\n\t\t\tif (!starting) this.onNextPlayer();\n\n\t\t\tif (this.timer) clearTimeout(this.timer);\n\t\t\tconst player = this.playerTable[this.currentPlayerid];\n\n\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${player.name}'s turn.`);\n\t\t\tthis.state = 'play';\n\t\t\tif (player.cardLock) player.cardLock = null;\n\t\t\tplayer.sendDisplay();\n\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${player.name} has been automatically disqualified.`);\n\t\t\t\tthis.eliminate(this.currentPlayerid);\n\t\t\t}, this.maxTime * 1000);\n\t\t});\n\t}\n\n\tonNextPlayer() {\n\t\t// if none is set\n\t\tif (!this.currentPlayerid) {\n\t\t\tconst userList = Object.keys(this.playerTable);\n\t\t\tthis.currentPlayerid = userList[Math.floor(this.playerCount * Math.random())] as ID;\n\t\t}\n\n\t\tthis.currentPlayerid = this.getNextPlayer();\n\t}\n\n\tgetNextPlayer() {\n\t\tconst userList = Object.keys(this.playerTable);\n\n\t\tlet player: ID = userList[(userList.indexOf(this.currentPlayerid) + this.direction)] as ID;\n\n\t\tif (!player) {\n\t\t\tplayer = toID(this.direction === 1 ? userList[0] : userList[this.playerCount - 1]);\n\t\t}\n\t\treturn player;\n\t}\n\n\tonDraw(player: UNOPlayer) {\n\t\tif (this.currentPlayerid !== player.id || this.state !== 'play') return false;\n\t\tif (player.cardLock) return true;\n\n\t\tthis.onCheckUno();\n\n\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${player.name} has drawn a card.`);\n\n\t\tconst card = this.onDrawCard(player, 1);\n\t\tplayer.sendDisplay();\n\t\tplayer.cardLock = card[0].name;\n\t}\n\n\tonPlay(player: UNOPlayer, cardName: string) {\n\t\tif (this.currentPlayerid !== player.id || this.state !== 'play') return false;\n\n\t\tconst card = player.hasCard(cardName);\n\t\tif (!card) return \"You do not have that card.\";\n\n\t\t// check for legal play\n\t\tif (!this.topCard) {\n\t\t\t// should never happen\n\t\t\tthrow new Error(`No top card in the discard pile.`);\n\t\t}\n\t\tif (player.cardLock && player.cardLock !== cardName) return `You can only play ${player.cardLock} after drawing.`;\n\t\tif (\n\t\t\tcard.color !== 'Black' &&\n\t\t\tcard.color !== (this.topCard.changedColor || this.topCard.color) &&\n\t\t\tcard.value !== this.topCard.value\n\t\t) {\n\t\t\treturn `You cannot play this card; you can only play: Wild cards, ${this.topCard.changedColor ? 'and' : ''} ${this.topCard.changedColor || this.topCard.color} cards${this.topCard.changedColor ? \"\" : ` and cards with the digit ${this.topCard.value}`}.`;\n\t\t}\n\t\tif (card.value === '+4' && !player.canPlayWildFour()) {\n\t\t\treturn \"You cannot play Wild +4 when you still have a card with the same color as the top card.\";\n\t\t}\n\n\t\tif (this.timer) clearTimeout(this.timer); // reset the autodq timer.\n\n\t\tthis.onCheckUno();\n\n\t\t// update the game information.\n\t\tthis.topCard = card;\n\t\tplayer.removeCard(cardName);\n\t\tthis.discards.unshift(card);\n\n\t\t// update the unoId here, so when the display is sent to the player when the play is made\n\t\tif (player.hand.length === 1) {\n\t\t\tthis.awaitUno = player.id;\n\t\t\tthis.unoId = Math.floor(Math.random() * 100).toString() as ID;\n\t\t}\n\n\t\tplayer.sendDisplay(); // update display without the card in it for purposes such as choosing colors\n\n\t\tthis.sendToRoom(`|raw|${Utils.escapeHTML(player.name)} has played a <span style=\"font-weight:bold;color: ${textColors[card.color]}\">${card.name}</span>.`);\n\n\t\t// handle hand size\n\t\tif (!player.hand.length) {\n\t\t\tthis.onWin(player);\n\t\t\treturn;\n\t\t}\n\n\t\t// continue with effects and next player\n\t\tthis.onRunEffect(card.value);\n\t\tif (this.state === 'play') this.nextTurn();\n\t}\n\n\tonRunEffect(value: string, initialize?: boolean) {\n\t\tconst colorDisplay = `|uhtml|uno-color|<table style=\"width: 100%; border: 1px solid black\"><tr><td style=\"width: 50%\"><button style=\"width: 100%; background-color: red; border: 2px solid rgba(0 , 0 , 0 , 0.59); border-radius: 5px; padding: 5px\" name=send value=\"/uno color Red\">Red</button></td><td style=\"width: 50%\"><button style=\"width: 100%; background-color: blue; border: 2px solid rgba(0 , 0 , 0 , 0.59); border-radius: 5px; color: white; padding: 5px\" name=send value=\"/uno color Blue\">Blue</button></td></tr><tr><td style=\"width: 50%\"><button style=\"width: 100%; background-color: green; border: 2px solid rgba(0 , 0 , 0 , 0.59); border-radius: 5px; padding: 5px\" name=send value=\"/uno color Green\">Green</button></td><td style=\"width: 50%\"><button style=\"width: 100%; background-color: yellow; border: 2px solid rgba(0 , 0 , 0 , 0.59); border-radius: 5px; padding: 5px\" name=send value=\"/uno color Yellow\">Yellow</button></td></tr></table>`;\n\n\t\tswitch (value) {\n\t\tcase 'Reverse':\n\t\t\tthis.direction *= -1;\n\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|The direction of the game has changed.`);\n\t\t\t// in 2 player games, reverse sends the turn back to the player.\n\t\t\tif (!initialize && this.playerCount === 2) this.onNextPlayer();\n\t\t\tbreak;\n\t\tcase 'Skip':\n\t\t\tthis.onNextPlayer();\n\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${this.playerTable[this.currentPlayerid].name}'s turn has been skipped.`);\n\t\t\tbreak;\n\t\tcase '+2':\n\t\t\tthis.onNextPlayer();\n\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${this.playerTable[this.currentPlayerid].name} has been forced to draw 2 cards.`);\n\t\t\tthis.onDrawCard(this.playerTable[this.currentPlayerid], 2);\n\t\t\tbreak;\n\t\tcase '+4':\n\t\t\tthis.playerTable[this.currentPlayerid].sendRoom(colorDisplay);\n\t\t\tthis.state = 'color';\n\t\t\t// apply to the next in line, since the current player still has to choose the color\n\t\t\tconst next = this.getNextPlayer();\n\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${this.playerTable[next].name} has been forced to draw 4 cards.`);\n\t\t\tthis.onDrawCard(this.playerTable[next], 4);\n\t\t\tthis.isPlusFour = true;\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${this.playerTable[this.currentPlayerid].name} has been automatically disqualified.`);\n\t\t\t\tthis.eliminate(this.currentPlayerid);\n\t\t\t}, this.maxTime * 1000);\n\t\t\tbreak;\n\t\tcase 'Wild':\n\t\t\tthis.playerTable[this.currentPlayerid].sendRoom(colorDisplay);\n\t\t\tthis.state = 'color';\n\t\t\tthis.timer = setTimeout(() => {\n\t\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${this.playerTable[this.currentPlayerid].name} has been automatically disqualified.`);\n\t\t\t\tthis.eliminate(this.currentPlayerid);\n\t\t\t}, this.maxTime * 1000);\n\t\t\tbreak;\n\t\t}\n\t\tif (initialize) this.onNextPlayer();\n\t}\n\n\tonSelectColor(player: UNOPlayer, color: Color) {\n\t\tif (\n\t\t\t!['Red', 'Blue', 'Green', 'Yellow'].includes(color) ||\n\t\t\tplayer.id !== this.currentPlayerid ||\n\t\t\tthis.state !== 'color'\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.topCard) {\n\t\t\t// should never happen\n\t\t\tthrow new Error(`No top card in the discard pile.`);\n\t\t}\n\t\tthis.topCard.changedColor = color;\n\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|The color has been changed to ${color}.`);\n\t\tif (this.timer) clearTimeout(this.timer);\n\n\t\t// remove color change menu and send the display of their cards again\n\t\tplayer.sendRoom(\"|uhtmlchange|uno-color|\");\n\t\tplayer.sendDisplay();\n\n\t\tif (this.isPlusFour) {\n\t\t\tthis.isPlusFour = false;\n\t\t\tthis.onNextPlayer(); // handle the skipping here.\n\t\t}\n\n\t\tthis.nextTurn();\n\t}\n\n\tonDrawCard(player: UNOPlayer, count: number) {\n\t\tif (typeof count === 'string') count = parseInt(count);\n\t\tif (!count || isNaN(count) || count < 1) count = 1;\n\t\tconst drawnCards = this.drawCard(count);\n\n\t\tplayer.hand.push(...drawnCards);\n\t\tplayer.sendRoom(\n\t\t\t`|raw|You have drawn the following card${Chat.plural(drawnCards)}: ` +\n\t\t\t`${drawnCards.map(card => `<span style=\"color: ${textColors[card.color]}\">${card.name}</span>`).join(', ')}.`\n\t\t);\n\t\treturn drawnCards;\n\t}\n\n\tdrawCard(count: number) {\n\t\tif (typeof count === 'string') count = parseInt(count);\n\t\tif (!count || isNaN(count) || count < 1) count = 1;\n\t\tconst drawnCards: Card[] = [];\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tif (!this.deck.length) {\n\t\t\t\t// shuffle the cards back into the deck, or if there are no discards, add another deck into the game.\n\t\t\t\tthis.deck = this.discards.length ? Utils.shuffle(this.discards) : Utils.shuffle(createDeck());\n\t\t\t\tthis.discards = []; // clear discard pile\n\t\t\t}\n\t\t\tdrawnCards.push(this.deck[this.deck.length - 1]);\n\t\t\tthis.deck.pop();\n\t\t}\n\t\treturn drawnCards;\n\t}\n\n\tonUno(player: UNOPlayer, unoId: ID) {\n\t\t// uno id makes spamming /uno uno impossible\n\t\tif (this.unoId !== unoId || player.id !== this.awaitUno) return false;\n\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|**UNO!** ${player.name} is down to their last card!`);\n\t\tthis.awaitUno = null;\n\t\tthis.unoId = null;\n\t}\n\n\tonCheckUno() {\n\t\tif (this.awaitUno) {\n\t\t\t// if the previous player hasn't hit UNO before the next player plays something, they are forced to draw 2 cards;\n\t\t\tif (this.awaitUno !== this.currentPlayerid) {\n\t\t\t\tthis.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${this.playerTable[this.awaitUno].name} forgot to say UNO! and is forced to draw 2 cards.`);\n\t\t\t\tthis.onDrawCard(this.playerTable[this.awaitUno], 2);\n\t\t\t}\n\t\t\tthis.awaitUno = null;\n\t\t\tthis.unoId = null;\n\t\t}\n\t}\n\n\tonSendHand(user: User) {\n\t\tif (!(user.id in this.playerTable) || this.state === 'signups') return false;\n\n\t\tthis.playerTable[user.id].sendDisplay();\n\t}\n\n\tonWin(player: UNOPlayer) {\n\t\tthis.sendToRoom(\n\t\t\tUtils.html`|raw|<div class=\"broadcast-blue\">Congratulations to ${player.name} for winning the game of UNO!</div>`,\n\t\t\ttrue\n\t\t);\n\t\tthis.destroy();\n\t}\n\n\tdestroy() {\n\t\tif (this.timer) clearTimeout(this.timer);\n\t\tif (this.autostartTimer) clearTimeout(this.autostartTimer);\n\t\tthis.sendToRoom(`|uhtmlchange|uno-${this.gameNumber}|<div class=\"infobox\">The game of UNO has ended.</div>`, true);\n\n\t\t// deallocate games for each player.\n\t\tfor (const i in this.playerTable) {\n\t\t\tthis.playerTable[i].destroy();\n\t\t}\n\t\tthis.room.game = null;\n\t}\n}\n\nclass UNOPlayer extends Rooms.RoomGamePlayer<UNO> {\n\thand: Card[];\n\tcardLock: string | null;\n\n\tconstructor(user: User, game: UNO) {\n\t\tsuper(user, game);\n\t\tthis.hand = [];\n\t\tthis.cardLock = null;\n\t}\n\n\tcanPlayWildFour() {\n\t\tif (!this.game.topCard) {\n\t\t\t// should never happen\n\t\t\tthrow new Error(`No top card in the discard pile.`);\n\t\t}\n\t\tconst color = (this.game.topCard.changedColor || this.game.topCard.color);\n\n\t\tif (this.hand.some(c => c.color === color)) return false;\n\t\treturn true;\n\t}\n\n\thasCard(cardName: string) {\n\t\treturn this.hand.find(card => card.name === cardName);\n\t}\n\n\tremoveCard(cardName: string) {\n\t\tfor (const [i, card] of this.hand.entries()) {\n\t\t\tif (card.name === cardName) {\n\t\t\t\tthis.hand.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tbuildHand() {\n\t\treturn Utils.sortBy(this.hand, card => [card.color, card.value])\n\t\t\t.map((card, i) => cardHTML(card, i === this.hand.length - 1));\n\t}\n\n\tsendDisplay() {\n\t\tconst hand = this.buildHand().join('');\n\t\tconst players = `<p><strong>Players (${this.game.playerCount}):</strong></p> ${this.game.getPlayers(true)}`;\n\t\tconst draw = '<button class=\"button\" style=\"width: 45%; background: rgba(0, 0, 255, 0.05)\" name=send value=\"/uno draw\">Draw a card!</button>';\n\t\tconst pass = '<button class=\"button\" style=\" width: 45%; background: rgba(255, 0, 0, 0.05)\" name=send value=\"/uno pass\">Pass!</button>';\n\t\tconst uno = `<button class=\"button\" style=\" width: 90%; background: rgba(0, 255, 0, 0.05); height: 60px; margin-top: 2px;\" name=send value=\"/uno uno ${this.game.unoId || '0'}\">UNO!</button>`;\n\n\t\tif (!this.game.topCard) {\n\t\t\t// should never happen\n\t\t\tthrow new Error(`No top card in the discard pile.`);\n\t\t}\n\t\tconst top = `<strong>Top Card: <span style=\"color: ${textColors[this.game.topCard.changedColor || this.game.topCard.color]}\">${this.game.topCard.name}</span></strong>`;\n\n\t\t// clear previous display and show new display\n\t\tthis.sendRoom(\"|uhtmlchange|uno-hand|\");\n\t\tthis.sendRoom(\n\t\t\t`|uhtml|uno-hand|<div style=\"border: 1px solid skyblue; padding: 0 0 5px 0\"><table style=\"width: 100%; table-layout: fixed; border-radius: 3px\"><tr><td colspan=\"4\" rowspan=\"2\" style=\"padding: 5px\"><div style=\"overflow-x: auto; white-space: nowrap; width: 100%\">${hand}</div></td>${this.game.currentPlayerid === this.id ? `<td colspan=\"2\" style=\"padding: 5px 5px 0 5px\">${top}</td></tr>` : \"\"}` +\n\t\t\t`<tr><td colspan=\"2\" style=\"vertical-align: top; padding: 0px 5px 5px 5px\"><div style=\"overflow-y: scroll\">${players}</div></td></tr></table>` +\n\t\t\t`${this.game.currentPlayerid === this.id ? `<div style=\"text-align: center\">${draw}${pass}<br />${uno}</div>` : \"\"}</div>`\n\t\t);\n\t}\n}\n\nexport const commands: Chat.ChatCommands = {\n\tuno: {\n\t\t// roomowner commands\n\t\toff: 'disable',\n\t\tdisable(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (room.settings.unoDisabled) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"UNO is already disabled in this room.\");\n\t\t\t}\n\t\t\troom.settings.unoDisabled = true;\n\t\t\troom.saveSettings();\n\t\t\treturn this.sendReply(\"UNO has been disabled for this room.\");\n\t\t},\n\n\t\ton: 'enable',\n\t\tenable(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (!room.settings.unoDisabled) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"UNO is already enabled in this room.\");\n\t\t\t}\n\t\t\tdelete room.settings.unoDisabled;\n\t\t\troom.saveSettings();\n\t\t\treturn this.sendReply(\"UNO has been enabled for this room.\");\n\t\t},\n\n\t\t// moderation commands\n\t\tnew: 'create',\n\t\tmake: 'create',\n\t\tcreatepublic: 'create',\n\t\tmakepublic: 'create',\n\t\tcreateprivate: 'create',\n\t\tmakeprivate: 'create',\n\t\tcreate(target, room, user, connection, cmd) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tif (room.settings.unoDisabled) throw new Chat.ErrorMessage(\"UNO is currently disabled for this room.\");\n\t\t\tif (room.game) throw new Chat.ErrorMessage(\"There is already a game in progress in this room.\");\n\n\t\t\tconst suppressMessages = cmd.includes('private') || !(cmd.includes('public') || room.roomid === 'gamecorner');\n\n\t\t\tlet cap = parseInt(target);\n\t\t\tif (isNaN(cap)) cap = 12;\n\t\t\tif (cap < 2) cap = 2;\n\t\t\troom.game = new UNO(room, cap, suppressMessages);\n\t\t\tthis.privateModAction(`A game of UNO was created by ${user.name}.`);\n\t\t\tthis.modlog('UNO CREATE');\n\t\t},\n\n\t\tcap: 'setcap',\n\t\tsetcap(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (game.state !== 'signups') {\n\t\t\t\tthrow new Chat.ErrorMessage(`There is no UNO game in the signups phase in this room, so adjusting the player cap would do nothing.`);\n\t\t\t}\n\t\t\tlet cap = parseInt(target);\n\t\t\tif (isNaN(cap) || cap < 2) {\n\t\t\t\tcap = 2;\n\t\t\t}\n\t\t\tgame.playerCap = cap;\n\t\t\tthis.privateModAction(`The playercap was set to ${game.playerCap} by ${user.name}.`);\n\t\t\tthis.modlog('UNO PLAYERCAP');\n\t\t},\n\n\t\tstart(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (game.state !== 'signups') {\n\t\t\t\tthrow new Chat.ErrorMessage(\"There is no UNO game in signups phase in this room.\");\n\t\t\t}\n\t\t\tgame.onStart();\n\t\t\tthis.privateModAction(`The game of UNO was started by ${user.name}.`);\n\t\t\tthis.modlog('UNO START');\n\t\t},\n\n\t\tstop: 'end',\n\t\tend(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tif (!room.game || room.game.gameid !== 'uno') {\n\t\t\t\tthrow new Chat.ErrorMessage(\"There is no UNO game going on in this room.\");\n\t\t\t}\n\t\t\troom.game.destroy();\n\t\t\troom.add(\"The game of UNO was forcibly ended.\").update();\n\t\t\tthis.privateModAction(`The game of UNO was ended by ${user.name}.`);\n\t\t\tthis.modlog('UNO END');\n\t\t},\n\n\t\tautodq: 'timer',\n\t\ttimer(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tconst amount = parseInt(target);\n\t\t\tif (!amount || amount < 5 || amount > 300) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"The amount must be a number between 5 and 300.\");\n\t\t\t}\n\n\t\t\tgame.maxTime = amount;\n\t\t\tif (game.timer) clearTimeout(game.timer);\n\t\t\tgame.timer = setTimeout(() => {\n\t\t\t\tgame.eliminate(game.currentPlayerid);\n\t\t\t}, amount * 1000);\n\t\t\tthis.addModAction(`${user.name} has set the UNO automatic disqualification timer to ${amount} seconds.`);\n\t\t\tthis.modlog('UNO TIMER', null, `${amount} seconds`);\n\t\t},\n\n\t\tautostart(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (toID(target) === 'off') {\n\t\t\t\tif (!game.autostartTimer) throw new Chat.ErrorMessage(\"There is no autostart timer running on.\");\n\t\t\t\tthis.addModAction(`${user.name} has turned off the UNO autostart timer.`);\n\t\t\t\tclearTimeout(game.autostartTimer);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst amount = parseInt(target);\n\t\t\tif (!amount || amount < 30 || amount > 600) {\n\t\t\t\tthrow new Chat.ErrorMessage(\"The amount must be a number between 30 and 600 seconds.\");\n\t\t\t}\n\t\t\tif (game.state !== 'signups') throw new Chat.ErrorMessage(\"The game of UNO has already started.\");\n\t\t\tif (game.autostartTimer) clearTimeout(game.autostartTimer);\n\t\t\tgame.autostartTimer = setTimeout(() => {\n\t\t\t\tgame.onStart(true);\n\t\t\t}, amount * 1000);\n\t\t\tthis.addModAction(`${user.name} has set the UNO autostart timer to ${amount} seconds.`);\n\t\t},\n\n\t\tdq: 'disqualify',\n\t\tdisqualify(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tconst game = this.requireGame(UNO);\n\n\t\t\tconst disqualified = game.eliminate(toID(target));\n\t\t\tif (disqualified === false) throw new Chat.ErrorMessage(`Unable to disqualify ${target}.`);\n\t\t\tthis.privateModAction(`${user.name} has disqualified ${disqualified} from the UNO game.`);\n\t\t\tthis.modlog('UNO DQ', toID(target));\n\t\t\troom.add(`${disqualified} has been disqualified from the UNO game.`).update();\n\t\t},\n\n\t\t// player/user commands\n\t\tj: 'join',\n\t\tjoin(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tthis.checkChat();\n\t\t\tif (!game.joinGame(user)) throw new Chat.ErrorMessage(\"Unable to join the game.\");\n\n\t\t\treturn this.sendReply(\"You have joined the game of UNO.\");\n\t\t},\n\n\t\tl: 'leave',\n\t\tleave(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!game.leaveGame(user)) throw new Chat.ErrorMessage(\"Unable to leave the game.\");\n\t\t\treturn this.sendReply(\"You have left the game of UNO.\");\n\t\t},\n\n\t\tplay(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!game) throw new Chat.ErrorMessage(\"There is no UNO game going on in this room right now.\");\n\t\t\tconst player: UNOPlayer | undefined = game.playerTable[user.id];\n\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of UNO.`);\n\t\t\tconst error = game.onPlay(player, target);\n\t\t\tif (typeof error === 'string') throw new Chat.ErrorMessage(error);\n\t\t},\n\n\t\tdraw(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = room.getGame(UNO);\n\t\t\tif (!game) throw new Chat.ErrorMessage(\"There is no UNO game going on in this room right now.\");\n\t\t\tconst player: UNOPlayer | undefined = game.playerTable[user.id];\n\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of UNO.`);\n\t\t\tconst error = game.onDraw(player);\n\t\t\tif (error) throw new Chat.ErrorMessage(\"You have already drawn a card this turn.\");\n\t\t},\n\n\t\tpass(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!game) throw new Chat.ErrorMessage(\"There is no UNO game going on in this room right now.\");\n\t\t\tif (game.currentPlayerid !== user.id) throw new Chat.ErrorMessage(\"It is currently not your turn.\");\n\t\t\tconst player: UNOPlayer | undefined = game.playerTable[user.id];\n\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of UNO.`);\n\t\t\tif (!player.cardLock) throw new Chat.ErrorMessage(\"You cannot pass until you draw a card.\");\n\t\t\tif (game.state === 'color') throw new Chat.ErrorMessage(\"You cannot pass until you choose a color.\");\n\n\t\t\tgame.sendToRoom(`|c:|${Math.floor(Date.now() / 1000)}|&|${user.name} has passed.`);\n\t\t\tgame.nextTurn();\n\t\t},\n\n\t\tcolor(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tconst player: UNOPlayer | undefined = game.playerTable[user.id];\n\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of UNO.`);\n\t\t\tlet color: Color;\n\t\t\tif (target === 'Red' || target === 'Green' || target === 'Blue' || target === 'Yellow' || target === 'Black') {\n\t\t\t\tcolor = target;\n\t\t\t} else {\n\t\t\t\tthrow new Chat.ErrorMessage(`\"${target}\" is not a valid color.`);\n\t\t\t}\n\t\t\tgame.onSelectColor(player, color);\n\t\t},\n\n\t\tuno(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tconst player: UNOPlayer | undefined = game.playerTable[user.id];\n\t\t\tif (!player) throw new Chat.ErrorMessage(`You are not in the game of UNO.`);\n\t\t\tgame.onUno(player, toID(target));\n\t\t},\n\n\t\t// information commands\n\t\t'': 'hand',\n\t\thand(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tgame.onSendHand(user);\n\t\t},\n\n\t\t'c': 'cards',\n\t\tcards(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!this.runBroadcast()) return false;\n\t\t\tconst players = `<strong>Players (${game.playerCount}):</strong></p>${game.getPlayers(true)}`;\n\t\t\tthis.sendReplyBox(`<tr><td colspan=\"2\" style=\"vertical-align: top; padding: 0px 5px 5px 5px\"><div style=\"overflow-y: scroll\">${players}</div></td></tr></table>`);\n\t\t},\n\n\t\tplayers: 'getusers',\n\t\tusers: 'getusers',\n\t\tgetplayers: 'getusers',\n\t\tgetusers(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!this.runBroadcast()) return false;\n\t\t\tthis.sendReplyBox(`<strong>Players (${game.playerCount})</strong>:${game.getPlayers()}`);\n\t\t},\n\n\t\thelp(target, room, user) {\n\t\t\tthis.parse('/help uno');\n\t\t},\n\n\t\t// suppression commands\n\t\tsuppress(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tthis.checkCan('minigame', null, room);\n\n\t\t\ttarget = toID(target);\n\t\t\tconst state = target === 'on' ? true : target === 'off' ? false : undefined;\n\n\t\t\tif (state === undefined) {\n\t\t\t\treturn this.sendReply(`Suppression of UNO game messages is currently ${game.suppressMessages ? 'on' : 'off'}.`);\n\t\t\t}\n\t\t\tif (state === game.suppressMessages) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Suppression of UNO game messages is already ${game.suppressMessages ? 'on' : 'off'}.`);\n\t\t\t}\n\n\t\t\tgame.suppressMessages = state;\n\n\t\t\tthis.addModAction(`${user.name} has turned ${state ? 'on' : 'off'} suppression of UNO game messages.`);\n\t\t\tthis.modlog('UNO SUPRESS', null, (state ? 'ON' : 'OFF'));\n\t\t},\n\n\t\tspectate(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!game) throw new Chat.ErrorMessage(\"There is no UNO game going on in this room right now.\");\n\n\t\t\tif (!game.suppressMessages) throw new Chat.ErrorMessage(\"The current UNO game is not suppressing messages.\");\n\t\t\tif (user.id in game.spectators) throw new Chat.ErrorMessage(\"You are already spectating this game.\");\n\n\t\t\tgame.spectators[user.id] = 1;\n\t\t\tthis.sendReply(\"You are now spectating this private UNO game.\");\n\t\t},\n\n\t\tunspectate(target, room, user) {\n\t\t\tconst game = this.requireGame(UNO);\n\t\t\tif (!game) throw new Chat.ErrorMessage(\"There is no UNO game going on in this room right now.\");\n\n\t\t\tif (!game.suppressMessages) throw new Chat.ErrorMessage(\"The current UNO game is not suppressing messages.\");\n\t\t\tif (!(user.id in game.spectators)) throw new Chat.ErrorMessage(\"You are currently not spectating this game.\");\n\n\t\t\tdelete game.spectators[user.id];\n\t\t\tthis.sendReply(\"You are no longer spectating this private UNO game.\");\n\t\t},\n\t},\n\n\tunohelp: [\n\t\t`/uno create [player cap] - creates a new UNO game with an optional player cap (default player cap at 12). Use the command [createpublic] to force a public game or [createprivate] to force a private game. Requires: % @ # &`,\n\t\t`/uno setcap [player cap] - adjusts the player cap of the current UNO game. Requires: % @ # &`,\n\t\t`/uno timer [amount] - sets an auto disqualification timer for [amount] seconds. Requires: % @ # &`,\n\t\t`/uno autostart [amount] - sets an auto starting timer for [amount] seconds. Requires: % @ # &`,\n\t\t`/uno end - ends the current game of UNO. Requires: % @ # &`,\n\t\t`/uno start - starts the current game of UNO. Requires: % @ # &`,\n\t\t`/uno disqualify [player] - disqualifies the player from the game. Requires: % @ # &`,\n\t\t`/uno hand - displays your own hand.`,\n\t\t`/uno cards - displays the number of cards for each player.`,\n\t\t`/uno getusers - displays the players still in the game.`,\n\t\t`/uno [spectate|unspectate] - spectate / unspectate the current private UNO game.`,\n\t\t`/uno suppress [on|off] - Toggles suppression of game messages.`,\n\t],\n};\n\nexport const roomSettings: Chat.SettingsHandler = room => ({\n\tlabel: \"UNO\",\n\tpermission: 'editroom',\n\toptions: [\n\t\t[`disabled`, room.settings.unoDisabled || 'uno disable'],\n\t\t[`enabled`, !room.settings.unoDisabled || 'uno enable'],\n\t],\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,iBAAoB;AARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,MAAM,UAAU;AAEhB,MAAM,eAAuC;AAAA,EAC5C,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,KAAK;AAAA,EACL,OAAO;AACR;AAEA,MAAM,aAAqC;AAAA,EAC1C,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,KAAK;AAAA,EACL,OAAO;AACR;AAEA,MAAM,aAAa;AAEnB,SAAS,SAAS,MAAY,UAAmB;AAChD,MAAI,UAAU,KAAK,MAAM,QAAQ,eAAe,EAAE;AAClD,QAAM,aAAa,aAAa,KAAK,KAAK;AAC1C,MAAI,YAAY;AAAK,cAAU;AAE/B,SAAO,mFAAmF,6EAA6E,WAAW,OAAO,sEAAsE,KAAK,8CAA8C,+CAA+C,iDAAiD,4CAA4C,2CAA2C,KAAK,qBAAqB,KAAK,SAAS;AAClhB;AAEA,SAAS,aAAa;AACrB,QAAM,SAAkB,CAAC,OAAO,QAAQ,SAAS,QAAQ;AACzD,QAAM,SAAS,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,WAAW,QAAQ,IAAI;AAEpF,QAAM,QAAgB,CAAC;AAEvB,aAAW,SAAS,QAAQ;AAC3B,UAAM,KAAK,GAAG,OAAO,IAAI,OAAK;AAC7B,YAAM,IAAU,EAAC,OAAO,GAAG,OAAc,MAAM,GAAG,SAAS,IAAG;AAC9D,aAAO;AAAA,IACR,CAAC,CAAC;AAAA,EACH;AAEA,SAAO;AAAA;AAAA,IAEN,GAAG;AAAA,IACH,GAAG;AAAA;AAAA,IAEH,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK;AACxB,YAAM,IAAU,EAAC,OAAO,OAAO,CAAC,GAAG,OAAO,KAAK,MAAM,GAAG,OAAO,CAAC,MAAK;AACrE,aAAO;AAAA,IACR,CAAC;AAAA;AAAA,IAED,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK;AACxB,YAAM,IAAU,EAAC,OAAO,SAAS,OAAO,QAAQ,MAAM,OAAM;AAC5D,aAAO;AAAA,IACR,CAAC;AAAA;AAAA,IAED,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,OAAK;AACxB,YAAM,IAAU,EAAC,OAAO,SAAS,OAAO,MAAM,MAAM,UAAS;AAC7D,aAAO;AAAA,IACR,CAAC;AAAA,EACF;AACD;AAEO,MAAM,YAAY,MAAM,SAAoB;AAAA,EAmBlD,YAAY,MAAY,KAAa,kBAA2B;AAC/D,UAAM,IAAI;AAEV,SAAK,aAAa,KAAK,eAAe;AAEtC,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,iBAAiB;AAEtB,SAAK,SAAS;AACd,SAAK,QAAQ;AAEb,SAAK,QAAQ;AACb,SAAK,kBAAkB;AACvB,SAAK,OAAO,iBAAM,QAAQ,WAAW,CAAC;AACtC,SAAK,WAAW,CAAC;AACjB,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,aAAa;AAElB,SAAK,YAAY;AAEjB,SAAK,mBAAmB,oBAAoB;AAC5C,SAAK,aAAa,uBAAO,OAAO,IAAI;AAEpC,SAAK,WAAW,cAAc,KAAK,kWAAkW,KAAK,mBAAmB,qHAAqH,YAAY,IAAI;AAAA,EACniB;AAAA,EAEA,qBAAqB;AAAA,EAAC;AAAA,EAEtB,UAAU,MAAY,YAAwB;AAC7C,QAAI,KAAK,UAAU,WAAW;AAC7B,iBAAW;AAAA,QACV,KAAK;AAAA,QACL,cAAc,KAAK,kWAIhB,KAAK,mBACP,iHAAiH;AAAA,MACnH;AAAA,IACD,WAAW,KAAK,WAAW,IAAI,MAAM,OAAO;AAC3C,iBAAW;AAAA,QACV,KAAK;AAAA,QACL,cAAc,KAAK,gKAChB,KAAK,mBAAmB,6FAA6F;AAAA,MACzH;AAAA,IACD;AAAA,EACD;AAAA,EAEA,QAAQ,aAAuB;AAC9B,QAAI,KAAK,cAAc,GAAG;AACzB,UAAI,aAAa;AAChB,aAAK,KAAK,IAAI,uEAAuE;AACrF,aAAK,QAAQ;AACb,eAAO;AAAA,MACR,OAAO;AACN,cAAM,IAAI,KAAK,aAAa,0DAA0D;AAAA,MACvF;AAAA,IACD;AACA,QAAI,KAAK;AAAgB,mBAAa,KAAK,cAAc;AACzD,SAAK,WAAW,oBAAoB,KAAK,sJAAsJ,KAAK,mBAAmB,6FAA6F,YAAY,IAAI;AACpU,SAAK,QAAQ;AAEb,SAAK,aAAa;AAGlB,eAAW,KAAK,KAAK,aAAa;AACjC,WAAK,YAAY,CAAC,EAAE,KAAK,KAAK,GAAG,KAAK,SAAS,CAAC,CAAC;AAAA,IAClD;AAGA,OAAG;AACF,WAAK,UAAU,KAAK,SAAS,CAAC,EAAE,CAAC;AACjC,WAAK,SAAS,QAAQ,KAAK,OAAO;AAAA,IACnC,SAAS,KAAK,QAAQ,UAAU;AAEhC,SAAK,WAAW,6DAA6D,WAAW,KAAK,QAAQ,KAAK,MAAM,KAAK,QAAQ,cAAc;AAE3I,SAAK,YAAY,KAAK,QAAQ,OAAO,IAAI;AACzC,SAAK,SAAS,IAAI;AAAA,EACnB;AAAA,EAEA,SAAS,MAAY;AACpB,QAAI,KAAK,MAAM,KAAK,aAAa;AAChC,YAAM,IAAI,KAAK,aAAa,0CAA0C;AAAA,IACvE;AACA,QAAI,KAAK,UAAU,aAAa,KAAK,UAAU,IAAI,GAAG;AACrD,WAAK,WAAW,GAAG,KAAK,kCAAkC;AAC1D,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA,EAEA,UAAU,MAAY;AACrB,QAAI,EAAE,KAAK,MAAM,KAAK;AAAc,aAAO;AAC3C,QAAK,KAAK,UAAU,aAAa,KAAK,aAAa,IAAI,KAAM,KAAK,UAAU,KAAK,EAAE,GAAG;AACrF,WAAK,WAAW,GAAG,KAAK,gCAAgC;AACxD,aAAO;AAAA,IACR;AACA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,MAAY;AACtB,WAAO,IAAI,UAAU,MAAM,IAAI;AAAA,EAChC;AAAA,EAEA,SAAS,MAAY,WAAe,WAAoB,gBAAyB;AAChF,QAAI,EAAE,aAAa,KAAK,gBAAgB,KAAK,OAAO;AAAW,aAAO;AACtE,QAAI,CAAC,KAAK,SAAS,CAAC,gBAAgB;AACnC,WAAK,MAAM,OAAO,KAAK,MAAM;AAC7B,WAAK,aAAa;AAClB;AAAA,IACD;AACA,SAAK,YAAY,KAAK,EAAE,IAAI,KAAK,YAAY,SAAS;AAEtD,QAAI,KAAK,OAAO;AAAW,aAAO,KAAK,YAAY,SAAS;AAG5D,SAAK,YAAY,KAAK,EAAE,EAAE,OAAO,KAAK;AACtC,SAAK,YAAY,KAAK,EAAE,EAAE,KAAK,KAAK;AACpC,QAAI,KAAK,YAAY,KAAK,aAAa;AAAW,WAAK,WAAW,KAAK;AAEvE,QAAI,KAAK,oBAAoB;AAAW,WAAK,kBAAkB,KAAK;AAAA,EACrE;AAAA,EAEA,UAAU,QAAY;AACrB,QAAI,EAAE,UAAU,KAAK;AAAc,aAAO;AAE1C,UAAM,OAAO,KAAK,YAAY,MAAM,EAAE;AAEtC,QAAI,KAAK,gBAAgB,GAAG;AAC3B,WAAK,aAAa,KAAK,YAAY,MAAM,CAAC;AAC1C,WAAK,MAAM,KAAK,YAAY,OAAO,KAAK,KAAK,WAAW,EAAE,CAAC,CAAC,CAAC;AAC7D,aAAO;AAAA,IACR;AAGA,UAAM,wBAAwB,WAAW,KAAK;AAC9C,QAAI,uBAAuB;AAC1B,UAAI,KAAK,UAAU,SAAS;AAC3B,YAAI,CAAC,KAAK,SAAS;AAElB,gBAAM,IAAI,MAAM,kCAAkC;AAAA,QACnD;AACA,aAAK,QAAQ,eAAe,KAAK,SAAS,CAAC,EAAE,gBAAgB,KAAK,SAAS,CAAC,EAAE;AAC9E,aAAK,WAAW,QAAQ,iBAAM,WAAW,IAAI,wEAAwE,WAAW,KAAK,QAAQ,YAAY,MAAM,KAAK,QAAQ,sBAAsB;AAAA,MACnM;AAAA,IACD;AAEA,QAAI,KAAK,aAAa;AAAQ,WAAK,WAAW;AAC9C,QAAI,CAAC,KAAK,SAAS;AAClB,YAAM,IAAI,KAAK,aAAa,wBAAwB,OAAO;AAAA,IAC5D;AAGA,SAAK,SAAS,KAAK,GAAG,KAAK,YAAY,MAAM,EAAE,IAAI;AAEnD,QAAI,uBAAuB;AAC1B,WAAK,aAAa;AAAA,IACnB;AACA,SAAK,aAAa,KAAK,YAAY,MAAM,CAAC;AAC1C,QAAI,uBAAuB;AAC1B,WAAK,SAAS,IAAI;AAAA,IACnB;AACA,WAAO;AAAA,EACR;AAAA,EAEA,WAAW,KAAa,mBAAmB,OAAO;AACjD,QAAI,CAAC,KAAK,oBAAoB,kBAAkB;AAC/C,WAAK,KAAK,IAAI,GAAG,EAAE,OAAO;AAAA,IAC3B,OAAO;AAEN,iBAAW,KAAK,KAAK,aAAa;AACjC,aAAK,YAAY,CAAC,EAAE,SAAS,GAAG;AAAA,MACjC;AAGA,iBAAW,KAAK,KAAK,YAAY;AAChC,YAAI,KAAK,KAAK;AAAa;AAC3B,cAAM,OAAO,MAAM,SAAS,CAAC;AAC7B,YAAI;AAAM,eAAK,OAAO,KAAK,QAAQ,GAAG;AAAA,MACvC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,WAAW,WAA6B;AACvC,QAAI,aAAa,OAAO,KAAK,KAAK,WAAW;AAC7C,QAAI,CAAC,WAAW;AACf,aAAO,WAAW,KAAK,EAAE,IAAI,QAAM,iBAAM,WAAW,KAAK,YAAY,EAAE,EAAE,IAAI,CAAC,EAAE,KAAK,IAAI;AAAA,IAC1F;AACA,QAAI,KAAK,cAAc;AAAI,mBAAa,WAAW,QAAQ;AAC3D,QAAI,MAAM;AACV,eAAW,YAAY,YAAY;AAClC,aAAO,MAAM,KAAK,oBAAoB,WAAW,+BAA+B;AAChF,aAAO,GAAG,iBAAM,WAAW,KAAK,YAAY,QAAQ,EAAE,IAAI,MAAM,KAAK,YAAY,QAAQ,EAAE,KAAK;AAChG,aAAO;AAAA,IACR;AACA,WAAO;AACP,WAAO;AAAA,EACR;AAAA,EAEA,aAAa;AACZ,WAAO,IAAI,QAAc,aAAW;AACnC,UAAI,CAAC,KAAK;AAAU,eAAO,QAAQ;AAEnC,WAAK,QAAQ;AAOb,iBAAW,MAAM,QAAQ,GAAG,GAAG;AAAA,IAChC,CAAC;AAAA,EACF;AAAA,EAEA,SAAS,UAAoB;AAC5B,SAAK,KAAK,WAAW,EAAE,KAAK,MAAM;AACjC,UAAI,CAAC;AAAU,aAAK,aAAa;AAEjC,UAAI,KAAK;AAAO,qBAAa,KAAK,KAAK;AACvC,YAAM,SAAS,KAAK,YAAY,KAAK,eAAe;AAEpD,WAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,OAAO,cAAc;AAC/E,WAAK,QAAQ;AACb,UAAI,OAAO;AAAU,eAAO,WAAW;AACvC,aAAO,YAAY;AAEnB,WAAK,QAAQ,WAAW,MAAM;AAC7B,aAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,OAAO,2CAA2C;AAC5G,aAAK,UAAU,KAAK,eAAe;AAAA,MACpC,GAAG,KAAK,UAAU,GAAI;AAAA,IACvB,CAAC;AAAA,EACF;AAAA,EAEA,eAAe;AAEd,QAAI,CAAC,KAAK,iBAAiB;AAC1B,YAAM,WAAW,OAAO,KAAK,KAAK,WAAW;AAC7C,WAAK,kBAAkB,SAAS,KAAK,MAAM,KAAK,cAAc,KAAK,OAAO,CAAC,CAAC;AAAA,IAC7E;AAEA,SAAK,kBAAkB,KAAK,cAAc;AAAA,EAC3C;AAAA,EAEA,gBAAgB;AACf,UAAM,WAAW,OAAO,KAAK,KAAK,WAAW;AAE7C,QAAI,SAAa,SAAU,SAAS,QAAQ,KAAK,eAAe,IAAI,KAAK,SAAU;AAEnF,QAAI,CAAC,QAAQ;AACZ,eAAS,KAAK,KAAK,cAAc,IAAI,SAAS,CAAC,IAAI,SAAS,KAAK,cAAc,CAAC,CAAC;AAAA,IAClF;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO,QAAmB;AACzB,QAAI,KAAK,oBAAoB,OAAO,MAAM,KAAK,UAAU;AAAQ,aAAO;AACxE,QAAI,OAAO;AAAU,aAAO;AAE5B,SAAK,WAAW;AAEhB,SAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,OAAO,wBAAwB;AAEzF,UAAM,OAAO,KAAK,WAAW,QAAQ,CAAC;AACtC,WAAO,YAAY;AACnB,WAAO,WAAW,KAAK,CAAC,EAAE;AAAA,EAC3B;AAAA,EAEA,OAAO,QAAmB,UAAkB;AAC3C,QAAI,KAAK,oBAAoB,OAAO,MAAM,KAAK,UAAU;AAAQ,aAAO;AAExE,UAAM,OAAO,OAAO,QAAQ,QAAQ;AACpC,QAAI,CAAC;AAAM,aAAO;AAGlB,QAAI,CAAC,KAAK,SAAS;AAElB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,QAAI,OAAO,YAAY,OAAO,aAAa;AAAU,aAAO,qBAAqB,OAAO;AACxF,QACC,KAAK,UAAU,WACf,KAAK,WAAW,KAAK,QAAQ,gBAAgB,KAAK,QAAQ,UAC1D,KAAK,UAAU,KAAK,QAAQ,OAC3B;AACD,aAAO,6DAA6D,KAAK,QAAQ,eAAe,QAAQ,MAAM,KAAK,QAAQ,gBAAgB,KAAK,QAAQ,cAAc,KAAK,QAAQ,eAAe,KAAK,6BAA6B,KAAK,QAAQ;AAAA,IAClP;AACA,QAAI,KAAK,UAAU,QAAQ,CAAC,OAAO,gBAAgB,GAAG;AACrD,aAAO;AAAA,IACR;AAEA,QAAI,KAAK;AAAO,mBAAa,KAAK,KAAK;AAEvC,SAAK,WAAW;AAGhB,SAAK,UAAU;AACf,WAAO,WAAW,QAAQ;AAC1B,SAAK,SAAS,QAAQ,IAAI;AAG1B,QAAI,OAAO,KAAK,WAAW,GAAG;AAC7B,WAAK,WAAW,OAAO;AACvB,WAAK,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG,EAAE,SAAS;AAAA,IACvD;AAEA,WAAO,YAAY;AAEnB,SAAK,WAAW,QAAQ,iBAAM,WAAW,OAAO,IAAI,uDAAuD,WAAW,KAAK,KAAK,MAAM,KAAK,cAAc;AAGzJ,QAAI,CAAC,OAAO,KAAK,QAAQ;AACxB,WAAK,MAAM,MAAM;AACjB;AAAA,IACD;AAGA,SAAK,YAAY,KAAK,KAAK;AAC3B,QAAI,KAAK,UAAU;AAAQ,WAAK,SAAS;AAAA,EAC1C;AAAA,EAEA,YAAY,OAAe,YAAsB;AAChD,UAAM,eAAe;AAErB,YAAQ,OAAO;AAAA,MACf,KAAK;AACJ,aAAK,aAAa;AAClB,aAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,4CAA4C;AAE/F,YAAI,CAAC,cAAc,KAAK,gBAAgB;AAAG,eAAK,aAAa;AAC7D;AAAA,MACD,KAAK;AACJ,aAAK,aAAa;AAClB,aAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,YAAY,KAAK,eAAe,EAAE,+BAA+B;AAChI;AAAA,MACD,KAAK;AACJ,aAAK,aAAa;AAClB,aAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,YAAY,KAAK,eAAe,EAAE,uCAAuC;AACxI,aAAK,WAAW,KAAK,YAAY,KAAK,eAAe,GAAG,CAAC;AACzD;AAAA,MACD,KAAK;AACJ,aAAK,YAAY,KAAK,eAAe,EAAE,SAAS,YAAY;AAC5D,aAAK,QAAQ;AAEb,cAAM,OAAO,KAAK,cAAc;AAChC,aAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,YAAY,IAAI,EAAE,uCAAuC;AACxH,aAAK,WAAW,KAAK,YAAY,IAAI,GAAG,CAAC;AACzC,aAAK,aAAa;AAClB,aAAK,QAAQ,WAAW,MAAM;AAC7B,eAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,YAAY,KAAK,eAAe,EAAE,2CAA2C;AAC5I,eAAK,UAAU,KAAK,eAAe;AAAA,QACpC,GAAG,KAAK,UAAU,GAAI;AACtB;AAAA,MACD,KAAK;AACJ,aAAK,YAAY,KAAK,eAAe,EAAE,SAAS,YAAY;AAC5D,aAAK,QAAQ;AACb,aAAK,QAAQ,WAAW,MAAM;AAC7B,eAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,YAAY,KAAK,eAAe,EAAE,2CAA2C;AAC5I,eAAK,UAAU,KAAK,eAAe;AAAA,QACpC,GAAG,KAAK,UAAU,GAAI;AACtB;AAAA,IACD;AACA,QAAI;AAAY,WAAK,aAAa;AAAA,EACnC;AAAA,EAEA,cAAc,QAAmB,OAAc;AAC9C,QACC,CAAC,CAAC,OAAO,QAAQ,SAAS,QAAQ,EAAE,SAAS,KAAK,KAClD,OAAO,OAAO,KAAK,mBACnB,KAAK,UAAU,SACd;AACD,aAAO;AAAA,IACR;AACA,QAAI,CAAC,KAAK,SAAS;AAElB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,SAAK,QAAQ,eAAe;AAC5B,SAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,qCAAqC,QAAQ;AAChG,QAAI,KAAK;AAAO,mBAAa,KAAK,KAAK;AAGvC,WAAO,SAAS,yBAAyB;AACzC,WAAO,YAAY;AAEnB,QAAI,KAAK,YAAY;AACpB,WAAK,aAAa;AAClB,WAAK,aAAa;AAAA,IACnB;AAEA,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,WAAW,QAAmB,OAAe;AAC5C,QAAI,OAAO,UAAU;AAAU,cAAQ,SAAS,KAAK;AACrD,QAAI,CAAC,SAAS,MAAM,KAAK,KAAK,QAAQ;AAAG,cAAQ;AACjD,UAAM,aAAa,KAAK,SAAS,KAAK;AAEtC,WAAO,KAAK,KAAK,GAAG,UAAU;AAC9B,WAAO;AAAA,MACN,yCAAyC,KAAK,OAAO,UAAU,MAC5D,WAAW,IAAI,UAAQ,uBAAuB,WAAW,KAAK,KAAK,MAAM,KAAK,aAAa,EAAE,KAAK,IAAI;AAAA,IAC1G;AACA,WAAO;AAAA,EACR;AAAA,EAEA,SAAS,OAAe;AACvB,QAAI,OAAO,UAAU;AAAU,cAAQ,SAAS,KAAK;AACrD,QAAI,CAAC,SAAS,MAAM,KAAK,KAAK,QAAQ;AAAG,cAAQ;AACjD,UAAM,aAAqB,CAAC;AAE5B,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC/B,UAAI,CAAC,KAAK,KAAK,QAAQ;AAEtB,aAAK,OAAO,KAAK,SAAS,SAAS,iBAAM,QAAQ,KAAK,QAAQ,IAAI,iBAAM,QAAQ,WAAW,CAAC;AAC5F,aAAK,WAAW,CAAC;AAAA,MAClB;AACA,iBAAW,KAAK,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC,CAAC;AAC/C,WAAK,KAAK,IAAI;AAAA,IACf;AACA,WAAO;AAAA,EACR;AAAA,EAEA,MAAM,QAAmB,OAAW;AAEnC,QAAI,KAAK,UAAU,SAAS,OAAO,OAAO,KAAK;AAAU,aAAO;AAChE,SAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,gBAAgB,OAAO,kCAAkC;AAC5G,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,aAAa;AACZ,QAAI,KAAK,UAAU;AAElB,UAAI,KAAK,aAAa,KAAK,iBAAiB;AAC3C,aAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,YAAY,KAAK,QAAQ,EAAE,wDAAwD;AAClJ,aAAK,WAAW,KAAK,YAAY,KAAK,QAAQ,GAAG,CAAC;AAAA,MACnD;AACA,WAAK,WAAW;AAChB,WAAK,QAAQ;AAAA,IACd;AAAA,EACD;AAAA,EAEA,WAAW,MAAY;AACtB,QAAI,EAAE,KAAK,MAAM,KAAK,gBAAgB,KAAK,UAAU;AAAW,aAAO;AAEvE,SAAK,YAAY,KAAK,EAAE,EAAE,YAAY;AAAA,EACvC;AAAA,EAEA,MAAM,QAAmB;AACxB,SAAK;AAAA,MACJ,iBAAM,2DAA2D,OAAO;AAAA,MACxE;AAAA,IACD;AACA,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,UAAU;AACT,QAAI,KAAK;AAAO,mBAAa,KAAK,KAAK;AACvC,QAAI,KAAK;AAAgB,mBAAa,KAAK,cAAc;AACzD,SAAK,WAAW,oBAAoB,KAAK,oEAAoE,IAAI;AAGjH,eAAW,KAAK,KAAK,aAAa;AACjC,WAAK,YAAY,CAAC,EAAE,QAAQ;AAAA,IAC7B;AACA,SAAK,KAAK,OAAO;AAAA,EAClB;AACD;AAEA,MAAM,kBAAkB,MAAM,eAAoB;AAAA,EAIjD,YAAY,MAAY,MAAW;AAClC,UAAM,MAAM,IAAI;AAChB,SAAK,OAAO,CAAC;AACb,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,kBAAkB;AACjB,QAAI,CAAC,KAAK,KAAK,SAAS;AAEvB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,UAAM,QAAS,KAAK,KAAK,QAAQ,gBAAgB,KAAK,KAAK,QAAQ;AAEnE,QAAI,KAAK,KAAK,KAAK,OAAK,EAAE,UAAU,KAAK;AAAG,aAAO;AACnD,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ,UAAkB;AACzB,WAAO,KAAK,KAAK,KAAK,UAAQ,KAAK,SAAS,QAAQ;AAAA,EACrD;AAAA,EAEA,WAAW,UAAkB;AAC5B,eAAW,CAAC,GAAG,IAAI,KAAK,KAAK,KAAK,QAAQ,GAAG;AAC5C,UAAI,KAAK,SAAS,UAAU;AAC3B,aAAK,KAAK,OAAO,GAAG,CAAC;AACrB;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,YAAY;AACX,WAAO,iBAAM,OAAO,KAAK,MAAM,UAAQ,CAAC,KAAK,OAAO,KAAK,KAAK,CAAC,EAC7D,IAAI,CAAC,MAAM,MAAM,SAAS,MAAM,MAAM,KAAK,KAAK,SAAS,CAAC,CAAC;AAAA,EAC9D;AAAA,EAEA,cAAc;AACb,UAAM,OAAO,KAAK,UAAU,EAAE,KAAK,EAAE;AACrC,UAAM,UAAU,uBAAuB,KAAK,KAAK,8BAA8B,KAAK,KAAK,WAAW,IAAI;AACxG,UAAM,OAAO;AACb,UAAM,OAAO;AACb,UAAM,MAAM,2IAA2I,KAAK,KAAK,SAAS;AAE1K,QAAI,CAAC,KAAK,KAAK,SAAS;AAEvB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACnD;AACA,UAAM,MAAM,yCAAyC,WAAW,KAAK,KAAK,QAAQ,gBAAgB,KAAK,KAAK,QAAQ,KAAK,MAAM,KAAK,KAAK,QAAQ;AAGjJ,SAAK,SAAS,wBAAwB;AACtC,SAAK;AAAA,MACJ,uQAAuQ,kBAAkB,KAAK,KAAK,oBAAoB,KAAK,KAAK,kDAAkD,kBAAkB,+GACxR,kCAC1G,KAAK,KAAK,oBAAoB,KAAK,KAAK,mCAAmC,OAAO,aAAa,cAAc;AAAA,IACjH;AAAA,EACD;AACD;AAEO,MAAM,WAA8B;AAAA,EAC1C,KAAK;AAAA;AAAA,IAEJ,KAAK;AAAA,IACL,QAAQ,QAAQ,MAAM,MAAM;AAC3B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,kBAAkB,MAAM,IAAI;AAC1C,UAAI,KAAK,SAAS,aAAa;AAC9B,cAAM,IAAI,KAAK,aAAa,uCAAuC;AAAA,MACpE;AACA,WAAK,SAAS,cAAc;AAC5B,WAAK,aAAa;AAClB,aAAO,KAAK,UAAU,sCAAsC;AAAA,IAC7D;AAAA,IAEA,IAAI;AAAA,IACJ,OAAO,QAAQ,MAAM,MAAM;AAC1B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,kBAAkB,MAAM,IAAI;AAC1C,UAAI,CAAC,KAAK,SAAS,aAAa;AAC/B,cAAM,IAAI,KAAK,aAAa,sCAAsC;AAAA,MACnE;AACA,aAAO,KAAK,SAAS;AACrB,WAAK,aAAa;AAClB,aAAO,KAAK,UAAU,qCAAqC;AAAA,IAC5D;AAAA;AAAA,IAGA,KAAK;AAAA,IACL,MAAM;AAAA,IACN,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,aAAa;AAAA,IACb,OAAO,QAAQ,MAAM,MAAM,YAAY,KAAK;AAC3C,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,UAAI,KAAK,SAAS;AAAa,cAAM,IAAI,KAAK,aAAa,0CAA0C;AACrG,UAAI,KAAK;AAAM,cAAM,IAAI,KAAK,aAAa,mDAAmD;AAE9F,YAAM,mBAAmB,IAAI,SAAS,SAAS,KAAK,EAAE,IAAI,SAAS,QAAQ,KAAK,KAAK,WAAW;AAEhG,UAAI,MAAM,SAAS,MAAM;AACzB,UAAI,MAAM,GAAG;AAAG,cAAM;AACtB,UAAI,MAAM;AAAG,cAAM;AACnB,WAAK,OAAO,IAAI,IAAI,MAAM,KAAK,gBAAgB;AAC/C,WAAK,iBAAiB,gCAAgC,KAAK,OAAO;AAClE,WAAK,OAAO,YAAY;AAAA,IACzB;AAAA,IAEA,KAAK;AAAA,IACL,OAAO,QAAQ,MAAM,MAAM;AAC1B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,KAAK,UAAU,WAAW;AAC7B,cAAM,IAAI,KAAK,aAAa,uGAAuG;AAAA,MACpI;AACA,UAAI,MAAM,SAAS,MAAM;AACzB,UAAI,MAAM,GAAG,KAAK,MAAM,GAAG;AAC1B,cAAM;AAAA,MACP;AACA,WAAK,YAAY;AACjB,WAAK,iBAAiB,4BAA4B,KAAK,gBAAgB,KAAK,OAAO;AACnF,WAAK,OAAO,eAAe;AAAA,IAC5B;AAAA,IAEA,MAAM,QAAQ,MAAM,MAAM;AACzB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,KAAK,UAAU,WAAW;AAC7B,cAAM,IAAI,KAAK,aAAa,qDAAqD;AAAA,MAClF;AACA,WAAK,QAAQ;AACb,WAAK,iBAAiB,kCAAkC,KAAK,OAAO;AACpE,WAAK,OAAO,WAAW;AAAA,IACxB;AAAA,IAEA,MAAM;AAAA,IACN,IAAI,QAAQ,MAAM,MAAM;AACvB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,UAAI,CAAC,KAAK,QAAQ,KAAK,KAAK,WAAW,OAAO;AAC7C,cAAM,IAAI,KAAK,aAAa,6CAA6C;AAAA,MAC1E;AACA,WAAK,KAAK,QAAQ;AAClB,WAAK,IAAI,qCAAqC,EAAE,OAAO;AACvD,WAAK,iBAAiB,gCAAgC,KAAK,OAAO;AAClE,WAAK,OAAO,SAAS;AAAA,IACtB;AAAA,IAEA,QAAQ;AAAA,IACR,MAAM,QAAQ,MAAM,MAAM;AACzB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,YAAM,SAAS,SAAS,MAAM;AAC9B,UAAI,CAAC,UAAU,SAAS,KAAK,SAAS,KAAK;AAC1C,cAAM,IAAI,KAAK,aAAa,gDAAgD;AAAA,MAC7E;AAEA,WAAK,UAAU;AACf,UAAI,KAAK;AAAO,qBAAa,KAAK,KAAK;AACvC,WAAK,QAAQ,WAAW,MAAM;AAC7B,aAAK,UAAU,KAAK,eAAe;AAAA,MACpC,GAAG,SAAS,GAAI;AAChB,WAAK,aAAa,GAAG,KAAK,4DAA4D,iBAAiB;AACvG,WAAK,OAAO,aAAa,MAAM,GAAG,gBAAgB;AAAA,IACnD;AAAA,IAEA,UAAU,QAAQ,MAAM,MAAM;AAC7B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,KAAK,MAAM,MAAM,OAAO;AAC3B,YAAI,CAAC,KAAK;AAAgB,gBAAM,IAAI,KAAK,aAAa,yCAAyC;AAC/F,aAAK,aAAa,GAAG,KAAK,8CAA8C;AACxE,qBAAa,KAAK,cAAc;AAChC;AAAA,MACD;AACA,YAAM,SAAS,SAAS,MAAM;AAC9B,UAAI,CAAC,UAAU,SAAS,MAAM,SAAS,KAAK;AAC3C,cAAM,IAAI,KAAK,aAAa,yDAAyD;AAAA,MACtF;AACA,UAAI,KAAK,UAAU;AAAW,cAAM,IAAI,KAAK,aAAa,sCAAsC;AAChG,UAAI,KAAK;AAAgB,qBAAa,KAAK,cAAc;AACzD,WAAK,iBAAiB,WAAW,MAAM;AACtC,aAAK,QAAQ,IAAI;AAAA,MAClB,GAAG,SAAS,GAAI;AAChB,WAAK,aAAa,GAAG,KAAK,2CAA2C,iBAAiB;AAAA,IACvF;AAAA,IAEA,IAAI;AAAA,IACJ,WAAW,QAAQ,MAAM,MAAM;AAC9B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,YAAM,OAAO,KAAK,YAAY,GAAG;AAEjC,YAAM,eAAe,KAAK,UAAU,KAAK,MAAM,CAAC;AAChD,UAAI,iBAAiB;AAAO,cAAM,IAAI,KAAK,aAAa,wBAAwB,SAAS;AACzF,WAAK,iBAAiB,GAAG,KAAK,yBAAyB,iCAAiC;AACxF,WAAK,OAAO,UAAU,KAAK,MAAM,CAAC;AAClC,WAAK,IAAI,GAAG,uDAAuD,EAAE,OAAO;AAAA,IAC7E;AAAA;AAAA,IAGA,GAAG;AAAA,IACH,KAAK,QAAQ,MAAM,MAAM;AACxB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,WAAK,UAAU;AACf,UAAI,CAAC,KAAK,SAAS,IAAI;AAAG,cAAM,IAAI,KAAK,aAAa,0BAA0B;AAEhF,aAAO,KAAK,UAAU,kCAAkC;AAAA,IACzD;AAAA,IAEA,GAAG;AAAA,IACH,MAAM,QAAQ,MAAM,MAAM;AACzB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC,KAAK,UAAU,IAAI;AAAG,cAAM,IAAI,KAAK,aAAa,2BAA2B;AAClF,aAAO,KAAK,UAAU,gCAAgC;AAAA,IACvD;AAAA,IAEA,KAAK,QAAQ,MAAM,MAAM;AACxB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,uDAAuD;AAC9F,YAAM,SAAgC,KAAK,YAAY,KAAK,EAAE;AAC9D,UAAI,CAAC;AAAQ,cAAM,IAAI,KAAK,aAAa,iCAAiC;AAC1E,YAAM,QAAQ,KAAK,OAAO,QAAQ,MAAM;AACxC,UAAI,OAAO,UAAU;AAAU,cAAM,IAAI,KAAK,aAAa,KAAK;AAAA,IACjE;AAAA,IAEA,KAAK,QAAQ,MAAM,MAAM;AACxB,aAAO,KAAK,YAAY;AACxB,YAAM,OAAO,KAAK,QAAQ,GAAG;AAC7B,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,uDAAuD;AAC9F,YAAM,SAAgC,KAAK,YAAY,KAAK,EAAE;AAC9D,UAAI,CAAC;AAAQ,cAAM,IAAI,KAAK,aAAa,iCAAiC;AAC1E,YAAM,QAAQ,KAAK,OAAO,MAAM;AAChC,UAAI;AAAO,cAAM,IAAI,KAAK,aAAa,0CAA0C;AAAA,IAClF;AAAA,IAEA,KAAK,QAAQ,MAAM,MAAM;AACxB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,uDAAuD;AAC9F,UAAI,KAAK,oBAAoB,KAAK;AAAI,cAAM,IAAI,KAAK,aAAa,gCAAgC;AAClG,YAAM,SAAgC,KAAK,YAAY,KAAK,EAAE;AAC9D,UAAI,CAAC;AAAQ,cAAM,IAAI,KAAK,aAAa,iCAAiC;AAC1E,UAAI,CAAC,OAAO;AAAU,cAAM,IAAI,KAAK,aAAa,wCAAwC;AAC1F,UAAI,KAAK,UAAU;AAAS,cAAM,IAAI,KAAK,aAAa,2CAA2C;AAEnG,WAAK,WAAW,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,OAAO,KAAK,kBAAkB;AACjF,WAAK,SAAS;AAAA,IACf;AAAA,IAEA,MAAM,QAAQ,MAAM,MAAM;AACzB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,YAAM,SAAgC,KAAK,YAAY,KAAK,EAAE;AAC9D,UAAI,CAAC;AAAQ,cAAM,IAAI,KAAK,aAAa,iCAAiC;AAC1E,UAAI;AACJ,UAAI,WAAW,SAAS,WAAW,WAAW,WAAW,UAAU,WAAW,YAAY,WAAW,SAAS;AAC7G,gBAAQ;AAAA,MACT,OAAO;AACN,cAAM,IAAI,KAAK,aAAa,IAAI,+BAA+B;AAAA,MAChE;AACA,WAAK,cAAc,QAAQ,KAAK;AAAA,IACjC;AAAA,IAEA,IAAI,QAAQ,MAAM,MAAM;AACvB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,YAAM,SAAgC,KAAK,YAAY,KAAK,EAAE;AAC9D,UAAI,CAAC;AAAQ,cAAM,IAAI,KAAK,aAAa,iCAAiC;AAC1E,WAAK,MAAM,QAAQ,KAAK,MAAM,CAAC;AAAA,IAChC;AAAA;AAAA,IAGA,IAAI;AAAA,IACJ,KAAK,QAAQ,MAAM,MAAM;AACxB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,WAAK,WAAW,IAAI;AAAA,IACrB;AAAA,IAEA,KAAK;AAAA,IACL,MAAM,QAAQ,MAAM,MAAM;AACzB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC,KAAK,aAAa;AAAG,eAAO;AACjC,YAAM,UAAU,oBAAoB,KAAK,6BAA6B,KAAK,WAAW,IAAI;AAC1F,WAAK,aAAa,6GAA6G,iCAAiC;AAAA,IACjK;AAAA,IAEA,SAAS;AAAA,IACT,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,SAAS,QAAQ,MAAM,MAAM;AAC5B,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC,KAAK,aAAa;AAAG,eAAO;AACjC,WAAK,aAAa,oBAAoB,KAAK,yBAAyB,KAAK,WAAW,GAAG;AAAA,IACxF;AAAA,IAEA,KAAK,QAAQ,MAAM,MAAM;AACxB,WAAK,MAAM,WAAW;AAAA,IACvB;AAAA;AAAA,IAGA,SAAS,QAAQ,MAAM,MAAM;AAC5B,aAAO,KAAK,YAAY;AACxB,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,WAAK,SAAS,YAAY,MAAM,IAAI;AAEpC,eAAS,KAAK,MAAM;AACpB,YAAM,QAAQ,WAAW,OAAO,OAAO,WAAW,QAAQ,QAAQ;AAElE,UAAI,UAAU,QAAW;AACxB,eAAO,KAAK,UAAU,iDAAiD,KAAK,mBAAmB,OAAO,QAAQ;AAAA,MAC/G;AACA,UAAI,UAAU,KAAK,kBAAkB;AACpC,cAAM,IAAI,KAAK,aAAa,+CAA+C,KAAK,mBAAmB,OAAO,QAAQ;AAAA,MACnH;AAEA,WAAK,mBAAmB;AAExB,WAAK,aAAa,GAAG,KAAK,mBAAmB,QAAQ,OAAO,yCAAyC;AACrG,WAAK,OAAO,eAAe,MAAO,QAAQ,OAAO,KAAM;AAAA,IACxD;AAAA,IAEA,SAAS,QAAQ,MAAM,MAAM;AAC5B,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,uDAAuD;AAE9F,UAAI,CAAC,KAAK;AAAkB,cAAM,IAAI,KAAK,aAAa,mDAAmD;AAC3G,UAAI,KAAK,MAAM,KAAK;AAAY,cAAM,IAAI,KAAK,aAAa,uCAAuC;AAEnG,WAAK,WAAW,KAAK,EAAE,IAAI;AAC3B,WAAK,UAAU,+CAA+C;AAAA,IAC/D;AAAA,IAEA,WAAW,QAAQ,MAAM,MAAM;AAC9B,YAAM,OAAO,KAAK,YAAY,GAAG;AACjC,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,uDAAuD;AAE9F,UAAI,CAAC,KAAK;AAAkB,cAAM,IAAI,KAAK,aAAa,mDAAmD;AAC3G,UAAI,EAAE,KAAK,MAAM,KAAK;AAAa,cAAM,IAAI,KAAK,aAAa,6CAA6C;AAE5G,aAAO,KAAK,WAAW,KAAK,EAAE;AAC9B,WAAK,UAAU,qDAAqD;AAAA,IACrE;AAAA,EACD;AAAA,EAEA,SAAS;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;AAEO,MAAM,eAAqC,WAAS;AAAA,EAC1D,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,SAAS;AAAA,IACR,CAAC,YAAY,KAAK,SAAS,eAAe,aAAa;AAAA,IACvD,CAAC,WAAW,CAAC,KAAK,SAAS,eAAe,YAAY;AAAA,EACvD;AACD;",
  "names": []
}
