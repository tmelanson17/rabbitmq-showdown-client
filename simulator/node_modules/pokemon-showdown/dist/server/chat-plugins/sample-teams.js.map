{
  "version": 3,
  "sources": ["../../../server/chat-plugins/sample-teams.ts"],
  "sourcesContent": ["/**\n * A sample teams plugin\n *\n * @author Kris\n */\n\nimport {FS, Utils} from \"../../lib\";\n\nconst SAMPLE_TEAMS = 'config/chat-plugins/sample-teams.json';\n\ninterface SampleTeamsData {\n\twhitelist: {[formatid: string]: RoomID[]};\n\t/** Teams are stored in the packed format */\n\tteams: {\n\t\t[formatid: string]: {\n\t\t\tuncategorized: {[k: string]: string},\n\t\t\t[category: string]: {[teamName: string]: string},\n\t\t},\n\t};\n}\n\nexport const teamData: SampleTeamsData = (() => {\n\ttry {\n\t\treturn JSON.parse(FS(SAMPLE_TEAMS).readIfExistsSync());\n\t} catch {\n\t\treturn {\n\t\t\twhitelist: {},\n\t\t\tteams: {},\n\t\t};\n\t}\n})();\n\nfunction save() {\n\tFS(SAMPLE_TEAMS).writeUpdate(() => JSON.stringify(teamData));\n}\n\nfor (const formatid in teamData.teams) {\n\tif (!teamData.teams[formatid].uncategorized) teamData.teams[formatid].uncategorized = {};\n}\nsave();\n\nexport const SampleTeams = new class SampleTeams {\n\tprivate isRoomStaff(user: User, roomids: RoomID[]) {\n\t\tlet matched = false;\n\t\tif (!roomids?.length) return false;\n\t\tfor (const roomid of roomids) {\n\t\t\tconst room = Rooms.search(roomid);\n\t\t\t// Malformed entry from botched room rename\n\t\t\tif (!room) continue;\n\t\t\tmatched = room.auth.isStaff(user.id);\n\t\t\tif (matched) break;\n\t\t}\n\t\treturn matched;\n\t}\n\n\tisDevMod(user: User) {\n\t\treturn !!Rooms.get('development')?.auth.atLeast(user, '@');\n\t}\n\n\tcheckPermissions(user: User, roomids: RoomID[]) {\n\t\t// Give Development room mods access to help fix crashes\n\t\treturn this.isRoomStaff(user, roomids) || user.can('bypassall') || this.isDevMod(user);\n\t}\n\n\twhitelistedRooms(formatid: string, names = false) {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tif (!teamData.whitelist[formatid]?.length) return null;\n\t\treturn Utils.sortBy(teamData.whitelist[formatid], (x) => {\n\t\t\tif (!names) return x;\n\t\t\tconst room = Rooms.search(x);\n\t\t\tif (!room) return x;\n\t\t\treturn room.title;\n\t\t});\n\t}\n\n\twhitelistRooms(formatids: string[], roomids: string[]) {\n\t\tfor (const unsanitizedFormatid of formatids) {\n\t\t\tconst formatid = this.sanitizeFormat(unsanitizedFormatid);\n\t\t\tif (!teamData.whitelist[formatid]) teamData.whitelist[formatid] = [];\n\t\t\tfor (const roomid of roomids) {\n\t\t\t\tconst targetRoom = Rooms.search(roomid);\n\t\t\t\tif (!targetRoom?.persist) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Room ${roomid} not found. Check spelling?`);\n\t\t\t\t}\n\t\t\t\tif (teamData.whitelist[formatid].includes(targetRoom.roomid)) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Room ${targetRoom.title} is already added.`);\n\t\t\t\t}\n\t\t\t\tteamData.whitelist[formatid].push(targetRoom.roomid);\n\t\t\t\tsave();\n\t\t\t}\n\t\t}\n\t}\n\n\tunwhitelistRoom(formatid: string, roomid: string) {\n\t\tformatid = this.sanitizeFormat(formatid, false);\n\t\tconst targetRoom = Rooms.search(roomid);\n\t\tif (!targetRoom?.persist) throw new Chat.ErrorMessage(`Room ${roomid} not found. Check spelling?`);\n\t\tif (!teamData.whitelist[formatid]?.length) throw new Chat.ErrorMessage(`No rooms are whitelisted for ${formatid}.`);\n\t\tif (!teamData.whitelist[formatid].includes(targetRoom.roomid)) {\n\t\t\tthrow new Chat.ErrorMessage(`Room ${targetRoom.title} isn't whitelisted.`);\n\t\t}\n\t\tconst index = teamData.whitelist[formatid].indexOf(targetRoom.roomid);\n\t\tteamData.whitelist[formatid].splice(index, 1);\n\t\tif (!teamData.whitelist[formatid].length) delete teamData.whitelist[formatid];\n\t\tsave();\n\t}\n\n\tsanitizeFormat(formatid: string, checkExists = false) {\n\t\tconst format = Dex.formats.get(formatid);\n\t\tif (checkExists && !format.exists) {\n\t\t\tthrow new Chat.ErrorMessage(`Format \"${formatid.trim()}\" not found. Check spelling?`);\n\t\t}\n\t\tif (format.team) {\n\t\t\tthrow new Chat.ErrorMessage(`Formats with computer-generated teams can't have team storage.`);\n\t\t}\n\t\treturn format.id;\n\t}\n\n\tinitializeFormat(formatid: string) {\n\t\tif (!teamData.teams[formatid]) {\n\t\t\tteamData.teams[formatid] = {uncategorized: {}};\n\t\t\tsave();\n\t\t}\n\t}\n\n\taddCategory(user: User, formatid: string, category: string) {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet rankNeeded = `a global administrator`;\n\t\t\tif (teamData.whitelist[formatid]) {\n\t\t\t\trankNeeded = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${rankNeeded} to add teams for ${formatid}`);\n\t\t}\n\t\tcategory = category.trim();\n\t\tthis.initializeFormat(formatid);\n\t\tif (this.findCategory(formatid, category)) {\n\t\t\tthrow new Chat.ErrorMessage(`The category named ${category} already exists.`);\n\t\t}\n\t\tteamData.teams[formatid][category] = {};\n\t\tsave();\n\t}\n\n\tremoveCategory(user: User, formatid: string, category: string) {\n\t\tformatid = this.sanitizeFormat(formatid, false);\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet rankNeeded = `a global administrator`;\n\t\t\tif (teamData.whitelist[formatid]) {\n\t\t\t\trankNeeded = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${rankNeeded} to add teams for ${formatid}`);\n\t\t}\n\t\tconst categoryName = this.findCategory(formatid, category);\n\t\tif (!categoryName) {\n\t\t\tthrow new Chat.ErrorMessage(`There's no category named \"${category.trim()}\" for the format ${formatid}.`);\n\t\t}\n\t\tdelete teamData.teams[formatid][categoryName];\n\t\tsave();\n\t}\n\n\t/**\n\t * @param user\n\t * @param formatid\n\t * @param teamName\n\t * @param team - Can be a team in the packed, JSON, or exported format\n\t * @param category - Category the team will go in, defaults to uncategorized\n\t */\n\taddTeam(user: User, formatid: string, teamName: string, team: string, category = \"uncategorized\") {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet rankNeeded = `a global administrator`;\n\t\t\tif (teamData.whitelist[formatid]?.length) {\n\t\t\t\trankNeeded = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${rankNeeded} to add teams for ${formatid}`);\n\t\t}\n\t\tteamName = teamName.trim();\n\t\tcategory = category.trim();\n\t\tthis.initializeFormat(formatid);\n\t\tif (this.findTeamName(formatid, category, teamName)) {\n\t\t\tthrow new Chat.ErrorMessage(`There is already a team for ${formatid} with the name ${teamName} in the ${category} category.`);\n\t\t}\n\t\tif (!teamData.teams[formatid][category]) this.addCategory(user, formatid, category);\n\t\tteamData.teams[formatid][category][teamName] = Teams.pack(Teams.import(team.trim()));\n\t\tsave();\n\t\treturn teamData.teams[formatid][category][teamName];\n\t}\n\n\tremoveTeam(user: User, formatid: string, teamid: string, category: string) {\n\t\tformatid = this.sanitizeFormat(formatid, false);\n\t\tcategory = category.trim();\n\t\tif (!this.checkPermissions(user, teamData.whitelist[formatid])) {\n\t\t\tlet required = `an administrator`;\n\t\t\tif (teamData.whitelist[formatid]) {\n\t\t\t\trequired = `staff in ${Chat.toListString(teamData.whitelist[formatid], \"or\")}`;\n\t\t\t}\n\t\t\tthrow new Chat.ErrorMessage(`Access denied. You need to be ${required} to add teams for ${formatid}`);\n\t\t}\n\t\tconst categoryName = this.findCategory(formatid, category);\n\t\tif (!categoryName) {\n\t\t\tthrow new Chat.ErrorMessage(`There are no teams for ${formatid} under the category ${category.trim()}. Check spelling?`);\n\t\t}\n\t\tconst teamName = this.findTeamName(formatid, category, teamid);\n\t\tif (!teamName) {\n\t\t\tthrow new Chat.ErrorMessage(`There is no team for ${formatid} with the name of \"${teamid}\". Check spelling?`);\n\t\t}\n\t\tconst oldTeam = teamData.teams[formatid][categoryName][teamName];\n\t\tdelete teamData.teams[formatid][categoryName][teamName];\n\t\tif (!Object.keys(teamData.teams[formatid][categoryName]).length) delete teamData.teams[formatid][categoryName];\n\t\tif (!Object.keys(teamData.teams[formatid]).filter(x => x !== 'uncategorized').length) delete teamData.teams[formatid];\n\t\tsave();\n\t\treturn oldTeam;\n\t}\n\n\tformatTeam(teamName: string, teamStr: string, broadcasting = false) {\n\t\tconst team = Teams.unpack(teamStr);\n\t\tif (!team) return `Team is not correctly formatted. PM room staff to fix the formatting.`;\n\t\tlet buf = ``;\n\t\tif (!broadcasting) {\n\t\t\tbuf += `<center><strong style=\"letter-spacing:1.2pt\">${team.map(x => `<psicon pokemon=\"${x.species}\" />`).join('')}`;\n\t\t\tbuf += `<br />${Utils.escapeHTML(teamName.toUpperCase())}</strong></center>`;\n\t\t\tbuf += Chat.getReadmoreCodeBlock(Teams.export(team).trim());\n\t\t} else {\n\t\t\tbuf += `<details><summary>${team.map(x => `<psicon pokemon=\"${x.species}\" />`).join('')} &ndash; ${Utils.escapeHTML(teamName)}</summary>`;\n\t\t\tbuf += `<code style=\"white-space: pre-wrap; display: table; tab-size: 3\">${Teams.export(team).trim().replace(/\\n/g, '<br />')}</code></details>`;\n\t\t}\n\t\treturn buf;\n\t}\n\n\tmodlog(context: Chat.CommandContext, formatid: string, action: string, note: string, log: string) {\n\t\tformatid = this.sanitizeFormat(formatid);\n\t\tconst whitelistedRooms = this.whitelistedRooms(formatid);\n\t\tif (whitelistedRooms?.length) {\n\t\t\tfor (const roomid of whitelistedRooms) {\n\t\t\t\tconst room = Rooms.get(roomid);\n\t\t\t\tif (!room) continue;\n\t\t\t\tcontext.room = room;\n\t\t\t\tcontext.modlog(action, null, `${formatid}: ${note}`);\n\t\t\t\tcontext.privateModAction(log);\n\t\t\t}\n\t\t} else {\n\t\t\tcontext.room = Rooms.get('staff') || null;\n\t\t\tcontext.globalModlog(action, null, `${formatid}: ${note}`);\n\t\t\tcontext.privateGlobalModAction(log);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the category name of the provided category ID if there is one.\n\t */\n\tfindCategory(formatid: string, categoryid: string) {\n\t\tformatid = toID(formatid);\n\t\tcategoryid = toID(categoryid);\n\t\tlet match: string | null = null;\n\t\tfor (const categoryName in teamData.teams[formatid] || {}) {\n\t\t\tif (toID(categoryName) === categoryid) {\n\t\t\t\tmatch = categoryName;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tfindTeamName(formatid: string, categoryid: string, teamid: string) {\n\t\tconst categoryName = this.findCategory(formatid, categoryid);\n\t\tif (!categoryName) return null;\n\t\tlet match: string | null = null;\n\t\tfor (const teamName in teamData.teams[formatid][categoryName] || {}) {\n\t\t\tif (toID(teamName) === teamid) {\n\t\t\t\tmatch = teamName;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tgetFormatName(formatid: string) {\n\t\treturn Dex.formats.get(formatid).exists ? Dex.formats.get(formatid).name : formatid;\n\t}\n\n\tdestroy() {\n\t\tfor (const formatid in teamData.whitelist) {\n\t\t\tfor (const [i, roomid] of teamData.whitelist[formatid].entries()) {\n\t\t\t\tconst room = Rooms.search(roomid);\n\t\t\t\tif (room) continue;\n\t\t\t\tteamData.whitelist[formatid].splice(i, 1);\n\t\t\t\tif (!teamData.whitelist[formatid].length) delete teamData.whitelist[formatid];\n\t\t\t\tsave();\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport const destroy = SampleTeams.destroy;\n\nexport const handlers: Chat.Handlers = {\n\tonRenameRoom(oldID, newID) {\n\t\tfor (const formatid in teamData.whitelist) {\n\t\t\tif (!SampleTeams.whitelistedRooms(formatid)?.includes(oldID)) continue;\n\t\t\tSampleTeams.unwhitelistRoom(formatid, oldID);\n\t\t\tSampleTeams.whitelistRooms([formatid], [newID]);\n\t\t}\n\t},\n};\n\nexport const commands: Chat.ChatCommands = {\n\tsampleteams: {\n\t\t''(target, room, user) {\n\t\t\tthis.runBroadcast();\n\t\t\tlet [formatid, category] = target.split(',');\n\t\t\tif (!this.broadcasting) {\n\t\t\t\tif (!formatid) return this.parse(`/j view-sampleteams-view`);\n\t\t\t\tformatid = SampleTeams.sanitizeFormat(formatid);\n\t\t\t\tif (!category) return this.parse(`/j view-sampleteams-view-${formatid}`);\n\t\t\t\tconst categoryName = SampleTeams.findCategory(formatid, category);\n\t\t\t\treturn this.parse(`/j view-sampleteams-view-${formatid}${categoryName ? '-' + toID(categoryName) : ''}`);\n\t\t\t}\n\t\t\tif (!formatid) return this.parse(`/help sampleteams`);\n\t\t\tformatid = SampleTeams.sanitizeFormat(formatid);\n\t\t\tif (!teamData.teams[formatid]) {\n\t\t\t\tthrow new Chat.ErrorMessage(`No teams for ${SampleTeams.getFormatName(formatid)} found. Check spelling?`);\n\t\t\t}\n\t\t\tlet buf = ``;\n\t\t\tif (!category) {\n\t\t\t\tfor (const categoryName in teamData.teams[formatid]) {\n\t\t\t\t\tif (!Object.keys(teamData.teams[formatid][categoryName]).length) continue;\n\t\t\t\t\tif (buf) buf += `<hr />`;\n\t\t\t\t\tbuf += `<details${Object.keys(teamData.teams[formatid]).length < 2 ? ` open` : ``}><summary><strong style=\"letter-spacing:1.2pt\">${categoryName.toUpperCase()}</strong></summary>`;\n\t\t\t\t\tfor (const [i, teamName] of Object.keys(teamData.teams[formatid][categoryName]).entries()) {\n\t\t\t\t\t\tif (i) buf += `<hr />`;\n\t\t\t\t\t\tbuf += SampleTeams.formatTeam(teamName, teamData.teams[formatid][categoryName][teamName], true);\n\t\t\t\t\t}\n\t\t\t\t\tbuf += `</details>`;\n\t\t\t\t}\n\t\t\t\tif (!buf) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`No teams for ${SampleTeams.getFormatName(formatid)} found. Check spelling?`);\n\t\t\t\t} else {\n\t\t\t\t\tbuf = `<center><h3>Sample Teams for ${SampleTeams.getFormatName(formatid)}</h3></center><hr />${buf}`;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst categoryName = SampleTeams.findCategory(formatid, category);\n\t\t\t\tif (!categoryName) {\n\t\t\t\t\tthrow new Chat.ErrorMessage(`No teams for ${SampleTeams.getFormatName(formatid)} in the ${category} category found. Check spelling?`);\n\t\t\t\t}\n\t\t\t\tfor (const teamName in teamData.teams[formatid][categoryName]) {\n\t\t\t\t\tbuf += SampleTeams.formatTeam(teamName, teamData.teams[formatid][categoryName][teamName], true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.sendReplyBox(buf);\n\t\t},\n\t\taddcategory(target, room, user) {\n\t\t\tlet [formatid, categoryName] = target.split(',');\n\t\t\tif (!(formatid && categoryName)) return this.parse(`/help sampleteams`);\n\t\t\tif (!categoryName.trim()) categoryName = \"uncategorized\";\n\t\t\tSampleTeams.addCategory(user, formatid, categoryName.trim());\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'ADDTEAMCATEGORY', categoryName.trim(),\n\t\t\t\t`${user.name} added ${categoryName.trim()} as a category for ${formatid}.`\n\t\t\t);\n\t\t\tthis.sendReply(`Added ${categoryName.trim()} as a category for ${formatid}.`);\n\t\t},\n\t\tremovecategory(target, room, user) {\n\t\t\tconst [formatid, categoryName] = target.split(',');\n\t\t\tif (!(formatid && categoryName)) return this.parse(`/help sampleteams`);\n\t\t\tif (toID(categoryName) === 'uncategorized') {\n\t\t\t\tthrow new Chat.ErrorMessage(`The uncategorized category cannot be removed.`);\n\t\t\t}\n\t\t\tSampleTeams.removeCategory(user, formatid, categoryName);\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'REMOVETEAMCATEGORY', categoryName.trim(),\n\t\t\t\t`${user.name} removed ${categoryName.trim()} as a category for ${formatid}.`\n\t\t\t);\n\t\t\tthis.sendReply(`Removed ${categoryName.trim()} as a category for ${formatid}.`);\n\t\t},\n\t\tadd(target, room, user) {\n\t\t\tconst [formatid, category, teamName, team] = target.split(',');\n\t\t\tif (!(formatid && category?.trim() && teamName && team)) return this.parse('/j view-sampleteams-add');\n\t\t\tconst packedTeam = SampleTeams.addTeam(user, formatid, teamName, team, category);\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'ADDTEAM', `${category}: ${teamName}: ${packedTeam}`,\n\t\t\t\t`${user.name} added a team for ${formatid} in the ${category} category.`\n\t\t\t);\n\t\t\tthis.sendReply(`Added a team for ${formatid} in the ${category} category.`);\n\t\t},\n\t\tremove(target, room, user) {\n\t\t\tconst [formatid, category, teamName] = target.split(',').map(x => x.trim());\n\t\t\tif (!(formatid && category && teamName)) return this.parse(`/help sampleteams`);\n\t\t\tconst team = SampleTeams.removeTeam(user, formatid, toID(teamName), category);\n\t\t\tSampleTeams.modlog(\n\t\t\t\tthis, formatid, 'REMOVETEAM', `${category}: ${teamName}: ${team}`,\n\t\t\t\t`${user.name} removed a team from ${formatid} in the ${category} category.`\n\t\t\t);\n\t\t\tthis.sendReply(`Removed a team from ${formatid} in the ${category} category.`);\n\t\t},\n\t\twhitelist: {\n\t\t\tadd(target, room, user) {\n\t\t\t\t// Allow development roommods to whitelist to help debug\n\t\t\t\tif (!SampleTeams.isDevMod(user)) {\n\t\t\t\t\tthis.checkCan('bypassall');\n\t\t\t\t}\n\t\t\t\tconst [formatids, roomids] = target.split('|').map(x => x.split(','));\n\t\t\t\tif (!(formatids?.length && roomids?.length)) return this.parse(`/help sampleteams`);\n\t\t\t\tSampleTeams.whitelistRooms(formatids, roomids);\n\t\t\t\tthis.privateGlobalModAction(`${user.name} whitelisted ${Chat.toListString(roomids.map(x => Rooms.search(x)!.title))} to handle sample teams for ${Chat.toListString(formatids)}.`);\n\t\t\t\tthis.globalModlog(`SAMPLETEAMS WHITELIST`, null, roomids.join(', '));\n\t\t\t\tthis.sendReply(`Whitelisted ${Chat.toListString(roomids)} to handle sample teams for ${Chat.toListString(formatids)}.`);\n\t\t\t},\n\t\t\tremove(target, room, user) {\n\t\t\t\t// Allow development roommods to whitelist to help debug\n\t\t\t\tif (!SampleTeams.isDevMod(user)) {\n\t\t\t\t\tthis.checkCan('bypassall');\n\t\t\t\t}\n\t\t\t\tconst [formatid, roomid] = target.split(',');\n\t\t\t\tif (!(formatid && roomid)) return this.parse(`/help sampleteams`);\n\t\t\t\tSampleTeams.unwhitelistRoom(formatid, roomid);\n\t\t\t\tthis.refreshPage('sampleteams-whitelist');\n\t\t\t},\n\t\t\t'': 'view',\n\t\t\tview(target, room, user) {\n\t\t\t\t// Allow development roommods to whitelist to help debug\n\t\t\t\tif (!SampleTeams.isDevMod(user)) {\n\t\t\t\t\tthis.checkCan('bypassall');\n\t\t\t\t}\n\t\t\t\tthis.parse(`/j view-sampleteams-whitelist`);\n\t\t\t},\n\t\t},\n\t},\n\tsampleteamshelp: [\n\t\t`/sampleteams [format] - Lists the sample teams for [format], if there are any.`,\n\t\t`/sampleteams addcategory/removecategory [format], [category] - Adds/removes categories for [format].`,\n\t\t`/sampleteams add - Pulls up the interface to add sample teams. Requires: Room staff in dedicated tier room, &`,\n\t\t`/sampleteams remove [format], [category], [team name] - Removes a sample team for [format] in [category].`,\n\t\t`/sampleteams whitelist add [formatid], [formatid] | [roomid], [roomid], ... - Whitelists room staff for the provided roomids to add sample teams. Requires: &`,\n\t\t`/sampleteams whitelist remove [formatid], [roomid] - Unwhitelists room staff for the provided room to add sample teams. Requires: &`,\n\t],\n};\n\nfunction formatFakeButton(url: string, text: string) {\n\treturn `<a class=\"button\" style=\"text-decoration:inherit\" target=\"replace\" href=\"${url}\">${text}</a>`;\n}\n\nexport const pages: Chat.PageTable = {\n\tsampleteams: {\n\t\twhitelist(query, user, connection) {\n\t\t\tthis.title = `Sample Teams Whitelist`;\n\t\t\tif (!(SampleTeams.isDevMod(user) || user.can('bypassall'))) {\n\t\t\t\treturn `<div class=\"pad\"><h2>Access denied.</h2></div>`;\n\t\t\t}\n\t\t\tconst staffRoomAccess = Rooms.get('staff')?.checkModjoin(user);\n\t\t\tlet buf = `<div class=\"pad\"><button style=\"float:right\" class=\"button\" name=\"send\" value=\"/j view-sampleteams-whitelist${query.length ? `-${query.join('-')}` : ''}\"><i class=\"fa fa-refresh\"></i> Refresh</button><h2>Sample Teams Rooms Whitelist</h2>`;\n\t\t\tif ((!teamData.whitelist || !Object.keys(teamData.whitelist).length) && !query.length) {\n\t\t\t\tbuf += `<p>No rooms are whitelisted for any formats.</p>`;\n\t\t\t}\n\t\t\tif (query[0] === 'add') {\n\t\t\t\tbuf += `<form data-submitsend=\"${staffRoomAccess ? `/msgroom staff,` : SampleTeams.isDevMod(user) ? `/msgroom development,` : ``}/sampleteams whitelist add {formats}|{roomids}\">`;\n\t\t\t\tbuf += `<label>Enter a list formats, separated by comma: <input name=\"formats\" /></label><br /><br />`;\n\t\t\t\tbuf += `<label>Enter a list of rooms, separated by comma: <input name=\"roomids\" /></label><br />`;\n\t\t\t\tbuf += `<br /><button class=\"button\" type=\"submit\">Whitelist rooms</button></form>`;\n\t\t\t\tbuf += `<br />${formatFakeButton(\"view-sampleteams-whitelist\", \"Return to list\")}`;\n\t\t\t} else {\n\t\t\t\tbuf += `<dl>`;\n\t\t\t\tfor (const formatid of Object.keys(teamData.whitelist).sort().reverse()) {\n\t\t\t\t\tif (!teamData.whitelist[formatid]?.length) continue;\n\t\t\t\t\tbuf += `<dt>${SampleTeams.getFormatName(formatid)}</dt>`;\n\t\t\t\t\tfor (const roomid of teamData.whitelist[formatid]) {\n\t\t\t\t\t\tbuf += `<dd>${Rooms.get(roomid)?.title || roomid}`;\n\t\t\t\t\t\tbuf += ` <button class=\"button\" name=\"send\" value=\"/sampleteams whitelist remove ${formatid},${roomid}\">Remove</button></dd>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuf += `</dl>`;\n\t\t\t}\n\t\t\tbuf += `${query.length ? '' : formatFakeButton(\"view-sampleteams-whitelist-add\", \"Whitelist room\")}</div>`;\n\t\t\treturn buf;\n\t\t},\n\t\tview(query, user, connection) {\n\t\t\tthis.title = `Sample Teams`;\n\t\t\tlet buf = `<div class=\"pad\">`;\n\t\t\tif (query.slice(0, query.length - 1).join('-')) {\n\t\t\t\tbuf += `${formatFakeButton(`view-sampleteams-view-${query.slice(0, query.length - 1).join('-')}`, \"&laquo; Back\")}`;\n\t\t\t} else {\n\t\t\t\tbuf += `<button class=\"button disabled\" disabled>&laquo; Back</button>`;\n\t\t\t}\n\t\t\tbuf += `<button style=\"float:right\" class=\"button\" name=\"send\" value=\"/j view-sampleteams-view${query.join('-') ? `-${query.join('-')}` : ``}\"><i class=\"fa fa-refresh\"></i> Refresh</button>`;\n\t\t\tbuf += `<center><h2>Sample Teams</h2></center><hr />`;\n\t\t\tconst q0Teams = teamData.teams[query[0]];\n\t\t\tconst q0TeamKeys = q0Teams ? Object.keys(q0Teams) : [];\n\t\t\tif (!query[0]) {\n\t\t\t\tconst formats = Object.keys(teamData.teams);\n\t\t\t\tif (!formats.length) return `${buf}<p>No teams found.</p></div>`;\n\t\t\t\tbuf += `<h3>Pick a format</h3><ul>`;\n\t\t\t\tfor (const formatid of formats) {\n\t\t\t\t\tif (!formatid) continue;\n\t\t\t\t\tbuf += `<li>${formatFakeButton(`view-sampleteams-view-${formatid}`, `${SampleTeams.getFormatName(formatid)}`)}</button></li>`;\n\t\t\t\t}\n\t\t\t\tbuf += `</ul>`;\n\t\t\t} else if (!q0Teams || !q0TeamKeys.length ||\n\t\t\t\t(!Object.keys(q0Teams.uncategorized).length && !q0TeamKeys.filter(x => x !== 'uncategorized').length)) {\n\t\t\t\tconst name = Dex.formats.get(query[0]).exists ? Dex.formats.get(query[0]).name : query[0];\n\t\t\t\treturn `${buf}<p>No teams for ${name} were found.</p></div>`;\n\t\t\t} else if (!query[1] || (!SampleTeams.findCategory(query[0], query[1]) && query[1] !== 'allteams')) {\n\t\t\t\tbuf += `<h3>Pick a category</h3><ul>`;\n\t\t\t\tfor (const category of Object.keys(teamData.teams[query[0]])) {\n\t\t\t\t\tbuf += `<li><a class=\"button\" style=\"text-decoration:inherit;color:inherit\" target=\"replace\" href=\"view-sampleteams-view-${query[0]}-${toID(category)}\">${category}</button></li>`;\n\t\t\t\t}\n\t\t\t\tbuf += `<li><a class=\"button\" style=\"text-decoration:inherit;color:inherit\" target=\"replace\" href=\"view-sampleteams-view-${query[0]}-allteams\">ALL</button></li></ul>`;\n\t\t\t} else if (query[1] === 'allteams') {\n\t\t\t\tbuf += `<h3>All teams for ${SampleTeams.getFormatName(query[0])}</h3>`;\n\t\t\t\tfor (const categoryName in teamData.teams[query[0]]) {\n\t\t\t\t\tconst category = teamData.teams[query[0]][categoryName];\n\t\t\t\t\tif (!Object.keys(category).length) continue;\n\t\t\t\t\tbuf += `<details><summary><h4 style=\"display:inline\">${categoryName}</h4></summary>`;\n\t\t\t\t\tfor (const teamName in category) {\n\t\t\t\t\t\tconst team = category[teamName];\n\t\t\t\t\t\tif (SampleTeams.checkPermissions(user, teamData.whitelist[query[0]] || [])) {\n\t\t\t\t\t\t\tbuf += `<button class=\"button\" style=\"float:right\" name=\"send\" value=\"/sampleteams remove ${query[0]},${categoryName},${teamName}\">Delete team</button>`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuf += SampleTeams.formatTeam(teamName, team);\n\t\t\t\t\t}\n\t\t\t\t\tbuf += `</details>`;\n\t\t\t\t\tconst index = Object.keys(teamData.teams[query[0]]).indexOf(categoryName);\n\t\t\t\t\tif (index !== Object.keys(teamData.teams[query[0]]).length - 1) buf += `<hr />`;\n\t\t\t\t}\n\t\t\t} else if (SampleTeams.findCategory(query[0], query[1])) {\n\t\t\t\tconst categoryName = SampleTeams.findCategory(query[0], query[1])!;\n\t\t\t\tbuf += `<h3>Sample teams for ${SampleTeams.getFormatName(query[0])} in the ${categoryName} category</h3>`;\n\t\t\t\tfor (const teamName in teamData.teams[query[0]][categoryName]) {\n\t\t\t\t\tconst team = teamData.teams[query[0]][categoryName][teamName];\n\t\t\t\t\tbuf += SampleTeams.formatTeam(teamName, team);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf += `</div>`;\n\t\t\treturn buf;\n\t\t},\n\t\tadd(query, user, connection) {\n\t\t\tthis.title = `Sample Teams`;\n\t\t\tconst trimFormatName = (name: string) => (name.includes('(') ? name.slice(0, name.indexOf('(')) : name).trim();\n\t\t\tconst formatsSet = new Set(Dex.formats.all().map(format => trimFormatName(format.name)));\n\t\t\tconst formatsArr = Array.from(formatsSet);\n\t\t\tconst formats = formatsArr.map(formatName => Dex.formats.get(formatName))\n\t\t\t\t.filter(format => (\n\t\t\t\t\t!format.name.includes('Custom') && format.effectType === 'Format' &&\n\t\t\t\t\t!format.team && SampleTeams.checkPermissions(user, SampleTeams.whitelistedRooms(format.id) || [])\n\t\t\t\t));\n\t\t\tif (!formats.length) return `<div class=\"pad\"><h2>Access denied.</h2></div>`;\n\t\t\tlet buf = `<div class=\"pad\">`;\n\t\t\tif (query.slice(0, query.length - 1).join('-')) {\n\t\t\t\tbuf += `${formatFakeButton(`view-sampleteams-add-${query.slice(0, query.length - 1).join('-')}`, \"&laquo; Back\")}`;\n\t\t\t} else {\n\t\t\t\tbuf += `<button class=\"button disabled\" disabled>&laquo; Back</button>`;\n\t\t\t}\n\t\t\tlet buttonTitle = 'Refresh';\n\t\t\tif (query[2] === 'submit') buttonTitle = 'Add another team';\n\t\t\tbuf += `<button style=\"float:right\" class=\"button\" name=\"send\" value=\"/j view-sampleteams-add${query.join('-') ? `-${query.join('-')}` : ``}\"><i class=\"fa fa-refresh\"></i> ${buttonTitle}</button>`;\n\t\t\tbuf += `<div class=\"pad\"><h2>Add a sample team</h2>`;\n\t\t\tif (!query[0] || !Dex.formats.get(query[0]).exists) {\n\t\t\t\tbuf += `<h3>Pick a format</h3><ul>`;\n\t\t\t\tfor (const format of formats) {\n\t\t\t\t\tbuf += `<li>${formatFakeButton(`view-sampleteams-add-${format.id}`, format.name)}</button></li>`;\n\t\t\t\t}\n\t\t\t\tbuf += `</ul>`;\n\t\t\t} else if (!query[1] || !SampleTeams.findCategory(query[0], query[1]) || query[1] === 'addnewcategory') {\n\t\t\t\tconst name = SampleTeams.getFormatName(query[0]);\n\t\t\t\tif (query[1] === 'addnewcategory') {\n\t\t\t\t\tbuf += `<h3>Add a category for ${name}</h3>`;\n\t\t\t\t\tbuf += `<form data-submitsend=\"/sampleteams addcategory ${query[0]},{categoryname}\">`;\n\t\t\t\t\tbuf += `<input name=\"categoryname\" />`;\n\t\t\t\t\tbuf += `<button class=\"button\" type=\"submit\">Add category</button></form>`;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += `<h3>Pick a category for ${name}</h3><ul>`;\n\t\t\t\t\tfor (const category of Object.keys(teamData.teams[query[0]] || {}) || []) {\n\t\t\t\t\t\tbuf += `<li style=\"padding-top:5px\">${formatFakeButton(`view-sampleteams-add-${query[0]}-${toID(category)}-submit`, category)}</li>`;\n\t\t\t\t\t}\n\t\t\t\t\tbuf += `<li style=\"padding-top:5px\">${formatFakeButton(`view-sampleteams-add-${query[0]}-addnewcategory`, `<strong>Add new category</strong>`)}</li></ul>`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst categoryName = SampleTeams.findCategory(query[0], query[1]);\n\t\t\tif (categoryName) {\n\t\t\t\tbuf += `<form data-submitsend=\"/sampleteams add ${query[0]}, ${categoryName}, {teamName}, {team}\">`;\n\t\t\t\tbuf += `<h3>Enter a team name</h3><input name=\"teamName\" />`;\n\t\t\t\tbuf += `<h3>Enter team importable</h3><textarea style=\"width:100%;height:400px\" name=\"team\"></textarea><br />`;\n\t\t\t\tbuf += `<button class=\"button\" type=\"submit\">Add sample team</button></form>`;\n\t\t\t}\n\t\t\tbuf += `</div>`;\n\t\t\treturn buf;\n\t\t},\n\t},\n};\n\nChat.multiLinePattern.register(`/sampleteams add `);\n"],
  "mappings": "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",
  "names": ["SampleTeams"]
}
