{
  "version": 3,
  "sources": ["../../../../data/mods/gen1/random-teams.ts"],
  "sourcesContent": ["import RandomGen2Teams from '../gen2/random-teams';\nimport {Utils} from '../../../lib';\nimport {MoveCounter} from '../gen8/random-teams';\n\ninterface HackmonsCupEntry {\n\ttypes: string[];\n\tbaseStats: StatsTable;\n}\n\ninterface Gen1RandomBattleSpecies {\n\tlevel?: number;\n\tmoves?: ID[];\n\tessentialMove?: ID;\n\texclusiveMoves?: ID[];\n\tcomboMoves?: ID[];\n}\n\nexport class RandomGen1Teams extends RandomGen2Teams {\n\trandomData: {[species: string]: Gen1RandomBattleSpecies} = require('./random-data.json');\n\n\t// Challenge Cup or CC teams are basically fully random teams.\n\trandomCCTeam() {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst team = [];\n\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype);\n\n\t\tfor (const pokemon of randomN) {\n\t\t\tconst species = this.dex.species.get(pokemon);\n\t\t\tconst learnset = this.dex.species.getLearnset(species.id);\n\n\t\t\t// Level balance: calculate directly from stats rather than using some silly lookup table.\n\t\t\tconst mbstmin = 1307;\n\t\t\tconst stats = species.baseStats;\n\n\t\t\t// Modified base stat total assumes 15 DVs, 255 EVs in every stat\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 30 + 63 + 100) + 10;\n\t\t\tmbst += (stats[\"atk\"] * 2 + 30 + 63 + 100) + 5;\n\t\t\tmbst += (stats[\"def\"] * 2 + 30 + 63 + 100) + 5;\n\t\t\tmbst += (stats[\"spa\"] * 2 + 30 + 63 + 100) + 5;\n\t\t\tmbst += (stats[\"spd\"] * 2 + 30 + 63 + 100) + 5;\n\t\t\tmbst += (stats[\"spe\"] * 2 + 30 + 63 + 100) + 5;\n\n\t\t\tlet level;\n\t\t\tif (this.adjustLevel) {\n\t\t\t\tlevel = this.adjustLevel;\n\t\t\t} else {\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\n\n\t\t\t\twhile (level < 100) {\n\t\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 30 + 63 + 100) * level / 100 + 10);\n\t\t\t\t\t// Since damage is roughly proportional to lvl\n\t\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 30 + 63 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 30 + 63 + 100) * level / 100 + 5);\n\n\t\t\t\t\tif (mbst >= mbstmin) break;\n\t\t\t\t\tlevel++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random DVs.\n\t\t\tconst ivs = {\n\t\t\t\thp: 0,\n\t\t\t\tatk: this.random(16),\n\t\t\t\tdef: this.random(16),\n\t\t\t\tspa: this.random(16),\n\t\t\t\tspd: 0,\n\t\t\t\tspe: this.random(16),\n\t\t\t};\n\t\t\tivs[\"hp\"] = (ivs[\"atk\"] % 2) * 16 + (ivs[\"def\"] % 2) * 8 + (ivs[\"spe\"] % 2) * 4 + (ivs[\"spa\"] % 2) * 2;\n\t\t\tivs[\"atk\"] *= 2;\n\t\t\tivs[\"def\"] *= 2;\n\t\t\tivs[\"spa\"] *= 2;\n\t\t\tivs[\"spd\"] = ivs[\"spa\"];\n\t\t\tivs[\"spe\"] *= 2;\n\n\t\t\t// Maxed EVs.\n\t\t\tconst evs = {hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255};\n\n\t\t\t// Four random unique moves from movepool. don't worry about \"attacking\" or \"viable\".\n\t\t\t// Since Gens 1 and 2 learnsets are shared, we need to weed out Gen 2 moves.\n\t\t\tconst pool: string[] = [];\n\t\t\tif (learnset) {\n\t\t\t\tfor (const move in learnset) {\n\t\t\t\t\tif (this.dex.moves.get(move).gen !== 1) continue;\n\t\t\t\t\tif (learnset[move].some(learned => learned.startsWith('1'))) {\n\t\t\t\t\t\tpool.push(move);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tteam.push({\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tmoves: this.multipleSamplesNoReplace(pool, 4),\n\t\t\t\tgender: false,\n\t\t\t\tability: 'No Ability',\n\t\t\t\tevs: evs,\n\t\t\t\tivs: ivs,\n\t\t\t\titem: '',\n\t\t\t\tlevel,\n\t\t\t\thappiness: 0,\n\t\t\t\tshiny: false,\n\t\t\t\tnature: 'Serious',\n\t\t\t});\n\t\t}\n\n\t\treturn team;\n\t}\n\n\t// Random team generation for Gen 1 Random Battles.\n\trandomTeam() {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\t// Get what we need ready.\n\t\tconst seed = this.prng.seed;\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\n\t\tconst typePool = this.dex.types.names();\n\t\tconst type = this.forceMonotype || this.sample(typePool);\n\n\t\t/** Pok\u00E9mon that are not wholly incompatible with the team, but still pretty bad */\n\t\tconst rejectedButNotInvalidPool: string[] = [];\n\t\tconst nuTiers = ['UU', 'UUBL', 'NFE', 'LC', 'NU'];\n\t\tconst uuTiers = ['NFE', 'UU', 'UUBL', 'NU'];\n\n\t\t// Now let's store what we are getting.\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst weaknessCount: {[k: string]: number} = {Electric: 0, Psychic: 0, Water: 0, Ice: 0, Ground: 0, Fire: 0};\n\t\tlet uberCount = 0;\n\t\tlet nuCount = 0;\n\n\t\tconst pokemonPool = this.getPokemonPool(type, pokemon, isMonotype);\n\t\twhile (pokemonPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tconst species = this.dex.species.get(this.sampleNoReplace(pokemonPool));\n\t\t\tif (!species.exists || !this.randomData[species.id]?.moves) continue;\n\t\t\t// Only one Ditto is allowed per battle in Generation 1,\n\t\t\t// as it can cause an endless battle if two Dittos are forced\n\t\t\t// to face each other.\n\t\t\tif (species.id === 'ditto' && this.battleHasDitto) continue;\n\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\n\n\t\t\tconst tier = species.tier;\n\t\t\tswitch (tier) {\n\t\t\tcase 'LC':\n\t\t\tcase 'NFE':\n\t\t\t\t// Don't add pre-evo mon if already 4 or more non-OUs\n\t\t\t\t// Regardless, pre-evo mons are slightly less common.\n\t\t\t\tif (nuCount >= 4 * limitFactor || this.randomChance(1, 3)) continue;\n\t\t\t\tbreak;\n\t\t\tcase 'Uber':\n\t\t\t\t// Only allow a single Uber.\n\t\t\t\tif (uberCount >= 1 * limitFactor) continue;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// OUs are fine. Otherwise 50% chance to skip mon if already 4 or more non-OUs.\n\t\t\t\tif (uuTiers.includes(tier) && pokemonPool.length > 1 && (nuCount >= 4 * limitFactor && this.randomChance(1, 2))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet skip = false;\n\n\t\t\tif (!isMonotype && !this.forceMonotype) {\n\t\t\t\t// Limit 2 of any type as well. Diversity and minor weakness count.\n\t\t\t\t// The second of a same type has halved chance of being added.\n\t\t\t\tfor (const typeName of species.types) {\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor ||\n\t\t\t\t\t\t(typeCount[typeName] >= 1 * limitFactor && this.randomChance(1, 2) && pokemonPool.length > 1)) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (skip) {\n\t\t\t\t\trejectedButNotInvalidPool.push(species.id);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We need a weakness count of spammable attacks to avoid being swept by those.\n\t\t\t// Spammable attacks are: Thunderbolt, Psychic, Surf, Blizzard, Earthquake.\n\t\t\tconst pokemonWeaknesses = [];\n\t\t\tfor (const typeName in weaknessCount) {\n\t\t\t\tconst increaseCount = this.dex.getImmunity(typeName, species) && this.dex.getEffectiveness(typeName, species) > 0;\n\t\t\t\tif (!increaseCount) continue;\n\t\t\t\tif (weaknessCount[typeName] >= 2 * limitFactor) {\n\t\t\t\t\tskip = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpokemonWeaknesses.push(typeName);\n\t\t\t}\n\n\t\t\tif (skip) {\n\t\t\t\trejectedButNotInvalidPool.push(species.id);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// The set passes the limitations.\n\t\t\tpokemon.push(this.randomSet(species));\n\n\t\t\t// Now let's increase the counters.\n\t\t\t// Type counter.\n\t\t\tfor (const typeName of species.types) {\n\t\t\t\tif (typeCount[typeName]) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Weakness counter.\n\t\t\tfor (const weakness of pokemonWeaknesses) {\n\t\t\t\tweaknessCount[weakness]++;\n\t\t\t}\n\n\t\t\t// Increment tier bias counters.\n\t\t\tif (tier === 'Uber') {\n\t\t\t\tuberCount++;\n\t\t\t} else if (nuTiers.includes(tier)) {\n\t\t\t\tnuCount++;\n\t\t\t}\n\n\t\t\t// Ditto check\n\t\t\tif (species.id === 'ditto') this.battleHasDitto = true;\n\t\t}\n\n\t\t// if we don't have enough Pok\u00E9mon, go back to rejects, which are already known to not be invalid.\n\t\twhile (pokemon.length < this.maxTeamSize && rejectedButNotInvalidPool.length) {\n\t\t\tconst species = this.sampleNoReplace(rejectedButNotInvalidPool);\n\t\t\tpokemon.push(this.randomSet(species));\n\t\t}\n\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12 && !isMonotype) {\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\t\t}\n\n\t\treturn pokemon;\n\t}\n\n\tshouldCullMove(move: Move, types: Set<string>, moves: Set<string>, counter: MoveCounter): {cull: boolean} {\n\t\tswitch (move.id) {\n\t\t// bit redundant to have both, but neither particularly better than the other\n\t\tcase 'hydropump':\n\t\t\treturn {cull: moves.has('surf')};\n\t\tcase 'surf':\n\t\t\treturn {cull: moves.has('hydropump')};\n\n\t\t// other redundancies that aren't handled within the movesets themselves\n\t\tcase 'selfdestruct':\n\t\t\treturn {cull: moves.has('rest')};\n\t\tcase 'rest':\n\t\t\treturn {cull: moves.has('selfdestruct')};\n\t\tcase 'sharpen': case 'swordsdance':\n\t\t\treturn {cull: counter.get('Special') > counter.get('Physical') || !counter.get('Physical') || moves.has('growth')};\n\t\tcase 'growth':\n\t\t\treturn {cull: counter.get('Special') < counter.get('Physical') || !counter.get('Special') || moves.has('swordsdance')};\n\t\tcase 'poisonpowder': case 'stunspore': case 'sleeppowder': case 'toxic':\n\t\t\treturn {cull: counter.get('Status') > 1};\n\t\t}\n\t\treturn {cull: false};\n\t}\n\n\t/**\n\t * Random set generation for Gen 1 Random Battles.\n\t */\n\trandomSet(species: string | Species): RandomTeamsTypes.RandomSet {\n\t\tspecies = this.dex.species.get(species);\n\t\tif (!species.exists) species = this.dex.species.get('pikachu'); // Because Gen 1.\n\n\t\tconst data = this.randomData[species.id];\n\t\tconst movePool = data.moves?.slice() || [];\n\t\tconst moves = new Set<string>();\n\t\tconst types = new Set(species.types);\n\n\t\tconst counter = new MoveCounter();\n\n\t\t// Moves that boost Attack:\n\t\tconst PhysicalSetup = ['swordsdance', 'sharpen'];\n\t\t// Moves which boost Special Attack:\n\t\tconst SpecialSetup = ['amnesia', 'growth'];\n\n\t\t// Either add all moves or add none\n\t\tif (data.comboMoves && data.comboMoves.length <= this.maxMoveCount && this.randomChance(1, 2)) {\n\t\t\tfor (const m of data.comboMoves) moves.add(m);\n\t\t}\n\n\t\t// Add one of the semi-mandatory moves\n\t\t// Often, these are used so that the Pokemon only gets one of the less useful moves\n\t\tif (moves.size < this.maxMoveCount && data.exclusiveMoves) {\n\t\t\tmoves.add(this.sample(data.exclusiveMoves));\n\t\t}\n\n\t\t// Add the mandatory move. SD Mew and Amnesia Snorlax are exceptions.\n\t\tif (moves.size < this.maxMoveCount && data.essentialMove) {\n\t\t\tmoves.add(data.essentialMove);\n\t\t}\n\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\n\t\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\n\t\t\t\tconst moveid = this.sampleNoReplace(movePool);\n\t\t\t\tmoves.add(moveid);\n\t\t\t}\n\n\t\t\t// Only do move choosing if we have backup moves in the pool...\n\t\t\tif (movePool.length) {\n\t\t\t\tfor (const setMoveid of moves) {\n\t\t\t\t\tconst move = this.dex.moves.get(setMoveid);\n\t\t\t\t\tconst moveid = move.id;\n\t\t\t\t\tif (!move.damage && !move.damageCallback) counter.add(move.category);\n\t\t\t\t\tif (PhysicalSetup.includes(moveid)) counter.add('physicalsetup');\n\t\t\t\t\tif (SpecialSetup.includes(moveid)) counter.add('specialsetup');\n\t\t\t\t}\n\n\t\t\t\tfor (const moveid of moves) {\n\t\t\t\t\tif (moveid === data.essentialMove) continue;\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\t\tif (\n\t\t\t\t\t\t(!data.essentialMove || moveid !== data.essentialMove) &&\n\t\t\t\t\t\tthis.shouldCullMove(move, types, moves, counter).cull\n\t\t\t\t\t) {\n\t\t\t\t\t\tmoves.delete(moveid);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcounter.add(move.category);\n\t\t\t\t}\n\t\t\t} // End of the check for more than 4 moves on moveset.\n\t\t}\n\n\t\tconst level = this.adjustLevel || data.level || 80;\n\n\t\tconst evs = {hp: 255, atk: 255, def: 255, spa: 255, spd: 255, spe: 255};\n\t\tconst ivs = {hp: 30, atk: 30, def: 30, spa: 30, spd: 30, spe: 30};\n\n\t\t// Should be able to use Substitute four times from full HP without fainting\n\t\tif (moves.has('substitute')) {\n\t\t\twhile (evs.hp > 3) {\n\t\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\t\tif (hp % 4 !== 0) break;\n\t\t\t\tevs.hp -= 4;\n\t\t\t}\n\t\t}\n\n\t\t// Minimize confusion damage\n\t\tconst noAttackStatMoves = [...moves].every(m => {\n\t\t\tconst move = this.dex.moves.get(m);\n\t\t\tif (move.damageCallback || move.damage) return true;\n\t\t\treturn move.category !== 'Physical';\n\t\t});\n\t\tif (noAttackStatMoves && !moves.has('mimic') && !moves.has('transform')) {\n\t\t\tevs.atk = 0;\n\t\t\t// We don't want to lower the HP DV/IV\n\t\t\tivs.atk = 2;\n\t\t}\n\n\t\treturn {\n\t\t\tname: species.name,\n\t\t\tspecies: species.name,\n\t\t\tmoves: Array.from(moves),\n\t\t\tability: 'No Ability',\n\t\t\tevs,\n\t\t\tivs,\n\t\t\titem: '',\n\t\t\tlevel,\n\t\t\tshiny: false,\n\t\t\tgender: false,\n\t\t};\n\t}\n\n\trandomHCTeam(): PokemonSet[] {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst team = [];\n\n\t\tconst movePool = [...this.dex.moves.all()];\n\t\tconst typesPool = ['Bird', ...this.dex.types.names()];\n\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize);\n\t\tconst hackmonsCup: {[k: string]: HackmonsCupEntry} = {};\n\n\t\tfor (const forme of randomN) {\n\t\t\t// Choose forme\n\t\t\tconst species = this.dex.species.get(forme);\n\t\t\tif (!hackmonsCup[species.id]) {\n\t\t\t\thackmonsCup[species.id] = {\n\t\t\t\t\ttypes: [this.sample(typesPool), this.sample(typesPool)],\n\t\t\t\t\tbaseStats: {\n\t\t\t\t\t\thp: Utils.clampIntRange(this.random(256), 1),\n\t\t\t\t\t\tatk: Utils.clampIntRange(this.random(256), 1),\n\t\t\t\t\t\tdef: Utils.clampIntRange(this.random(256), 1),\n\t\t\t\t\t\tspa: Utils.clampIntRange(this.random(256), 1),\n\t\t\t\t\t\tspd: 0,\n\t\t\t\t\t\tspe: Utils.clampIntRange(this.random(256), 1),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tif (this.forceMonotype && !hackmonsCup[species.id].types.includes(this.forceMonotype)) {\n\t\t\t\t\thackmonsCup[species.id].types[1] = this.forceMonotype;\n\t\t\t\t}\n\t\t\t\thackmonsCup[species.id].baseStats.spd = hackmonsCup[species.id].baseStats.spa;\n\t\t\t}\n\t\t\tif (hackmonsCup[species.id].types[0] === hackmonsCup[species.id].types[1]) {\n\t\t\t\thackmonsCup[species.id].types.splice(1, 1);\n\t\t\t}\n\n\t\t\t// Random unique moves\n\t\t\tconst moves = [];\n\t\t\tdo {\n\t\t\t\tconst move = this.sampleNoReplace(movePool);\n\t\t\t\tif (move.gen <= this.gen && !move.isNonstandard && !move.name.startsWith('Hidden Power ')) {\n\t\t\t\t\tmoves.push(move.id);\n\t\t\t\t}\n\t\t\t} while (moves.length < this.maxMoveCount);\n\n\t\t\t// Random EVs\n\t\t\tconst evs = {\n\t\t\t\thp: this.random(256),\n\t\t\t\tatk: this.random(256),\n\t\t\t\tdef: this.random(256),\n\t\t\t\tspa: this.random(256),\n\t\t\t\tspd: 0,\n\t\t\t\tspe: this.random(256),\n\t\t\t};\n\t\t\tevs['spd'] = evs['spa'];\n\n\t\t\t// Random DVs\n\t\t\tconst ivs: StatsTable = {\n\t\t\t\thp: 0,\n\t\t\t\tatk: this.random(16),\n\t\t\t\tdef: this.random(16),\n\t\t\t\tspa: this.random(16),\n\t\t\t\tspd: 0,\n\t\t\t\tspe: this.random(16),\n\t\t\t};\n\t\t\tivs[\"hp\"] = (ivs[\"atk\"] % 2) * 16 + (ivs[\"def\"] % 2) * 8 + (ivs[\"spe\"] % 2) * 4 + (ivs[\"spa\"] % 2) * 2;\n\t\t\tfor (const iv in ivs) {\n\t\t\t\tif (iv === 'hp' || iv === 'spd') continue;\n\t\t\t\tivs[iv as keyof StatsTable] *= 2;\n\t\t\t}\n\t\t\tivs['spd'] = ivs['spa'];\n\n\t\t\t// Level balance\n\t\t\tconst mbstmin = 425;\n\t\t\tconst baseStats = hackmonsCup[species.id].baseStats;\n\t\t\tconst calcStat = (statName: StatID, lvl?: number) => {\n\t\t\t\tif (lvl) {\n\t\t\t\t\treturn Math.floor(Math.floor(2 * baseStats[statName] + ivs[statName] + Math.floor(evs[statName] / 4)) * lvl / 100 + 5);\n\t\t\t\t}\n\t\t\t\treturn Math.floor(2 * baseStats[statName] + ivs[statName] + Math.floor(evs[statName] / 4)) + 5;\n\t\t\t};\n\t\t\tlet mbst = 0;\n\t\t\tfor (const statName of Object.keys(baseStats)) {\n\t\t\t\tmbst += calcStat(statName as StatID);\n\t\t\t\tif (statName === 'hp') mbst += 5;\n\t\t\t}\n\t\t\tlet level;\n\t\t\tif (this.adjustLevel) {\n\t\t\t\tlevel = this.adjustLevel;\n\t\t\t} else {\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst);\n\t\t\t\twhile (level < 100) {\n\t\t\t\t\tfor (const statName of Object.keys(baseStats)) {\n\t\t\t\t\t\tmbst += calcStat(statName as StatID, level);\n\t\t\t\t\t\tif (statName === 'hp') mbst += 5;\n\t\t\t\t\t}\n\t\t\t\t\tif (mbst >= mbstmin) break;\n\t\t\t\t\tlevel++;\n\t\t\t\t}\n\t\t\t\tif (level > 100) level = 100;\n\t\t\t}\n\n\t\t\tteam.push({\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tgender: species.gender,\n\t\t\t\titem: '',\n\t\t\t\tability: 'No Ability',\n\t\t\t\tmoves,\n\t\t\t\tevs,\n\t\t\t\tivs,\n\t\t\t\tnature: '',\n\t\t\t\tlevel,\n\t\t\t\tshiny: false,\n\t\t\t\t// Hacky but the only way to communicate stats/level generation properly\n\t\t\t\thc: hackmonsCup[species.id],\n\t\t\t});\n\t\t}\n\n\t\treturn team;\n\t}\n}\n\nexport default RandomGen1Teams;\n"],
  "mappings": "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",
  "names": ["import_random_teams", "RandomGen2Teams"]
}
