{
  "version": 3,
  "sources": ["../../../../data/mods/partnersincrime/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\n\tgen: 9,\n\tinherit: 'gen9',\n\tnextTurn() {\n\t\tthis.turn++;\n\t\tthis.lastSuccessfulMoveThisTurn = null;\n\n\t\t// Partners in Crime moveSlot updating\n\t\t// Must be highest priority so imprison doesn't lag behind.\n\t\tfor (const side of this.sides) {\n\t\t\tfor (const pokemon of side.active) {\n\t\t\t\tpokemon.moveSlots = pokemon.moveSlots.filter(move => pokemon.m.curMoves.includes(move.id));\n\t\t\t\tpokemon.m.curMoves = this.dex.deepClone(pokemon.moves);\n\t\t\t\tconst ally = side.active.find(mon => mon && mon !== pokemon && !mon.fainted);\n\t\t\t\tlet allyMoves = ally ? this.dex.deepClone(ally.moveSlots) : [];\n\t\t\t\tif (ally) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tallyMoves = allyMoves.filter(move => !pokemon.moves.includes(move.id) && ally.m.curMoves.includes(move.id));\n\t\t\t\t\tfor (const aMove of allyMoves) {\n\t\t\t\t\t\taMove.pp = this.clampIntRange(aMove.maxpp - (pokemon.m.trackPP.get(aMove.id) || 0), 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpokemon.moveSlots = pokemon.moveSlots.concat(allyMoves);\n\t\t\t}\n\t\t}\n\n\t\tconst dynamaxEnding: Pokemon[] = [];\n\t\tfor (const pokemon of this.getAllActive()) {\n\t\t\tif (pokemon.volatiles['dynamax']?.turns === 3) {\n\t\t\t\tdynamaxEnding.push(pokemon);\n\t\t\t}\n\t\t}\n\t\tif (dynamaxEnding.length > 1) {\n\t\t\tthis.updateSpeed();\n\t\t\tthis.speedSort(dynamaxEnding);\n\t\t}\n\t\tfor (const pokemon of dynamaxEnding) {\n\t\t\tpokemon.removeVolatile('dynamax');\n\t\t}\n\n\t\t// Gen 1 partial trapping ends when either Pokemon or a switch in faints to residual damage\n\t\tif (this.gen === 1) {\n\t\t\tfor (const pokemon of this.getAllActive()) {\n\t\t\t\tif (pokemon.volatiles['partialtrappinglock']) {\n\t\t\t\t\tconst target = pokemon.volatiles['partialtrappinglock'].locked;\n\t\t\t\t\tif (target.hp <= 0 || !target.volatiles['partiallytrapped']) {\n\t\t\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pokemon.volatiles['partiallytrapped']) {\n\t\t\t\t\tconst source = pokemon.volatiles['partiallytrapped'].source;\n\t\t\t\t\tif (source.hp <= 0 || !source.volatiles['partialtrappinglock']) {\n\t\t\t\t\t\tdelete pokemon.volatiles['partiallytrapped'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst trappedBySide: boolean[] = [];\n\t\tconst stalenessBySide: ('internal' | 'external' | undefined)[] = [];\n\t\tfor (const side of this.sides) {\n\t\t\tlet sideTrapped = true;\n\t\t\tlet sideStaleness: 'internal' | 'external' | undefined;\n\t\t\tfor (const pokemon of side.active) {\n\t\t\t\tif (!pokemon) continue;\n\t\t\t\tpokemon.moveThisTurn = '';\n\t\t\t\tpokemon.newlySwitched = false;\n\t\t\t\tpokemon.moveLastTurnResult = pokemon.moveThisTurnResult;\n\t\t\t\tpokemon.moveThisTurnResult = undefined;\n\t\t\t\tif (this.turn !== 1) {\n\t\t\t\t\tpokemon.usedItemThisTurn = false;\n\t\t\t\t\tpokemon.statsRaisedThisTurn = false;\n\t\t\t\t\tpokemon.statsLoweredThisTurn = false;\n\t\t\t\t\t// It shouldn't be possible in a normal battle for a Pokemon to be damaged before turn 1's move selection\n\t\t\t\t\t// However, this could be potentially relevant in certain OMs\n\t\t\t\t\tpokemon.hurtThisTurn = null;\n\t\t\t\t}\n\n\t\t\t\tpokemon.maybeDisabled = false;\n\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\n\t\t\t\t\tmoveSlot.disabled = false;\n\t\t\t\t\tmoveSlot.disabledSource = '';\n\t\t\t\t}\n\t\t\t\tthis.runEvent('DisableMove', pokemon);\n\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\n\t\t\t\t\tthis.singleEvent('DisableMove', this.dex.getActiveMove(moveSlot.id), null, pokemon);\n\t\t\t\t}\n\n\t\t\t\t// If it was an illusion, it's not any more\n\t\t\t\tif (pokemon.getLastAttackedBy() && this.gen >= 7) pokemon.knownType = true;\n\n\t\t\t\tfor (let i = pokemon.attackedBy.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst attack = pokemon.attackedBy[i];\n\t\t\t\t\tif (attack.source.isActive) {\n\t\t\t\t\t\tattack.thisTurn = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpokemon.attackedBy.splice(pokemon.attackedBy.indexOf(attack), 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.gen >= 7) {\n\t\t\t\t\t// In Gen 7, the real type of every Pokemon is visible to all players via the bottom screen while making choices\n\t\t\t\t\tconst seenPokemon = pokemon.illusion || pokemon;\n\t\t\t\t\tconst realTypeString = seenPokemon.getTypes(true).join('/');\n\t\t\t\t\tif (realTypeString !== seenPokemon.apparentType) {\n\t\t\t\t\t\tthis.add('-start', pokemon, 'typechange', realTypeString, '[silent]');\n\t\t\t\t\t\tseenPokemon.apparentType = realTypeString;\n\t\t\t\t\t\tif (pokemon.addedType) {\n\t\t\t\t\t\t\t// The typechange message removes the added type, so put it back\n\t\t\t\t\t\t\tthis.add('-start', pokemon, 'typeadd', pokemon.addedType, '[silent]');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpokemon.trapped = pokemon.maybeTrapped = false;\n\t\t\t\tthis.runEvent('TrapPokemon', pokemon);\n\t\t\t\tif (!pokemon.knownType || this.dex.getImmunity('trapped', pokemon)) {\n\t\t\t\t\tthis.runEvent('MaybeTrapPokemon', pokemon);\n\t\t\t\t}\n\t\t\t\t// canceling switches would leak information\n\t\t\t\t// if a foe might have a trapping ability\n\t\t\t\tif (this.gen > 2) {\n\t\t\t\t\tfor (const source of pokemon.foes()) {\n\t\t\t\t\t\tconst species = (source.illusion || source).species;\n\t\t\t\t\t\tif (!species.abilities) continue;\n\t\t\t\t\t\tfor (const abilitySlot in species.abilities) {\n\t\t\t\t\t\t\tconst abilityName = species.abilities[abilitySlot as keyof Species['abilities']];\n\t\t\t\t\t\t\tif (abilityName === source.ability) {\n\t\t\t\t\t\t\t\t// pokemon event was already run above so we don't need\n\t\t\t\t\t\t\t\t// to run it again.\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst ruleTable = this.ruleTable;\n\t\t\t\t\t\t\tif ((ruleTable.has('+hackmons') || !ruleTable.has('obtainableabilities')) && !this.format.team) {\n\t\t\t\t\t\t\t\t// hackmons format\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else if (abilitySlot === 'H' && species.unreleasedHidden) {\n\t\t\t\t\t\t\t\t// unreleased hidden ability\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst ability = this.dex.abilities.get(abilityName);\n\t\t\t\t\t\t\tif (ruleTable.has('-ability:' + ability.id)) continue;\n\t\t\t\t\t\t\tif (pokemon.knownType && !this.dex.getImmunity('trapped', pokemon)) continue;\n\t\t\t\t\t\t\tthis.singleEvent('FoeMaybeTrapPokemon', ability, {}, pokemon, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pokemon.fainted) continue;\n\n\t\t\t\tsideTrapped = sideTrapped && pokemon.trapped;\n\t\t\t\tconst staleness = pokemon.volatileStaleness || pokemon.staleness;\n\t\t\t\tif (staleness) sideStaleness = sideStaleness === 'external' ? sideStaleness : staleness;\n\t\t\t\tpokemon.activeTurns++;\n\t\t\t}\n\t\t\ttrappedBySide.push(sideTrapped);\n\t\t\tstalenessBySide.push(sideStaleness);\n\t\t\tside.faintedLastTurn = side.faintedThisTurn;\n\t\t\tside.faintedThisTurn = null;\n\t\t}\n\n\t\tif (this.maybeTriggerEndlessBattleClause(trappedBySide, stalenessBySide)) return;\n\n\t\tif (this.gameType === 'triples' && this.sides.every(side => side.pokemonLeft === 1)) {\n\t\t\t// If both sides have one Pokemon left in triples and they are not adjacent, they are both moved to the center.\n\t\t\tconst actives = this.getAllActive();\n\t\t\tif (actives.length > 1 && !actives[0].isAdjacent(actives[1])) {\n\t\t\t\tthis.swapPosition(actives[0], 1, '[silent]');\n\t\t\t\tthis.swapPosition(actives[1], 1, '[silent]');\n\t\t\t\tthis.add('-center');\n\t\t\t}\n\t\t}\n\n\t\tthis.add('turn', this.turn);\n\t\tif (this.gameType === 'multi') {\n\t\t\tfor (const side of this.sides) {\n\t\t\t\tif (side.canDynamaxNow()) {\n\t\t\t\t\tif (this.turn === 1) {\n\t\t\t\t\t\tthis.addSplit(side.id, ['-candynamax', side.id]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.add('-candynamax', side.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.gen === 2) this.quickClawRoll = this.randomChance(60, 256);\n\t\tif (this.gen === 3) this.quickClawRoll = this.randomChance(1, 5);\n\n\t\t// Crazyhouse Progress checker because sidebars has trouble keeping track of Pokemon.\n\t\t// Please remove me once there is client support.\n\t\tif (this.ruleTable.has('crazyhouserule')) {\n\t\t\tfor (const side of this.sides) {\n\t\t\t\tlet buf = `raw|${side.name}'s team:<br />`;\n\t\t\t\tfor (const pokemon of side.pokemon) {\n\t\t\t\t\tif (!buf.endsWith('<br />')) buf += '/</span>&#8203;';\n\t\t\t\t\tif (pokemon.fainted) {\n\t\t\t\t\t\tbuf += `<span style=\"white-space:nowrap;\"><span style=\"opacity:.3\"><psicon pokemon=\"${pokemon.species.id}\" /></span>`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuf += `<span style=\"white-space:nowrap\"><psicon pokemon=\"${pokemon.species.id}\" />`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.add(`${buf}</span>`);\n\t\t\t}\n\t\t}\n\n\t\tthis.makeRequest('move');\n\t},\n\tactions: {\n\t\trunSwitch(pokemon) {\n\t\t\tthis.battle.runEvent('Swap', pokemon);\n\n\t\t\tif (this.battle.gen >= 5) {\n\t\t\t\tthis.battle.runEvent('SwitchIn', pokemon);\n\t\t\t}\n\n\t\t\tthis.battle.runEvent('EntryHazard', pokemon);\n\n\t\t\tif (this.battle.gen <= 4) {\n\t\t\t\tthis.battle.runEvent('SwitchIn', pokemon);\n\t\t\t}\n\n\t\t\tconst ally = pokemon.side.active.find(mon => mon && mon !== pokemon && !mon.fainted);\n\n\t\t\tif (this.battle.gen <= 2 && !pokemon.side.faintedThisTurn && pokemon.draggedIn !== this.battle.turn) {\n\t\t\t\tthis.battle.runEvent('AfterSwitchInSelf', pokemon);\n\t\t\t}\n\t\t\tif (!pokemon.hp) return false;\n\t\t\tpokemon.isStarted = true;\n\t\t\tif (!pokemon.fainted) {\n\t\t\t\tthis.battle.singleEvent('Start', pokemon.getAbility(), pokemon.abilityState, pokemon);\n\t\t\t\t// Start innates\n\t\t\t\tlet status;\n\t\t\t\tif (pokemon.m.startVolatile && pokemon.m.innate) {\n\t\t\t\t\tstatus = this.battle.dex.conditions.get(pokemon.m.innate);\n\t\t\t\t\tthis.battle.singleEvent('Start', status, pokemon.volatiles[status.id], pokemon);\n\t\t\t\t\tpokemon.m.startVolatile = false;\n\t\t\t\t}\n\t\t\t\tif (ally && ally.m.startVolatile && ally.m.innate) {\n\t\t\t\t\tstatus = this.battle.dex.conditions.get(ally.m.innate);\n\t\t\t\t\tthis.battle.singleEvent('Start', status, ally.volatiles[status.id], ally);\n\t\t\t\t\tally.m.startVolatile = false;\n\t\t\t\t}\n\t\t\t\t// pic end\n\t\t\t\tthis.battle.singleEvent('Start', pokemon.getItem(), pokemon.itemState, pokemon);\n\t\t\t}\n\t\t\tif (this.battle.gen === 4) {\n\t\t\t\tfor (const foeActive of pokemon.foes()) {\n\t\t\t\t\tfoeActive.removeVolatile('substitutebroken');\n\t\t\t\t}\n\t\t\t}\n\t\t\tpokemon.draggedIn = null;\n\t\t\treturn true;\n\t\t},\n\t},\n\tpokemon: {\n\t\tsetAbility(ability, source, isFromFormeChange) {\n\t\t\tif (!this.hp) return false;\n\t\t\tconst BAD_ABILITIES = ['trace', 'imposter', 'neutralizinggas', 'illusion', 'wanderingspirit'];\n\t\t\tif (typeof ability === 'string') ability = this.battle.dex.abilities.get(ability);\n\t\t\tconst oldAbility = this.ability;\n\t\t\tif (!isFromFormeChange) {\n\t\t\t\tif (ability.isPermanent || this.getAbility().isPermanent) return false;\n\t\t\t}\n\t\t\tif (!this.battle.runEvent('SetAbility', this, source, this.battle.effect, ability)) return false;\n\t\t\tthis.battle.singleEvent('End', this.battle.dex.abilities.get(oldAbility), this.abilityState, this, source);\n\t\t\tconst ally = this.side.active.find(mon => mon && mon !== this && !mon.fainted);\n\t\t\tif (ally?.m.innate) {\n\t\t\t\tally.removeVolatile(ally.m.innate);\n\t\t\t\tdelete ally.m.innate;\n\t\t\t}\n\t\t\tif (this.battle.effect && this.battle.effect.effectType === 'Move' && !isFromFormeChange) {\n\t\t\t\tthis.battle.add('-endability', this, this.battle.dex.abilities.get(oldAbility), '[from] move: ' +\n\t\t\t\t\tthis.battle.dex.moves.get(this.battle.effect.id));\n\t\t\t}\n\t\t\tthis.ability = ability.id;\n\t\t\tthis.abilityState = {id: ability.id, target: this};\n\t\t\tif (ability.id && this.battle.gen > 3) {\n\t\t\t\tthis.battle.singleEvent('Start', ability, this.abilityState, this, source);\n\t\t\t\tif (ally && ally.ability !== this.ability) {\n\t\t\t\t\tif (!this.m.innate) {\n\t\t\t\t\t\tthis.m.innate = 'ability:' + ally.getAbility().id;\n\t\t\t\t\t\tthis.addVolatile(this.m.innate);\n\t\t\t\t\t}\n\t\t\t\t\tif (!BAD_ABILITIES.includes(ability.id)) {\n\t\t\t\t\t\tally.m.innate = 'ability:' + ability.id;\n\t\t\t\t\t\tally.addVolatile(ally.m.innate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Entrainment\n\t\t\tif (this.m.innate && this.m.innate.endsWith(ability.id)) {\n\t\t\t\tthis.removeVolatile(this.m.innate);\n\t\t\t\tdelete this.m.innate;\n\t\t\t}\n\t\t\tthis.abilityOrder = this.battle.abilityOrder++;\n\t\t\treturn oldAbility;\n\t\t},\n\t\thasAbility(ability) {\n\t\t\tif (this.ignoringAbility()) return false;\n\t\t\tconst ownAbility = this.ability;\n\t\t\tconst ally = this.side.active.find(mon => mon && mon !== this && !mon.fainted);\n\t\t\tconst allyAbility = ally ? ally.ability : \"\";\n\t\t\tif (!Array.isArray(ability)) {\n\t\t\t\tif (ownAbility === this.battle.toID(ability) || allyAbility === this.battle.toID(ability)) return true;\n\t\t\t} else {\n\t\t\t\t if (ability.map(this.battle.toID).includes(ownAbility) || ability.map(this.battle.toID).includes(allyAbility)) {\n\t\t\t\t\t return true;\n\t\t\t\t }\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\ttransformInto(pokemon, effect) {\n\t\t\tconst species = pokemon.species;\n\t\t\tif (pokemon.fainted || pokemon.illusion || (pokemon.volatiles['substitute'] && this.battle.gen >= 5) ||\n\t\t\t\t(pokemon.transformed && this.battle.gen >= 2) || (this.transformed && this.battle.gen >= 5) ||\n\t\t\t\tspecies.name === 'Eternatus-Eternamax') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.battle.dex.currentMod === 'gen1stadium' && (\n\t\t\t\tspecies.name === 'Ditto' ||\n\t\t\t\t(this.species.name === 'Ditto' && pokemon.moves.includes('transform'))\n\t\t\t)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!this.setSpecies(species, effect, true)) return false;\n\n\t\t\tthis.transformed = true;\n\t\t\tthis.weighthg = pokemon.weighthg;\n\n\t\t\tconst types = pokemon.getTypes(true);\n\t\t\tthis.setType(pokemon.volatiles['roost'] ? pokemon.volatiles['roost'].typeWas : types, true);\n\t\t\tthis.addedType = pokemon.addedType;\n\t\t\tthis.knownType = this.isAlly(pokemon) && pokemon.knownType;\n\t\t\tthis.apparentType = pokemon.apparentType;\n\n\t\t\tlet statName: StatIDExceptHP;\n\t\t\tfor (statName in this.storedStats) {\n\t\t\t\tthis.storedStats[statName] = pokemon.storedStats[statName];\n\t\t\t\tif (this.modifiedStats) this.modifiedStats[statName] = pokemon.modifiedStats![statName]; // Gen 1: Copy modified stats.\n\t\t\t}\n\t\t\tthis.moveSlots = [];\n\t\t\tthis.set.ivs = (this.battle.gen >= 5 ? this.set.ivs : pokemon.set.ivs);\n\t\t\tthis.hpType = (this.battle.gen >= 5 ? this.hpType : pokemon.hpType);\n\t\t\tthis.hpPower = (this.battle.gen >= 5 ? this.hpPower : pokemon.hpPower);\n\t\t\tfor (const moveSlot of pokemon.moveSlots) {\n\t\t\t\tlet moveName = moveSlot.move;\n\t\t\t\tif (!pokemon.m.curMoves.includes(moveSlot.id)) continue;\n\t\t\t\tif (moveSlot.id === 'hiddenpower') {\n\t\t\t\t\tmoveName = 'Hidden Power ' + this.hpType;\n\t\t\t\t}\n\t\t\t\tthis.moveSlots.push({\n\t\t\t\t\tmove: moveName,\n\t\t\t\t\tid: moveSlot.id,\n\t\t\t\t\tpp: moveSlot.maxpp === 1 ? 1 : 5,\n\t\t\t\t\tmaxpp: this.battle.gen >= 5 ? (moveSlot.maxpp === 1 ? 1 : 5) : moveSlot.maxpp,\n\t\t\t\t\ttarget: moveSlot.target,\n\t\t\t\t\tdisabled: false,\n\t\t\t\t\tused: false,\n\t\t\t\t\tvirtual: true,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.m.curMoves = pokemon.m.curMoves;\n\t\t\tlet boostName: BoostID;\n\t\t\tfor (boostName in pokemon.boosts) {\n\t\t\t\tthis.boosts[boostName] = pokemon.boosts[boostName];\n\t\t\t}\n\t\t\tif (this.battle.gen >= 6) {\n\t\t\t\tconst volatilesToCopy = ['focusenergy', 'gmaxchistrike', 'laserfocus'];\n\t\t\t\tfor (const volatile of volatilesToCopy) {\n\t\t\t\t\tif (pokemon.volatiles[volatile]) {\n\t\t\t\t\t\tthis.addVolatile(volatile);\n\t\t\t\t\t\tif (volatile === 'gmaxchistrike') this.volatiles[volatile].layers = pokemon.volatiles[volatile].layers;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.removeVolatile(volatile);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (effect) {\n\t\t\t\tthis.battle.add('-transform', this, pokemon, '[from] ' + effect.fullname);\n\t\t\t} else {\n\t\t\t\tthis.battle.add('-transform', this, pokemon);\n\t\t\t}\n\t\t\tif (this.battle.gen > 2) this.setAbility(pokemon.ability, this, true);\n\n\t\t\t// Change formes based on held items (for Transform)\n\t\t\t// Only ever relevant in Generation 4 since Generation 3 didn't have item-based forme changes\n\t\t\tif (this.battle.gen === 4) {\n\t\t\t\tif (this.species.num === 487) {\n\t\t\t\t\t// Giratina formes\n\t\t\t\t\tif (this.species.name === 'Giratina' && this.item === 'griseousorb') {\n\t\t\t\t\t\tthis.formeChange('Giratina-Origin');\n\t\t\t\t\t} else if (this.species.name === 'Giratina-Origin' && this.item !== 'griseousorb') {\n\t\t\t\t\t\tthis.formeChange('Giratina');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.species.num === 493) {\n\t\t\t\t\t// Arceus formes\n\t\t\t\t\tconst item = this.getItem();\n\t\t\t\t\tconst targetForme = (item?.onPlate ? 'Arceus-' + item.onPlate : 'Arceus');\n\t\t\t\t\tif (this.species.name !== targetForme) {\n\t\t\t\t\t\tthis.formeChange(targetForme);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\t\tdeductPP(move, amount, target) {\n\t\t\tconst gen = this.battle.gen;\n\t\t\tmove = this.battle.dex.moves.get(move);\n\t\t\tconst ppData = this.getMoveData(move);\n\t\t\tif (!ppData) return 0;\n\t\t\tppData.used = true;\n\t\t\tif (!ppData.pp && gen > 1) return 0;\n\n\t\t\tif (!amount) amount = 1;\n\t\t\tppData.pp -= amount;\n\t\t\tif (ppData.pp < 0 && gen > 1) {\n\t\t\t\tamount += ppData.pp;\n\t\t\t\tppData.pp = 0;\n\t\t\t}\n\t\t\tif (!this.m.curMoves.includes(move.id)) {\n\t\t\t\tthis.m.trackPP.set(move.id, (this.m.trackPP.get(move.id) || 0) + amount);\n\t\t\t}\n\t\t\treturn amount;\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
