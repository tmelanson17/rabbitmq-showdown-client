{
  "version": 3,
  "sources": ["../../../../data/mods/gen2/scripts.ts"],
  "sourcesContent": ["/**\n * Gen 2 scripts.\n */\n\nexport const Scripts: ModdedBattleScriptsData = {\n\tinherit: 'gen3',\n\tgen: 2,\n\tpokemon: {\n\t\tinherit: true,\n\t\tgetStat(statName, unboosted, unmodified, fastReturn) {\n\t\t\t// @ts-ignore - type checking prevents 'hp' from being passed, but we're paranoid\n\t\t\tif (statName === 'hp') throw new Error(\"Please read `maxhp` directly\");\n\n\t\t\t// base stat\n\t\t\tlet stat = this.storedStats[statName];\n\n\t\t\t// Stat boosts.\n\t\t\tif (!unboosted) {\n\t\t\t\tlet boost = this.boosts[statName];\n\t\t\t\tif (boost > 6) boost = 6;\n\t\t\t\tif (boost < -6) boost = -6;\n\t\t\t\tif (boost >= 0) {\n\t\t\t\t\tconst boostTable = [1, 1.5, 2, 2.5, 3, 3.5, 4];\n\t\t\t\t\tstat = Math.floor(stat * boostTable[boost]);\n\t\t\t\t} else {\n\t\t\t\t\tconst numerators = [100, 66, 50, 40, 33, 28, 25];\n\t\t\t\t\tstat = Math.floor(stat * numerators[-boost] / 100);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.status === 'par' && statName === 'spe') {\n\t\t\t\tstat = Math.floor(stat / 4);\n\t\t\t}\n\n\t\t\tif (!unmodified) {\n\t\t\t\t// Burn attack drop is checked when you get the attack stat upon switch in and used until switch out.\n\t\t\t\tif (this.status === 'brn' && statName === 'atk') {\n\t\t\t\t\tstat = Math.floor(stat / 2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Gen 2 caps stats at 999 and min is 1.\n\t\t\tstat = this.battle.clampIntRange(stat, 1, 999);\n\t\t\tif (fastReturn) return stat;\n\n\t\t\t// Screens\n\t\t\tif (!unboosted) {\n\t\t\t\tif (\n\t\t\t\t\t(statName === 'def' && this.side.sideConditions['reflect']) ||\n\t\t\t\t\t(statName === 'spd' && this.side.sideConditions['lightscreen'])\n\t\t\t\t) {\n\t\t\t\t\tstat *= 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Handle boosting items\n\t\t\tif (\n\t\t\t\t(['Cubone', 'Marowak'].includes(this.baseSpecies.name) && this.item === 'thickclub' && statName === 'atk') ||\n\t\t\t\t(this.baseSpecies.name === 'Pikachu' && this.item === 'lightball' && statName === 'spa')\n\t\t\t) {\n\t\t\t\tstat *= 2;\n\t\t\t} else if (this.baseSpecies.name === 'Ditto' && this.item === 'metalpowder' && ['def', 'spd'].includes(statName)) {\n\t\t\t\tstat = Math.floor(stat * 1.5);\n\t\t\t}\n\n\t\t\treturn stat;\n\t\t},\n\t\tboostBy(boost) {\n\t\t\tlet delta = 0;\n\t\t\tlet i: BoostID;\n\t\t\tfor (i in boost) {\n\t\t\t\tdelta = boost[i]!;\n\t\t\t\tif (delta > 0 && this.getStat(i as StatIDExceptHP, false, true) === 999) {\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.boosts[i] += delta;\n\t\t\t\tif (this.boosts[i] > 6) {\n\t\t\t\t\tdelta -= this.boosts[i] - 6;\n\t\t\t\t\tthis.boosts[i] = 6;\n\t\t\t\t}\n\t\t\t\tif (this.boosts[i] < -6) {\n\t\t\t\t\tdelta -= this.boosts[i] - (-6);\n\t\t\t\t\tthis.boosts[i] = -6;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn delta;\n\t\t},\n\t},\n\tactions: {\n\t\tinherit: true,\n\t\trunMove(moveOrMoveName, pokemon, targetLoc, sourceEffect) {\n\t\t\tlet move = this.dex.getActiveMove(moveOrMoveName);\n\t\t\tlet target = this.battle.getTarget(pokemon, move, targetLoc);\n\t\t\tif (!sourceEffect && move.id !== 'struggle') {\n\t\t\t\tconst changedMove = this.battle.runEvent('OverrideAction', pokemon, target, move);\n\t\t\t\tif (changedMove && changedMove !== true) {\n\t\t\t\t\tmove = this.dex.getActiveMove(changedMove);\n\t\t\t\t\ttarget = this.battle.getRandomTarget(pokemon, move);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!target && target !== false) target = this.battle.getRandomTarget(pokemon, move);\n\n\t\t\tthis.battle.setActiveMove(move, pokemon, target);\n\n\t\t\tif (pokemon.moveThisTurn) {\n\t\t\t\t// THIS IS PURELY A SANITY CHECK\n\t\t\t\t// DO NOT TAKE ADVANTAGE OF THIS TO PREVENT A POKEMON FROM MOVING;\n\t\t\t\t// USE this.battle.queue.cancelMove INSTEAD\n\t\t\t\tthis.battle.debug('' + pokemon.fullname + ' INCONSISTENT STATE, ALREADY MOVED: ' + pokemon.moveThisTurn);\n\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.battle.runEvent('BeforeMove', pokemon, target, move)) {\n\t\t\t\tthis.battle.runEvent('MoveAborted', pokemon, target, move);\n\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\t// This is only run for sleep and fully paralysed.\n\t\t\t\tthis.battle.runEvent('AfterMoveSelf', pokemon, target, move);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (move.beforeMoveCallback) {\n\t\t\t\tif (move.beforeMoveCallback.call(this.battle, pokemon, target, move)) {\n\t\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpokemon.lastDamage = 0;\n\t\t\tlet lockedMove = this.battle.runEvent('LockMove', pokemon);\n\t\t\tif (lockedMove === true) lockedMove = false;\n\t\t\tif (!lockedMove) {\n\t\t\t\tif (!pokemon.deductPP(move, null, target) && (move.id !== 'struggle')) {\n\t\t\t\t\tthis.battle.add('cant', pokemon, 'nopp', move);\n\t\t\t\t\tthis.battle.clearActiveMove(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpokemon.moveUsed(move);\n\t\t\tthis.battle.actions.useMove(move, pokemon, target, sourceEffect);\n\t\t\tthis.battle.singleEvent('AfterMove', move, null, pokemon, target, move);\n\t\t\tif (!move.selfSwitch && pokemon.side.foe.active[0].hp) this.battle.runEvent('AfterMoveSelf', pokemon, target, move);\n\t\t},\n\t\ttryMoveHit(target, pokemon, move) {\n\t\t\tconst positiveBoostTable = [1, 1.33, 1.66, 2, 2.33, 2.66, 3];\n\t\t\tconst negativeBoostTable = [1, 0.75, 0.6, 0.5, 0.43, 0.36, 0.33];\n\t\t\tconst doSelfDestruct = true;\n\t\t\tlet damage: number | false | undefined = 0;\n\n\t\t\tif (move.selfdestruct && doSelfDestruct) {\n\t\t\t\tthis.battle.faint(pokemon, pokemon, move);\n\t\t\t}\n\n\t\t\tlet hitResult = this.battle.singleEvent('PrepareHit', move, {}, target, pokemon, move);\n\t\t\tif (!hitResult) {\n\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.battle.runEvent('PrepareHit', pokemon, target, move);\n\n\t\t\tif (!this.battle.singleEvent('Try', move, null, pokemon, target, move)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (move.target === 'all' || move.target === 'foeSide' || move.target === 'allySide' || move.target === 'allyTeam') {\n\t\t\t\tif (move.target === 'all') {\n\t\t\t\t\thitResult = this.battle.runEvent('TryHitField', target, pokemon, move);\n\t\t\t\t} else {\n\t\t\t\t\thitResult = this.battle.runEvent('TryHitSide', target, pokemon, move);\n\t\t\t\t}\n\t\t\t\tif (!hitResult) {\n\t\t\t\t\tif (hitResult === false) {\n\t\t\t\t\t\tthis.battle.add('-fail', pokemon);\n\t\t\t\t\t\tthis.battle.attrLastMove('[still]');\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn this.moveHit(target, pokemon, move);\n\t\t\t}\n\n\t\t\thitResult = this.battle.runEvent('Invulnerability', target, pokemon, move);\n\t\t\tif (hitResult === false) {\n\t\t\t\tthis.battle.attrLastMove('[miss]');\n\t\t\t\tthis.battle.add('-miss', pokemon);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (move.ignoreImmunity === undefined) {\n\t\t\t\tmove.ignoreImmunity = (move.category === 'Status');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) &&\n\t\t\t\t!target.runImmunity(move.type, true)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\thitResult = this.battle.singleEvent('TryImmunity', move, {}, target, pokemon, move);\n\t\t\tif (hitResult === false) {\n\t\t\t\tthis.battle.add('-immune', target);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\thitResult = this.battle.runEvent('TryHit', target, pokemon, move);\n\t\t\tif (!hitResult) {\n\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tlet accuracy = move.accuracy;\n\t\t\tif (move.alwaysHit) {\n\t\t\t\taccuracy = true;\n\t\t\t} else {\n\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\n\t\t\t}\n\t\t\t// Now, let's calculate the accuracy.\n\t\t\tif (accuracy !== true) {\n\t\t\t\taccuracy = Math.floor(accuracy * 255 / 100);\n\t\t\t\tif (move.ohko) {\n\t\t\t\t\tif (pokemon.level >= target.level) {\n\t\t\t\t\t\taccuracy += (pokemon.level - target.level) * 2;\n\t\t\t\t\t\taccuracy = Math.min(accuracy, 255);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.battle.add('-immune', target, '[ohko]');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!move.ignoreAccuracy) {\n\t\t\t\t\tif (pokemon.boosts.accuracy > 0) {\n\t\t\t\t\t\taccuracy *= positiveBoostTable[pokemon.boosts.accuracy];\n\t\t\t\t\t} else {\n\t\t\t\t\t\taccuracy *= negativeBoostTable[-pokemon.boosts.accuracy];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!move.ignoreEvasion) {\n\t\t\t\t\tif (target.boosts.evasion > 0 && !move.ignorePositiveEvasion) {\n\t\t\t\t\t\taccuracy *= negativeBoostTable[target.boosts.evasion];\n\t\t\t\t\t} else if (target.boosts.evasion < 0) {\n\t\t\t\t\t\taccuracy *= positiveBoostTable[-target.boosts.evasion];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taccuracy = Math.min(Math.floor(accuracy), 255);\n\t\t\t\taccuracy = Math.max(accuracy, 1);\n\t\t\t} else {\n\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\n\t\t\t}\n\t\t\taccuracy = this.battle.runEvent('ModifyAccuracy', target, pokemon, move, accuracy);\n\t\t\tif (accuracy !== true) accuracy = Math.max(accuracy, 0);\n\t\t\tif (move.alwaysHit) {\n\t\t\t\taccuracy = true;\n\t\t\t} else {\n\t\t\t\taccuracy = this.battle.runEvent('Accuracy', target, pokemon, move, accuracy);\n\t\t\t}\n\t\t\tif (accuracy !== true && accuracy !== 255 && !this.battle.randomChance(accuracy, 256)) {\n\t\t\t\tthis.battle.attrLastMove('[miss]');\n\t\t\t\tthis.battle.add('-miss', pokemon);\n\t\t\t\tdamage = false;\n\t\t\t\treturn damage;\n\t\t\t}\n\t\t\tmove.totalDamage = 0;\n\t\t\tpokemon.lastDamage = 0;\n\t\t\tif (move.multihit) {\n\t\t\t\tlet hits = move.multihit;\n\t\t\t\tif (Array.isArray(hits)) {\n\t\t\t\t\tif (hits[0] === 2 && hits[1] === 5) {\n\t\t\t\t\t\thits = this.battle.sample([2, 2, 2, 3, 3, 3, 4, 5]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\thits = this.battle.random(hits[0], hits[1] + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\thits = Math.floor(hits);\n\t\t\t\tlet nullDamage = true;\n\t\t\t\tlet moveDamage: number | undefined | false;\n\n\t\t\t\tconst isSleepUsable = move.sleepUsable || this.dex.moves.get(move.sourceEffect).sleepUsable;\n\t\t\t\tlet i: number;\n\t\t\t\tfor (i = 0; i < hits && target.hp && pokemon.hp; i++) {\n\t\t\t\t\tif (pokemon.status === 'slp' && !isSleepUsable) break;\n\t\t\t\t\tmove.hit = i + 1;\n\t\t\t\t\tif (move.hit === hits) move.lastHit = true;\n\t\t\t\t\tmoveDamage = this.moveHit(target, pokemon, move);\n\t\t\t\t\tif (moveDamage === false) break;\n\t\t\t\t\tif (nullDamage && (moveDamage || moveDamage === 0 || moveDamage === undefined)) nullDamage = false;\n\t\t\t\t\tdamage = (moveDamage || 0);\n\t\t\t\t\tmove.totalDamage += damage;\n\t\t\t\t\tthis.battle.eachEvent('Update');\n\t\t\t\t}\n\t\t\t\tif (i === 0) return 1;\n\t\t\t\tif (nullDamage) damage = false;\n\t\t\t\tthis.battle.add('-hitcount', target, i);\n\t\t\t} else {\n\t\t\t\tdamage = this.moveHit(target, pokemon, move);\n\t\t\t\tmove.totalDamage = damage;\n\t\t\t}\n\t\t\tif (move.category !== 'Status') {\n\t\t\t\ttarget.gotAttacked(move, damage, pokemon);\n\t\t\t}\n\t\t\tif (move.ohko) this.battle.add('-ohko');\n\n\t\t\tif (!move.negateSecondary) {\n\t\t\t\tthis.battle.singleEvent('AfterMoveSecondary', move, null, target, pokemon, move);\n\t\t\t\tthis.battle.runEvent('AfterMoveSecondary', target, pokemon, move);\n\t\t\t}\n\n\t\t\tif (move.recoil && move.totalDamage) {\n\t\t\t\tthis.battle.damage(this.calcRecoilDamage(move.totalDamage, move), pokemon, target, 'recoil');\n\t\t\t}\n\t\t\treturn damage;\n\t\t},\n\t\tmoveHit(target, pokemon, move, moveData, isSecondary, isSelf) {\n\t\t\tlet damage: number | false | null | undefined = undefined;\n\t\t\tmove = this.dex.getActiveMove(move);\n\n\t\t\tif (!moveData) moveData = move;\n\t\t\tlet hitResult: boolean | number | null = true;\n\n\t\t\tif (move.target === 'all' && !isSelf) {\n\t\t\t\thitResult = this.battle.singleEvent('TryHitField', moveData, {}, target, pokemon, move);\n\t\t\t} else if ((move.target === 'foeSide' || move.target === 'allySide') && !isSelf) {\n\t\t\t\thitResult = this.battle.singleEvent('TryHitSide', moveData, {}, (target ? target.side : null), pokemon, move);\n\t\t\t} else if (target) {\n\t\t\t\thitResult = this.battle.singleEvent('TryHit', moveData, {}, target, pokemon, move);\n\t\t\t}\n\t\t\tif (!hitResult) {\n\t\t\t\tif (hitResult === false) this.battle.add('-fail', target);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (target && !isSecondary && !isSelf) {\n\t\t\t\thitResult = this.battle.runEvent('TryPrimaryHit', target, pokemon, moveData);\n\t\t\t\tif (hitResult === 0) {\n\t\t\t\t\t// special Substitute flag\n\t\t\t\t\thitResult = true;\n\t\t\t\t\ttarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (target && isSecondary && !moveData.self) {\n\t\t\t\thitResult = true;\n\t\t\t}\n\t\t\tif (!hitResult) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (target) {\n\t\t\t\tlet didSomething: boolean | number | null = false;\n\t\t\t\tdamage = this.getDamage(pokemon, target, moveData);\n\n\t\t\t\tif ((damage || damage === 0) && !target.fainted) {\n\t\t\t\t\tdamage = this.battle.damage(damage, target, pokemon, move);\n\t\t\t\t\tif (!(damage || damage === 0)) {\n\t\t\t\t\t\tthis.battle.debug('damage interrupted');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tdidSomething = true;\n\t\t\t\t}\n\t\t\t\tif (damage === false || damage === null) {\n\t\t\t\t\tif (damage === false && !isSecondary && !isSelf) {\n\t\t\t\t\t\tthis.battle.add('-fail', target);\n\t\t\t\t\t}\n\t\t\t\t\tthis.battle.debug('damage calculation interrupted');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (moveData.boosts && !target.fainted) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tpokemon.volatiles['lockon'] && target === pokemon.volatiles['lockon'].source &&\n\t\t\t\t\t\ttarget.isSemiInvulnerable() && !isSelf\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!isSecondary) this.battle.add('-fail', target);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\thitResult = this.battle.boost(moveData.boosts, target, pokemon, move);\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.heal && !target.fainted) {\n\t\t\t\t\tconst d = target.heal(Math.round(target.maxhp * moveData.heal[0] / moveData.heal[1]));\n\t\t\t\t\tif (!d && d !== 0) {\n\t\t\t\t\t\tthis.battle.add('-fail', target);\n\t\t\t\t\t\tthis.battle.debug('heal interrupted');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tthis.battle.add('-heal', target, target.getHealth);\n\t\t\t\t\tdidSomething = true;\n\t\t\t\t}\n\t\t\t\tif (moveData.status) {\n\t\t\t\t\thitResult = target.trySetStatus(moveData.status, pokemon, move);\n\t\t\t\t\tif (!hitResult && move.status) return hitResult;\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.forceStatus) {\n\t\t\t\t\thitResult = target.setStatus(moveData.forceStatus, pokemon, move);\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.volatileStatus) {\n\t\t\t\t\thitResult = target.addVolatile(moveData.volatileStatus, pokemon, move);\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.sideCondition) {\n\t\t\t\t\thitResult = target.side.addSideCondition(moveData.sideCondition, pokemon, move);\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.weather) {\n\t\t\t\t\thitResult = this.battle.field.setWeather(moveData.weather, pokemon, move);\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.pseudoWeather) {\n\t\t\t\t\thitResult = this.battle.field.addPseudoWeather(moveData.pseudoWeather, pokemon, move);\n\t\t\t\t\tdidSomething = didSomething || hitResult;\n\t\t\t\t}\n\t\t\t\tif (moveData.forceSwitch) {\n\t\t\t\t\tif (this.battle.canSwitch(target.side)) didSomething = true; // at least defer the fail message to later\n\t\t\t\t}\n\t\t\t\tif (moveData.selfSwitch) {\n\t\t\t\t\tif (this.battle.canSwitch(pokemon.side)) didSomething = true; // at least defer the fail message to later\n\t\t\t\t}\n\t\t\t\t// Hit events\n\t\t\t\t//   These are like the TryHit events, except we don't need a FieldHit event.\n\t\t\t\t//   Scroll up for the TryHit event documentation, and just ignore the \"Try\" part. ;)\n\t\t\t\thitResult = null;\n\t\t\t\tif (move.target === 'all' && !isSelf) {\n\t\t\t\t\tif (moveData.onHitField) hitResult = this.battle.singleEvent('HitField', moveData, {}, target, pokemon, move);\n\t\t\t\t} else if ((move.target === 'foeSide' || move.target === 'allySide') && !isSelf) {\n\t\t\t\t\tif (moveData.onHitSide) hitResult = this.battle.singleEvent('HitSide', moveData, {}, target.side, pokemon, move);\n\t\t\t\t} else {\n\t\t\t\t\tif (moveData.onHit) hitResult = this.battle.singleEvent('Hit', moveData, {}, target, pokemon, move);\n\t\t\t\t\tif (!isSelf && !isSecondary) {\n\t\t\t\t\t\tthis.battle.runEvent('Hit', target, pokemon, move);\n\t\t\t\t\t}\n\t\t\t\t\tif (moveData.onAfterHit) hitResult = this.battle.singleEvent('AfterHit', moveData, {}, target, pokemon, move);\n\t\t\t\t}\n\n\t\t\t\tif (!hitResult && !didSomething && !moveData.self && !moveData.selfdestruct) {\n\t\t\t\t\tif (!isSelf && !isSecondary) {\n\t\t\t\t\t\tif (hitResult === false || didSomething === false) this.battle.add('-fail', target);\n\t\t\t\t\t}\n\t\t\t\t\tthis.battle.debug('move failed because it did nothing');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (moveData.self) {\n\t\t\t\t// This is done solely to mimic in-game RNG behaviour. All self drops have a 100% chance of happening but still grab a random number.\n\t\t\t\tif (!isSecondary && moveData.self.boosts) this.battle.random(100);\n\t\t\t\tthis.moveHit(pokemon, pokemon, move, moveData.self, isSecondary, true);\n\t\t\t}\n\t\t\t// Secondary effects don't happen if the target faints from the attack\n\t\t\tif (target?.hp && moveData.secondaries && this.battle.runEvent('TrySecondaryHit', target, pokemon, moveData)) {\n\t\t\t\tfor (const secondary of moveData.secondaries) {\n\t\t\t\t\t// We check here whether to negate the probable secondary status if it's burn or freeze.\n\t\t\t\t\t// In the game, this is checked and if true, the random number generator is not called.\n\t\t\t\t\t// That means that a move that does not share the type of the target can status it.\n\t\t\t\t\t// This means tri-attack can burn fire-types and freeze ice-types.\n\t\t\t\t\t// Unlike gen 1, though, paralysis works for all unless the target is immune to direct move (ie. ground-types and t-wave).\n\t\t\t\t\tif (secondary.status && ['brn', 'frz'].includes(secondary.status) && target.hasType(move.type)) {\n\t\t\t\t\t\tthis.battle.debug('Target immune to [' + secondary.status + ']');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// A sleeping or frozen target cannot be flinched in Gen 2; King's Rock is exempt\n\t\t\t\t\tif (secondary.volatileStatus === 'flinch' && ['slp', 'frz'].includes(target.status) && !secondary.kingsrock) {\n\t\t\t\t\t\tthis.battle.debug('Cannot flinch a sleeping or frozen target');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// Multi-hit moves only roll for status once\n\t\t\t\t\tif (!move.multihit || move.lastHit) {\n\t\t\t\t\t\tconst effectChance = Math.floor((secondary.chance || 100) * 255 / 100);\n\t\t\t\t\t\tif (typeof secondary.chance === 'undefined' || this.battle.randomChance(effectChance, 256)) {\n\t\t\t\t\t\t\tthis.moveHit(target, pokemon, move, secondary, true, isSelf);\n\t\t\t\t\t\t} else if (effectChance === 255) {\n\t\t\t\t\t\t\tthis.battle.hint(\"In Gen 2, moves with a 100% secondary effect chance will not trigger in 1/256 uses.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (target && target.hp > 0 && pokemon.hp > 0 && moveData.forceSwitch && this.battle.canSwitch(target.side)) {\n\t\t\t\thitResult = this.battle.runEvent('DragOut', target, pokemon, move);\n\t\t\t\tif (hitResult) {\n\t\t\t\t\tthis.dragIn(target.side, target.position);\n\t\t\t\t} else if (hitResult === false) {\n\t\t\t\t\tthis.battle.add('-fail', target);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (move.selfSwitch && pokemon.hp) {\n\t\t\t\tpokemon.switchFlag = move.id;\n\t\t\t}\n\t\t\treturn damage;\n\t\t},\n\t\tgetDamage(source, target, move, suppressMessages) {\n\t\t\t// First of all, we get the move.\n\t\t\tif (typeof move === 'string') {\n\t\t\t\tmove = this.dex.getActiveMove(move);\n\t\t\t} else if (typeof move === 'number') {\n\t\t\t\tmove = {\n\t\t\t\t\tbasePower: move,\n\t\t\t\t\ttype: '???',\n\t\t\t\t\tcategory: 'Physical',\n\t\t\t\t\twillCrit: false,\n\t\t\t\t\tflags: {},\n\t\t\t\t} as unknown as ActiveMove;\n\t\t\t}\n\n\t\t\t// Let's test for immunities.\n\t\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\n\t\t\t\tif (!target.runImmunity(move.type, true)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Is it an OHKO move?\n\t\t\tif (move.ohko) {\n\t\t\t\treturn target.maxhp;\n\t\t\t}\n\n\t\t\t// We edit the damage through move's damage callback\n\t\t\tif (move.damageCallback) {\n\t\t\t\treturn move.damageCallback.call(this.battle, source, target);\n\t\t\t}\n\n\t\t\t// We take damage from damage=level moves\n\t\t\tif (move.damage === 'level') {\n\t\t\t\treturn source.level;\n\t\t\t}\n\n\t\t\t// If there's a fix move damage, we run it\n\t\t\tif (move.damage) {\n\t\t\t\treturn move.damage;\n\t\t\t}\n\n\t\t\t// We check the category and typing to calculate later on the damage\n\t\t\tmove.category = this.battle.getCategory(move);\n\t\t\t// '???' is typeless damage: used for Struggle and Confusion etc\n\t\t\tif (!move.type) move.type = '???';\n\t\t\tconst type = move.type;\n\n\t\t\t// We get the base power and apply basePowerCallback if necessary\n\t\t\tlet basePower: number | false | null | undefined = move.basePower;\n\t\t\tif (move.basePowerCallback) {\n\t\t\t\tbasePower = move.basePowerCallback.call(this.battle, source, target, move);\n\t\t\t}\n\n\t\t\t// We check for Base Power\n\t\t\tif (!basePower) {\n\t\t\t\tif (basePower === 0) return; // Returning undefined means not dealing damage\n\t\t\t\treturn basePower;\n\t\t\t}\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\n\n\t\t\t// Checking for the move's Critical Hit ratio\n\t\t\tlet critRatio = this.battle.runEvent('ModifyCritRatio', source, target, move, move.critRatio || 0);\n\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 5);\n\t\t\tconst critMult = [0, 16, 8, 4, 3, 2];\n\t\t\tlet isCrit = move.willCrit || false;\n\t\t\tif (typeof move.willCrit === 'undefined') {\n\t\t\t\tif (critRatio) {\n\t\t\t\t\tisCrit = this.battle.randomChance(1, critMult[critRatio]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCrit && this.battle.runEvent('CriticalHit', target, null, move)) {\n\t\t\t\ttarget.getMoveHitData(move).crit = true;\n\t\t\t}\n\n\t\t\t// Happens after crit calculation\n\t\t\tif (basePower) {\n\t\t\t\t// confusion damage\n\t\t\t\tif (move.isConfusionSelfHit) {\n\t\t\t\t\tmove.type = move.baseMoveType!;\n\t\t\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\n\t\t\t\t\tmove.type = '???';\n\t\t\t\t} else {\n\t\t\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\n\t\t\t\t}\n\t\t\t\tif (basePower && move.basePowerModifier) {\n\t\t\t\t\tbasePower *= move.basePowerModifier;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!basePower) return 0;\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\n\n\t\t\t// We now check for attacker and defender\n\t\t\tlet level = source.level;\n\n\t\t\t// Using Beat Up\n\t\t\tif (move.allies) {\n\t\t\t\tthis.battle.add('-activate', source, 'move: Beat Up', '[of] ' + move.allies[0].name);\n\t\t\t\tlevel = move.allies[0].level;\n\t\t\t}\n\n\t\t\tconst attacker = move.overrideOffensivePokemon === 'target' ? target : source;\n\t\t\tconst defender = move.overrideDefensivePokemon === 'source' ? source : target;\n\n\t\t\tconst isPhysical = move.category === 'Physical';\n\t\t\tconst atkType: StatIDExceptHP = move.overrideOffensiveStat || (isPhysical ? 'atk' : 'spa');\n\t\t\tconst defType: StatIDExceptHP = move.overrideDefensiveStat || (isPhysical ? 'def' : 'spd');\n\n\t\t\tlet unboosted = false;\n\t\t\tlet noburndrop = false;\n\n\t\t\tif (isCrit) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-crit', target);\n\t\t\t\t// Stat level modifications are ignored if they are neutral to or favour the defender.\n\t\t\t\t// Reflect and Light Screen defensive boosts are only ignored if stat level modifications were also ignored as a result of that.\n\t\t\t\tif (attacker.boosts[atkType] <= defender.boosts[defType]) {\n\t\t\t\t\tunboosted = true;\n\t\t\t\t\tnoburndrop = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet attack = attacker.getStat(atkType, unboosted, noburndrop);\n\t\t\tlet defense = defender.getStat(defType, unboosted);\n\n\t\t\t// Using Beat Up\n\t\t\tif (move.allies) {\n\t\t\t\tattack = move.allies[0].species.baseStats.atk;\n\t\t\t\tmove.allies.shift();\n\t\t\t\tdefense = defender.species.baseStats.def;\n\t\t\t}\n\n\t\t\t// Moves that ignore offense and defense respectively.\n\t\t\tif (move.ignoreOffensive) {\n\t\t\t\tthis.battle.debug('Negating (sp)atk boost/penalty.');\n\t\t\t\t// The attack drop from the burn is only applied when attacker's attack level is higher than defender's defense level.\n\t\t\t\tattack = attacker.getStat(atkType, true, true);\n\t\t\t}\n\n\t\t\tif (move.ignoreDefensive) {\n\t\t\t\tthis.battle.debug('Negating (sp)def boost/penalty.');\n\t\t\t\tdefense = target.getStat(defType, true, true);\n\t\t\t}\n\n\t\t\tif (move.id === 'present') {\n\t\t\t\tconst typeIndexes: {[k: string]: number} = {\n\t\t\t\t\tNormal: 0, Fighting: 1, Flying: 2, Poison: 3, Ground: 4, Rock: 5, Bug: 7, Ghost: 8, Steel: 9,\n\t\t\t\t\tFire: 20, Water: 21, Grass: 22, Electric: 23, Psychic: 24, Ice: 25, Dragon: 26, Dark: 27,\n\t\t\t\t};\n\t\t\t\tattack = 10;\n\n\t\t\t\tconst attackerLastType = attacker.getTypes().slice(-1)[0];\n\t\t\t\tconst defenderLastType = defender.getTypes().slice(-1)[0];\n\n\t\t\t\tdefense = typeIndexes[attackerLastType] || 1;\n\t\t\t\tlevel = typeIndexes[defenderLastType] || 1;\n\t\t\t\tthis.battle.hint(\"Gen 2 Present has a glitched damage calculation using the secondary types of the Pokemon for the Attacker's Level and Defender's Defense.\", true);\n\t\t\t}\n\n\t\t\t// When either attack or defense are higher than 256, they are both divided by 4 and modded by 256.\n\t\t\t// This is what causes the rollover bugs.\n\t\t\tif (attack >= 256 || defense >= 256) {\n\t\t\t\tif (attack >= 1024 || defense >= 1024) {\n\t\t\t\t\tthis.battle.hint(\"In Gen 2, a stat will roll over to a small number if it is larger than 1024.\");\n\t\t\t\t}\n\t\t\t\tattack = this.battle.clampIntRange(Math.floor(attack / 4) % 256, 1);\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 4) % 256, 1);\n\t\t\t}\n\n\t\t\t// Self destruct moves halve defense at this point.\n\t\t\tif (move.selfdestruct && defType === 'def') {\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 2), 1);\n\t\t\t}\n\n\t\t\t// Let's go with the calculation now that we have what we need.\n\t\t\t// We do it step by step just like the game does.\n\t\t\tlet damage = level * 2;\n\t\t\tdamage = Math.floor(damage / 5);\n\t\t\tdamage += 2;\n\t\t\tdamage *= basePower;\n\t\t\tdamage *= attack;\n\t\t\tdamage = Math.floor(damage / defense);\n\t\t\tdamage = Math.floor(damage / 50);\n\t\t\tif (isCrit) damage *= 2;\n\t\t\tdamage = Math.floor(this.battle.runEvent('ModifyDamage', attacker, defender, move, damage));\n\t\t\tdamage = this.battle.clampIntRange(damage, 1, 997);\n\t\t\tdamage += 2;\n\n\t\t\t// Weather modifiers\n\t\t\tif (\n\t\t\t\t(type === 'Water' && this.battle.field.isWeather('raindance')) ||\n\t\t\t\t(type === 'Fire' && this.battle.field.isWeather('sunnyday'))\n\t\t\t) {\n\t\t\t\tdamage = Math.floor(damage * 1.5);\n\t\t\t} else if (\n\t\t\t\t((type === 'Fire' || move.id === 'solarbeam') && this.battle.field.isWeather('raindance')) ||\n\t\t\t\t(type === 'Water' && this.battle.field.isWeather('sunnyday'))\n\t\t\t) {\n\t\t\t\tdamage = Math.floor(damage / 2);\n\t\t\t}\n\n\t\t\t// STAB damage bonus, the \"???\" type never gets STAB\n\t\t\tif (type !== '???' && source.hasType(type)) {\n\t\t\t\tdamage += Math.floor(damage / 2);\n\t\t\t}\n\n\t\t\t// Type effectiveness\n\t\t\tconst totalTypeMod = target.runEffectiveness(move);\n\t\t\t// Super effective attack\n\t\t\tif (totalTypeMod > 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\n\t\t\t\tdamage *= 2;\n\t\t\t\tif (totalTypeMod >= 2) {\n\t\t\t\t\tdamage *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Resisted attack\n\t\t\tif (totalTypeMod < 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\n\t\t\t\tdamage = Math.floor(damage / 2);\n\t\t\t\tif (totalTypeMod <= -2) {\n\t\t\t\t\tdamage = Math.floor(damage / 2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply random factor if damage is greater than 1, except for Flail and Reversal\n\t\t\tif (!move.noDamageVariance && damage > 1) {\n\t\t\t\tdamage *= this.battle.random(217, 256);\n\t\t\t\tdamage = Math.floor(damage / 255);\n\t\t\t}\n\n\t\t\t// If damage is less than 1, we return 1\n\t\t\tif (basePower && !Math.floor(damage)) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// We are done, this is the final damage\n\t\t\treturn damage;\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
