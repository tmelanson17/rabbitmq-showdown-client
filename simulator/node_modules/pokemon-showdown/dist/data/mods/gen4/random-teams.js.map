{
  "version": 3,
  "sources": ["../../../../data/mods/gen4/random-teams.ts"],
  "sourcesContent": ["import RandomGen5Teams from '../gen5/random-teams';\nimport {Utils} from '../../../lib';\nimport {toID} from '../../../sim/dex';\nimport {PRNG} from '../../../sim';\nimport type {MoveCounter, OldRandomBattleSpecies} from '../gen8/random-teams';\n\n\n// These moves can be used even if we aren't setting up to use them:\nconst SetupException = ['dracometeor', 'overheat'];\n\n// Give recovery moves priority over certain other defensive status moves\nconst recoveryMoves = [\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'painsplit', 'recover', 'rest', 'roost',\n\t'slackoff', 'softboiled', 'synthesis', 'wish',\n];\nconst defensiveStatusMoves = ['aromatherapy', 'haze', 'healbell', 'roar', 'whirlwind', 'willowisp', 'yawn'];\nexport class RandomGen4Teams extends RandomGen5Teams {\n\trandomData: {[species: string]: OldRandomBattleSpecies} = require('./random-data.json');\n\n\tconstructor(format: string | Format, prng: PRNG | PRNGSeed | null) {\n\t\tsuper(format, prng);\n\t\tthis.moveEnforcementCheckers = {\n\t\t\tBug: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t(movePool.includes('bugbuzz') || movePool.includes('megahorn'))\n\t\t\t),\n\t\t\tDark: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('damage') &&\n\t\t\t\t(!counter.get('Dark') || (counter.get('Dark') < 2 && moves.has('pursuit') && movePool.includes('suckerpunch')))),\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => !counter.get('Dragon'),\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('Fighting') &&\n\t\t\t\t(!!counter.setupType || !counter.get('Status') || movePool.includes('closecombat') || movePool.includes('highjumpkick'))\n\t\t\t),\n\t\t\tFire: (movePool, moves, abilities, types, counter) => !counter.get('Fire'),\n\t\t\tFlying: (movePool, moves, abilities, types, counter) => !counter.get('Flying') && (\n\t\t\t\t(counter.setupType !== 'Special' && movePool.includes('bravebird')) ||\n\t\t\t\t(abilities.has('Serene Grace') && movePool.includes('airslash'))\n\t\t\t),\n\t\t\tGrass: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('Grass') &&\n\t\t\t\t['leafblade', 'leafstorm', 'seedflare', 'woodhammer'].some(m => movePool.includes(m))\n\t\t\t),\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\n\t\t\tIce: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('Ice') && (!types.has('Water') || !counter.get('Water'))\n\t\t\t),\n\t\t\tRock: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('Rock') && (movePool.includes('headsmash') || movePool.includes('stoneedge'))\n\t\t\t),\n\t\t\tSteel: (movePool, moves, abilities, types, counter) => !counter.get('Steel') && movePool.includes('meteormash'),\n\t\t\tWater: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('Water') && (moves.has('raindance') || !types.has('Ice') || !counter.get('Ice'))\n\t\t\t),\n\t\t\tAdaptability: (movePool, moves, abilities, types, counter, species) => (\n\t\t\t\t!counter.setupType &&\n\t\t\t\tspecies.types.length > 1 &&\n\t\t\t\t(!counter.get(species.types[0]) || !counter.get(species.types[1]))\n\t\t\t),\n\t\t\tGuts: (movePool, moves, abilities, types) => types.has('Normal') && movePool.includes('facade'),\n\t\t\t'Slow Start': movePool => movePool.includes('substitute'),\n\t\t\tprotect: movePool => movePool.includes('wish'),\n\t\t\twish: movePool => movePool.includes('protect'),\n\t\t};\n\t}\n\tshouldCullMove(\n\t\tmove: Move,\n\t\ttypes: Set<string>,\n\t\tmoves: Set<string>,\n\t\tabilities: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tmovePool: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t): {cull: boolean, isSetup?: boolean} {\n\t\tconst restTalk = moves.has('rest') && moves.has('sleeptalk');\n\n\t\tswitch (move.id) {\n\t\t// Not very useful without their supporting moves\n\t\tcase 'batonpass':\n\t\t\treturn {cull: !counter.setupType && !counter.get('speedsetup') && !moves.has('substitute')};\n\t\tcase 'eruption': case 'waterspout':\n\t\t\treturn {cull: counter.get('Physical') + counter.get('Special') < 4};\n\t\tcase 'focuspunch':\n\t\t\treturn {cull: !moves.has('substitute') || counter.damagingMoves.size < 2 || moves.has('hammerarm')};\n\t\tcase 'lightscreen':\n\t\t\tif (movePool.length > 1) {\n\t\t\t\tconst screen = movePool.indexOf('reflect');\n\t\t\t\tif (screen >= 0) {\n\t\t\t\t\tthis.fastPop(movePool, screen);\n\t\t\t\t\treturn {cull: true};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {cull: false};\n\t\tcase 'raindance':\n\t\t\treturn {cull: abilities.has('Hydration') ? !moves.has('rest') : counter.get('Physical') + counter.get('Special') < 2};\n\t\tcase 'reflect':\n\t\t\tif (movePool.length > 1) {\n\t\t\t\tconst screen = movePool.indexOf('lightscreen');\n\t\t\t\tif (screen >= 0) {\n\t\t\t\t\tthis.fastPop(movePool, screen);\n\t\t\t\t\treturn {cull: true};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {cull: false};\n\t\tcase 'refresh':\n\t\t\treturn {cull: !(moves.has('calmmind') && (moves.has('recover') || moves.has('roost')))};\n\t\tcase 'rest':\n\t\t\treturn {cull: movePool.includes('sleeptalk') || (abilities.has('Hydration') && !moves.has('raindance')) ||\n\t\t\t\tmoves.has('reflect') && moves.has('lightscreen')};\n\t\tcase 'sleeptalk':\n\t\t\tif (movePool.length > 1) {\n\t\t\t\tconst rest = movePool.indexOf('rest');\n\t\t\t\tif (rest >= 0) this.fastPop(movePool, rest);\n\t\t\t}\n\t\t\treturn {cull: !moves.has('rest')};\n\t\tcase 'sunnyday':\n\t\t\treturn {cull: !moves.has('solarbeam')};\n\t\tcase 'weatherball':\n\t\t\treturn {cull: !moves.has('raindance') && !moves.has('sunnyday')};\n\n\t\t// Set up once and only if we have the moves for it\n\t\tcase 'bellydrum': case 'bulkup': case 'curse': case 'dragondance': case 'swordsdance':\n\t\t\tconst notEnoughPhysicalMoves = (\n\t\t\t\tcounter.get('Physical') + counter.get('physicalpool') < 2 &&\n\t\t\t\t!moves.has('batonpass') &&\n\t\t\t\t(!moves.has('rest') || !moves.has('sleeptalk'))\n\t\t\t);\n\t\t\tconst badPhysicalMoveset = counter.setupType !== 'Physical' || counter.get('physicalsetup') > 1;\n\t\t\treturn {cull: moves.has('sunnyday') || notEnoughPhysicalMoves || badPhysicalMoveset, isSetup: true};\n\t\tcase 'calmmind': case 'nastyplot': case 'tailglow':\n\t\t\tconst notEnoughSpecialMoves = (\n\t\t\t\tcounter.get('Special') + counter.get('specialpool') < 2 &&\n\t\t\t\t!moves.has('batonpass') &&\n\t\t\t\t(!moves.has('rest') || !moves.has('sleeptalk'))\n\t\t\t);\n\t\t\tconst badSpecialMoveset = counter.setupType !== 'Special' || counter.get('specialsetup') > 1;\n\t\t\treturn {cull: notEnoughSpecialMoves || badSpecialMoveset, isSetup: true};\n\t\tcase 'agility': case 'rockpolish':\n\t\t\treturn {cull: restTalk || (counter.damagingMoves.size < 2 && !moves.has('batonpass')), isSetup: !counter.setupType};\n\n\t\t// Bad after setup\n\t\tcase 'destinybond':\n\t\t\treturn {cull: !!counter.setupType || moves.has('explosion')};\n\t\tcase 'explosion': case 'selfdestruct':\n\t\t\treturn {cull: (\n\t\t\t\tcounter.setupType === 'Special' ||\n\t\t\t\tArray.from(moves).some(id => recoveryMoves.includes(id) || defensiveStatusMoves.includes(id)) ||\n\t\t\t\t['batonpass', 'protect', 'substitute'].some(m => moves.has(m))\n\t\t\t)};\n\t\tcase 'foresight': case 'roar': case 'whirlwind':\n\t\t\treturn {cull: !!counter.setupType && !abilities.has('Speed Boost')};\n\t\tcase 'healingwish': case 'lunardance':\n\t\t\treturn {cull: !!counter.setupType || moves.has('rest') || moves.has('substitute')};\n\t\tcase 'protect':\n\t\t\treturn {cull: (\n\t\t\t\t['rest', 'softboiled'].some(m => moves.has(m)) ||\n\t\t\t\t!['Guts', 'Quick Feet', 'Speed Boost'].some(abil => abilities.has(abil)) &&\n\t\t\t\t!['toxic', 'wish'].some(m => moves.has(m))\n\t\t\t)};\n\t\tcase 'wish':\n\t\t\treturn {cull: (\n\t\t\t\t!['batonpass', 'ironhead', 'moonlight', 'protect', 'softboiled', 'uturn'].some(m => moves.has(m)) &&\n\t\t\t\t!movePool.includes('protect')\n\t\t\t)};\n\t\tcase 'moonlight':\n\t\t\treturn {cull: (moves.has('wish') && (moves.has('protect') || movePool.includes('protect')))};\n\t\tcase 'rapidspin':\n\t\t\treturn {cull: !!teamDetails.rapidSpin || (!!counter.setupType && counter.get('Physical') + counter.get('Special') < 2)};\n\t\tcase 'fakeout':\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('substitute')};\n\t\tcase 'spikes':\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('substitute')};\n\t\tcase 'stealthrock':\n\t\t\treturn {cull: (\n\t\t\t\t!!counter.setupType ||\n\t\t\t\t!!counter.get('speedsetup') ||\n\t\t\t\tmoves.has('rest') || moves.has('substitute') ||\n\t\t\t\t!!teamDetails.stealthRock\n\t\t\t)};\n\t\tcase 'switcheroo': case 'trick':\n\t\t\treturn {cull: (\n\t\t\t\tcounter.get('Physical') + counter.get('Special') < 3 ||\n\t\t\t\t!!counter.setupType ||\n\t\t\t\t['fakeout', 'lightscreen', 'reflect', 'suckerpunch', 'trickroom'].some(m => moves.has(m))\n\t\t\t)};\n\t\tcase 'toxic': case 'toxicspikes':\n\t\t\treturn {cull: (\n\t\t\t\t!!counter.setupType || !!counter.get('speedsetup') || !!teamDetails.toxicSpikes || moves.has('willowisp')\n\t\t\t)};\n\t\tcase 'trickroom':\n\t\t\treturn {cull: (\n\t\t\t\t!!counter.setupType ||\n\t\t\t\t!!counter.get('speedsetup') ||\n\t\t\t\tcounter.damagingMoves.size < 2 ||\n\t\t\t\tmoves.has('lightscreen') || moves.has('reflect') ||\n\t\t\t\trestTalk\n\t\t\t)};\n\t\tcase 'uturn':\n\t\t\treturn {cull: (\n\t\t\t\t(abilities.has('Speed Boost') && moves.has('protect')) ||\n\t\t\t\t!!counter.setupType ||\n\t\t\t\t!!counter.get('speedsetup') ||\n\t\t\t\tmoves.has('batonpass') || moves.has('substitute')\n\t\t\t)};\n\n\t\t// Bit redundant to have both\n\t\t// Attacks:\n\t\tcase 'bodyslam': case 'slash':\n\t\t\treturn {cull: moves.has('facade') || moves.has('return')};\n\t\tcase 'bugbite':\n\t\t\treturn {cull: moves.has('uturn')};\n\t\tcase 'doubleedge':\n\t\t\treturn {cull: ['bodyslam', 'facade', 'return'].some(m => moves.has(m))};\n\t\tcase 'endeavor':\n\t\t\treturn {cull: !isLead};\n\t\tcase 'facade':\n\t\t\treturn {cull: moves.has('substitute')};\n\t\tcase 'headbutt':\n\t\t\treturn {cull: !moves.has('bodyslam') && !moves.has('thunderwave')};\n\t\tcase 'swift':\n\t\t\treturn {cull: counter.setupType !== 'Special'};\n\t\tcase 'quickattack':\n\t\t\treturn {cull: moves.has('thunderwave')};\n\t\tcase 'firepunch': case 'flamethrower':\n\t\t\treturn {cull: moves.has('fireblast') || moves.has('overheat') && !counter.setupType};\n\t\tcase 'flareblitz':\n\t\t\treturn {cull: moves.has('superpower') && !!counter.get('speedsetup')};\n\t\tcase 'lavaplume': case 'fireblast':\n\t\t\tif (move.id === 'fireblast' && moves.has('lavaplume') && !counter.get('speedsetup')) return {cull: true};\n\t\t\tif (move.id === 'lavaplume' && moves.has('fireblast') && counter.get('speedsetup')) return {cull: true};\n\t\t\tif (moves.has('flareblitz') && counter.setupType !== 'Special' &&\n\t\t\t\t(!moves.has('superpower') || !counter.get('speedsetup'))) return {cull: true};\n\t\t\tbreak;\n\t\tcase 'overheat':\n\t\t\treturn {cull: counter.setupType === 'Special' || ['batonpass', 'fireblast', 'flareblitz'].some(m => moves.has(m))};\n\t\tcase 'aquajet':\n\t\t\treturn {cull: moves.has('dragondance') || (moves.has('waterfall') && counter.get('Physical') < 3)};\n\t\tcase 'hydropump':\n\t\t\treturn {cull: moves.has('surf')};\n\t\tcase 'waterfall':\n\t\t\treturn {cull: (\n\t\t\t\tmoves.has('aquatail') ||\n\t\t\t\t(counter.setupType !== 'Physical' && (moves.has('hydropump') || moves.has('surf')))\n\t\t\t)};\n\t\tcase 'chargebeam':\n\t\t\treturn {cull: moves.has('thunderbolt') && counter.get('Special') < 3};\n\t\tcase 'discharge':\n\t\t\treturn {cull: moves.has('thunderbolt') || moves.has('shadowball')};\n\t\tcase 'energyball':\n\t\t\treturn {cull: (\n\t\t\t\tmoves.has('woodhammer') ||\n\t\t\t\t(moves.has('sunnyday') && moves.has('solarbeam')) ||\n\t\t\t\t(moves.has('leafstorm') && counter.get('Physical') + counter.get('Special') < 4)\n\t\t\t)};\n\t\tcase 'grassknot': case 'leafblade': case 'seedbomb':\n\t\t\treturn {cull: moves.has('woodhammer') || (moves.has('sunnyday') && moves.has('solarbeam'))};\n\t\tcase 'leafstorm':\n\t\t\treturn {cull: (\n\t\t\t\t!!counter.setupType ||\n\t\t\t\tmoves.has('batonpass') ||\n\t\t\t\tmoves.has('powerwhip') ||\n\t\t\t\tmoves.has('leafblade') ||\n\t\t\t\t(moves.has('sunnyday') && moves.has('solarbeam'))\n\t\t\t)};\n\t\tcase 'solarbeam':\n\t\t\treturn {cull: counter.setupType === 'Physical' || !moves.has('sunnyday')};\n\t\tcase 'icepunch':\n\t\t\treturn {cull: !counter.setupType && moves.has('icebeam')};\n\t\tcase 'aurasphere': case 'drainpunch': case 'focusblast':\n\t\t\treturn {cull: moves.has('closecombat') && counter.setupType !== 'Special'};\n\t\tcase 'brickbreak': case 'closecombat': case 'crosschop': case 'lowkick':\n\t\t\treturn {cull: moves.has('substitute') && moves.has('focuspunch')};\n\t\tcase 'machpunch':\n\t\t\treturn {cull: (counter.damagingMoves.size <= counter.get('Fighting'))};\n\t\tcase 'seismictoss':\n\t\t\treturn {cull: moves.has('nightshade') || counter.get('Physical') + counter.get('Special') >= 1};\n\t\tcase 'superpower':\n\t\t\treturn {cull: moves.has('dragondance') || !!counter.get('speedsetup') && !types.has('Fighting')};\n\t\tcase 'gunkshot':\n\t\t\treturn {cull: moves.has('poisonjab')};\n\t\tcase 'earthpower':\n\t\t\treturn {cull: moves.has('earthquake')};\n\t\tcase 'airslash':\n\t\t\treturn {cull: !counter.setupType && moves.has('bravebird')};\n\t\tcase 'zenheadbutt':\n\t\t\treturn {cull: moves.has('psychocut')};\n\t\tcase 'rockblast': case 'rockslide':\n\t\t\treturn {cull: moves.has('stoneedge')};\n\t\tcase 'shadowclaw': case 'shadowsneak':\n\t\t\treturn {cull: moves.has('suckerpunch') && !types.has('Ghost')};\n\t\tcase 'dracometeor':\n\t\t\treturn {cull: moves.has('calmmind') || restTalk || (!!counter.setupType && counter.get('stab') < 2)};\n\t\tcase 'dragonclaw':\n\t\t\treturn {cull: moves.has('outrage')};\n\t\tcase 'dragonpulse':\n\t\t\treturn {cull: moves.has('dracometeor') || moves.has('outrage')};\n\t\tcase 'crunch': case 'nightslash':\n\t\t\treturn {cull: moves.has('suckerpunch') && !types.has('Dark')};\n\t\tcase 'pursuit':\n\t\t\treturn {cull: !!counter.setupType || moves.has('payback')};\n\t\tcase 'flashcannon':\n\t\t\treturn {cull: (moves.has('ironhead') || movePool.includes('ironhead')) && counter.setupType !== 'Special'};\n\n\t\t// Status:\n\t\tcase 'encore':\n\t\t\treturn {cull: ['roar', 'taunt', 'whirlwind'].some(m => moves.has(m)) || restTalk};\n\t\tcase 'haze': case 'taunt':\n\t\t\treturn {cull: restTalk};\n\t\tcase 'healbell':\n\t\t\t// Ampharos doesn't want both\n\t\t\treturn {cull: moves.has('reflect') && moves.has('lightscreen')};\n\t\tcase 'leechseed': case 'painsplit':\n\t\t\treturn {cull: !!counter.setupType || !!counter.get('speedsetup') || moves.has('rest')};\n\t\tcase 'recover': case 'slackoff':\n\t\t\treturn {cull: restTalk};\n\t\tcase 'stunspore':\n\t\t\treturn {cull: (\n\t\t\t\t!!counter.setupType ||\n\t\t\t\tmoves.has('toxic') ||\n\t\t\t\tmovePool.includes('sleeppowder') ||\n\t\t\t\tmovePool.includes('spore')\n\t\t\t)};\n\t\tcase 'substitute':\n\t\t\treturn {cull: ['lightscreen', 'pursuit', 'rapidspin', 'reflect', 'rest', 'taunt'].some(m => moves.has(m))};\n\t\tcase 'thunderwave':\n\t\t\treturn {cull: (\n\t\t\t\t!!counter.setupType ||\n\t\t\t\tmoves.has('toxic') ||\n\t\t\t\tmoves.has('trickroom') ||\n\t\t\t\t(moves.has('bodyslam') && abilities.has('Serene Grace'))\n\t\t\t)};\n\t\tcase 'yawn':\n\t\t\treturn {cull: moves.has('thunderwave') || moves.has('toxic')};\n\t\t}\n\t\treturn {cull: false};\n\t}\n\n\tshouldCullAbility(\n\t\tability: string,\n\t\ttypes: Set<string>,\n\t\tmoves: Set<string>,\n\t\tabilities: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tmovePool: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t) {\n\t\tswitch (ability) {\n\t\tcase 'Anger Point': case 'Ice Body': case 'Steadfast': case 'Unaware':\n\t\t\treturn true;\n\t\tcase 'Blaze':\n\t\t\treturn !counter.get('Fire');\n\t\tcase 'Chlorophyll':\n\t\t\treturn !moves.has('sunnyday') && !teamDetails.sun;\n\t\tcase 'Compound Eyes': case 'No Guard':\n\t\t\treturn !counter.get('inaccurate');\n\t\tcase 'Early Bird':\n\t\t\treturn !moves.has('rest');\n\t\tcase 'Gluttony':\n\t\t\treturn !moves.has('bellydrum');\n\t\tcase 'Hustle':\n\t\t\treturn counter.get('Physical') < 2;\n\t\tcase 'Mold Breaker':\n\t\t\treturn !moves.has('earthquake');\n\t\tcase 'Overgrow':\n\t\t\treturn !counter.get('Grass');\n\t\tcase 'Reckless': case 'Rock Head':\n\t\t\treturn !counter.get('recoil');\n\t\tcase 'Sand Veil':\n\t\t\treturn !teamDetails.sand;\n\t\tcase 'Serene Grace':\n\t\t\treturn !counter.get('serenegrace') || species.id === 'blissey';\n\t\tcase 'Simple':\n\t\t\treturn !counter.setupType && !moves.has('cosmicpower');\n\t\tcase 'Skill Link':\n\t\t\treturn !counter.get('skilllink');\n\t\tcase 'Snow Cloak':\n\t\t\treturn !teamDetails.hail;\n\t\tcase 'Solar Power':\n\t\t\treturn !counter.get('Special') || !moves.has('sunnyday') && !teamDetails.sun;\n\t\tcase 'Speed Boost':\n\t\t\treturn moves.has('uturn');\n\t\tcase 'Swift Swim':\n\t\t\treturn !moves.has('raindance') && !teamDetails.rain;\n\t\tcase 'Swarm':\n\t\t\treturn !counter.get('Bug');\n\t\tcase 'Synchronize':\n\t\t\treturn counter.get('Status') < 2;\n\t\tcase 'Technician':\n\t\t\treturn !counter.get('technician') || moves.has('toxic');\n\t\tcase 'Thick Fat':\n\t\t\treturn (moves.has('facade') || moves.has('fakeout')) && abilities.has('Guts');\n\t\tcase 'Tinted Lens':\n\t\t\treturn moves.has('protect');\n\t\tcase 'Torrent':\n\t\t\treturn !counter.get('Water');\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetHighPriorityItem(\n\t\tability: string,\n\t\ttypes: Set<string>,\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t): string | undefined {\n\t\tif (species.requiredItem) return species.requiredItem;\n\t\tif (species.requiredItems) return this.sample(species.requiredItems);\n\t\tif (species.name === 'Ditto') return this.sample(['Salac Berry', 'Sitrus Berry']);\n\t\tif (species.name === 'Farfetch\\u2019d' && counter.get('Physical') < 4) return 'Stick';\n\t\tif (species.name === 'Marowak') return 'Thick Club';\n\t\tif (species.name === 'Pikachu') return 'Light Ball';\n\t\tif (species.name === 'Shedinja' || species.name === 'Smeargle') return 'Focus Sash';\n\t\tif (species.name === 'Unown') return 'Choice Specs';\n\t\tif (species.name === 'Wobbuffet') {\n\t\t\treturn moves.has('destinybond') ? 'Custap Berry' : this.sample(['Leftovers', 'Sitrus Berry']);\n\t\t}\n\n\t\tif (moves.has('switcheroo') || moves.has('trick')) {\n\t\t\tif (\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\t!counter.get('priority') &&\n\t\t\t\tthis.randomChance(2, 3)\n\t\t\t) {\n\t\t\t\treturn 'Choice Scarf';\n\t\t\t} else {\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\n\t\t\t}\n\t\t}\n\t\tif (moves.has('bellydrum')) return 'Sitrus Berry';\n\t\tif (ability === 'Magic Guard' || ability === 'Speed Boost' && counter.get('Status') < 2) return 'Life Orb';\n\t\tif (ability === 'Poison Heal' || ability === 'Toxic Boost') return 'Toxic Orb';\n\n\t\tif (moves.has('rest') && !moves.has('sleeptalk') && ability !== 'Natural Cure' && ability !== 'Shed Skin') {\n\t\t\treturn (moves.has('raindance') && ability === 'Hydration') ? 'Damp Rock' : 'Chesto Berry';\n\t\t}\n\t\tif (moves.has('raindance') && ability === 'Swift Swim' && counter.get('Status') < 2) return 'Life Orb';\n\t\tif (moves.has('sunnyday')) return (ability === 'Chlorophyll' && counter.get('Status') < 2) ? 'Life Orb' : 'Heat Rock';\n\t\tif (moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\n\t\tif ((ability === 'Guts' || ability === 'Quick Feet') && moves.has('facade')) return 'Toxic Orb';\n\t\tif (ability === 'Unburden') return 'Sitrus Berry';\n\t\tif (species.baseStats.hp + species.baseStats.def + species.baseStats.spd <= 150) {\n\t\t\treturn isLead ? 'Focus Sash' : 'Life Orb';\n\t\t}\n\t\tif (moves.has('endeavor')) return 'Focus Sash';\n\t}\n\n\tgetMediumPriorityItem(\n\t\tability: string,\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tspecies: Species,\n\t\tisDoubles: boolean,\n\t\tisLead: boolean\n\t): string | undefined {\n\t\tif (\n\t\t\tability === 'Slow Start' ||\n\t\t\t['curse', 'leechseed', 'protect', 'roar', 'sleeptalk', 'whirlwind'].some(m => moves.has(m)) ||\n\t\t\t(ability === 'Serene Grace' && ['bodyslam', 'headbutt', 'ironhead'].some(m => moves.has(m)))\n\t\t) {\n\t\t\treturn 'Leftovers';\n\t\t}\n\n\t\tif (counter.get('Physical') >= 4 && !moves.has('fakeout') && !moves.has('rapidspin') && !moves.has('suckerpunch')) {\n\t\t\treturn (\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\t!counter.get('priority') && !moves.has('bodyslam') && this.randomChance(2, 3)\n\t\t\t) ? 'Choice Scarf' : 'Choice Band';\n\t\t}\n\n\t\tif (\n\t\t\t(counter.get('Special') >= 4 || (\n\t\t\t\tcounter.get('Special') >= 3 &&\n\t\t\t\t['batonpass', 'uturn', 'waterspout', 'selfdestruct'].some(m => moves.has(m))\n\t\t\t)) &&\n\t\t\t!moves.has('chargebeam')\n\t\t) {\n\t\t\treturn (\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\tability !== 'Speed Boost' && !counter.get('priority') && this.randomChance(2, 3)\n\t\t\t) ? 'Choice Scarf' : 'Choice Specs';\n\t\t}\n\n\t\tif (moves.has('outrage') && counter.setupType) return 'Lum Berry';\n\t\tif (moves.has('substitute')) {\n\t\t\treturn (counter.damagingMoves.size < 2 ||\n\t\t\t\t!counter.get('drain') &&\n\t\t\t\t(counter.damagingMoves.size < 3 || species.baseStats.hp >= 60 || species.baseStats.def + species.baseStats.spd >= 180)\n\t\t\t) ? 'Leftovers' : 'Life Orb';\n\t\t}\n\t\tif (ability === 'Guts') return 'Toxic Orb';\n\t\tif (\n\t\t\tisLead &&\n\t\t\t!counter.get('recoil') &&\n\t\t\t!Array.from(moves).some(id => !!recoveryMoves.includes(id)) &&\n\t\t\tspecies.baseStats.hp + species.baseStats.def + species.baseStats.spd < 225\n\t\t) {\n\t\t\treturn 'Focus Sash';\n\t\t}\n\t\tif (counter.get('Dark') >= 3) return 'Black Glasses';\n\t\tif (counter.damagingMoves.size >= 4) {\n\t\t\treturn (\n\t\t\t\tcounter.get('Normal') || counter.get('Dragon') > 1 || moves.has('chargebeam') || moves.has('suckerpunch')\n\t\t\t) ? 'Life Orb' : 'Expert Belt';\n\t\t}\n\t\tif (counter.damagingMoves.size >= 3 && !moves.has('superfang') && !moves.has('metalburst')) {\n\t\t\tconst totalBulk = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\n\t\t\treturn (\n\t\t\t\tcounter.get('speedsetup') || counter.get('priority') ||\n\t\t\t\tmoves.has('dragondance') || moves.has('trickroom') ||\n\t\t\t\ttotalBulk < 235 ||\n\t\t\t\t(species.baseStats.spe >= 70 && (totalBulk < 260 || (!!counter.get('recovery') && totalBulk < 285)))\n\t\t\t) ? 'Life Orb' : 'Leftovers';\n\t\t}\n\t}\n\n\tgetLowPriorityItem(\n\t\tability: string,\n\t\ttypes: Set<string>,\n\t\tmoves: Set<string>,\n\t\tabilities: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t) {\n\t\tif (types.has('Poison')) return 'Black Sludge';\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 1 || moves.has('roar')) return 'Leftovers';\n\t\tif (counter.get('Status') <= 1 && ['metalburst', 'rapidspin', 'superfang'].every(m => !moves.has(m))) return 'Life Orb';\n\t\treturn 'Leftovers';\n\t}\n\n\trandomSet(\n\t\tspecies: string | Species,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\n\t\tisLead = false\n\t): RandomTeamsTypes.RandomSet {\n\t\tspecies = this.dex.species.get(species);\n\t\tlet forme = species.name;\n\n\t\tif (typeof species.battleOnly === 'string') forme = species.battleOnly;\n\n\t\tif (species.cosmeticFormes) {\n\t\t\tforme = this.sample([species.name].concat(species.cosmeticFormes));\n\t\t}\n\n\t\tconst data = this.randomData[species.id];\n\t\tconst movePool = (data.moves || Object.keys(this.dex.species.getLearnset(species.id)!)).slice();\n\t\tconst rejectedPool: string[] = [];\n\t\tconst moves = new Set<string>();\n\t\tlet ability = '';\n\t\tlet item: string | undefined;\n\t\tconst evs = {hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85};\n\t\tconst ivs: SparseStatsTable = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n\n\t\tconst types = new Set(species.types);\n\n\t\tconst abilities = new Set(Object.values(species.abilities));\n\n\t\tlet availableHP = 0;\n\t\tfor (const setMoveid of movePool) {\n\t\t\tif (setMoveid.startsWith('hiddenpower')) availableHP++;\n\t\t}\n\n\t\tlet counter: MoveCounter;\n\t\tlet hasHiddenPower = false;\n\n\t\tdo {\n\t\t\t// Choose next 4 moves from learnset/viable moves and add them to moves list:\n\t\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\n\t\t\t\tconst moveid = this.sampleNoReplace(movePool);\n\t\t\t\tif (moveid.startsWith('hiddenpower')) {\n\t\t\t\t\tavailableHP--;\n\t\t\t\t\tif (hasHiddenPower) continue;\n\t\t\t\t\thasHiddenPower = true;\n\t\t\t\t}\n\t\t\t\tmoves.add(moveid);\n\t\t\t}\n\n\t\t\twhile (moves.size < this.maxMoveCount && rejectedPool.length) {\n\t\t\t\tconst moveid = this.sampleNoReplace(rejectedPool);\n\t\t\t\tif (moveid.startsWith('hiddenpower')) {\n\t\t\t\t\tif (hasHiddenPower) continue;\n\t\t\t\t\thasHiddenPower = true;\n\t\t\t\t}\n\t\t\t\tmoves.add(moveid);\n\t\t\t}\n\n\t\t\tcounter = this.queryMoves(moves, species.types, abilities, movePool);\n\t\t\tif (types.has('Dark') && moves.has('suckerpunch') && species.types.length === 1) {\n\t\t\t\tcounter.add('stab');\n\t\t\t}\n\n\t\t\t// Iterate through the moves again, this time to cull them:\n\t\t\tfor (const moveid of moves) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\n\t\t\t\tlet {cull, isSetup} = this.shouldCullMove(\n\t\t\t\t\tmove, types, moves, abilities, counter,\n\t\t\t\t\tmovePool, teamDetails, species, isLead\n\t\t\t\t);\n\n\t\t\t\t// Increased/decreased priority moves are unneeded with moves that boost only speed\n\t\t\t\tif (move.priority !== 0 && !!counter.get('speedsetup')) cull = true;\n\n\t\t\t\t// This move doesn't satisfy our setup requirements:\n\t\t\t\tif (\n\t\t\t\t\t(move.category === 'Physical' && counter.setupType === 'Special') ||\n\t\t\t\t\t(move.category === 'Special' && counter.setupType === 'Physical')\n\t\t\t\t) {\n\t\t\t\t\t// Reject STABs last in case the setup type changes later on\n\t\t\t\t\tif (\n\t\t\t\t\t\t!SetupException.includes(moveid) &&\n\t\t\t\t\t\t(!types.has(move.type) || counter.get('stab') > 1 || counter.get(move.category) < 2)\n\t\t\t\t\t) {\n\t\t\t\t\t\tcull = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tcounter.setupType && !isSetup && move.category !== counter.setupType &&\n\t\t\t\t\tcounter.get(counter.setupType) < 2 && !moves.has('batonpass')\n\t\t\t\t) {\n\t\t\t\t\t// Mono-attacking with setup and RestTalk or recovery + status healing is allowed\n\t\t\t\t\tif (\n\t\t\t\t\t\tmoveid !== 'rest' && moveid !== 'sleeptalk' &&\n\t\t\t\t\t\t!(recoveryMoves.includes(moveid) && (moves.has('healbell') || moves.has('refresh'))) &&\n\t\t\t\t\t\t!((moveid === 'healbell' || moveid === 'refresh') && Array.from(moves).some(id => recoveryMoves.includes(id))) && (\n\t\t\t\t\t\t\t// Reject Status moves only if there is nothing else to reject\n\t\t\t\t\t\t\tmove.category !== 'Status' || (\n\t\t\t\t\t\t\t\tcounter.get(counter.setupType) + counter.get('Status') > 3 &&\n\t\t\t\t\t\t\t\tcounter.get('physicalsetup') + counter.get('specialsetup') < 2\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tcull = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\tmoveid === 'hiddenpower' &&\n\t\t\t\t\tcounter.setupType === 'Special' &&\n\t\t\t\t\tspecies.types.length > 1 &&\n\t\t\t\t\tcounter.get('Special') <= 2 &&\n\t\t\t\t\t!types.has(move.type) &&\n\t\t\t\t\t!counter.get('Physical') &&\n\t\t\t\t\tcounter.get('specialpool') &&\n\t\t\t\t\t(!(types.has('Ghost') && move.type === 'Fighting' || types.has('Electric') && move.type === 'Ice'))\n\t\t\t\t) {\n\t\t\t\t\t// Hidden Power isn't good enough\n\t\t\t\t\tcull = true;\n\t\t\t\t}\n\n\t\t\t\t// Reject defensive status moves if a reliable recovery move is available but not selected.\n\t\t\t\t// Toxic is only defensive if used with another status move other than Protect (Toxic + 3 attacks and Toxic + Protect are ok).\n\t\t\t\tif (\n\t\t\t\t\t!Array.from(moves).some(id => recoveryMoves.includes(id)) &&\n\t\t\t\t\tmovePool.some(id => recoveryMoves.includes(id)) && (\n\t\t\t\t\t\tdefensiveStatusMoves.includes(moveid) ||\n\t\t\t\t\t\t(moveid === 'toxic' && ((counter.get('Status') > 1 && !moves.has('protect')) || counter.get('Status') > 2))\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tcull = true;\n\t\t\t\t}\n\n\t\t\t\tconst runEnforcementChecker = (checkerName: string) => {\n\t\t\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\n\t\t\t\t\treturn this.moveEnforcementCheckers[checkerName](\n\t\t\t\t\t\tmovePool, moves, abilities, types, counter, species as Species, teamDetails\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst moveIsRejectable = (\n\t\t\t\t\t!move.weather &&\n\t\t\t\t\t!move.damage &&\n\t\t\t\t\t(move.category !== 'Status' || !move.flags.heal) &&\n\t\t\t\t\t(move.category === 'Status' || !types.has(move.type) || (move.basePower && move.basePower < 40 && !move.multihit)) &&\n\t\t\t\t\t// These moves cannot be rejected in favor of a forced move\n\t\t\t\t\t!['judgment', 'lightscreen', 'reflect', 'sleeptalk'].includes(moveid) &&\n\t\t\t\t\t// Setup-supported moves should only be rejected under specific circumstances\n\t\t\t\t\t(counter.get('physicalsetup') + counter.get('specialsetup') < 2 && (\n\t\t\t\t\t\t!counter.setupType || counter.setupType === 'Mixed' ||\n\t\t\t\t\t\t(move.category !== counter.setupType && move.category !== 'Status') ||\n\t\t\t\t\t\tcounter.get(counter.setupType) + counter.get('Status') > 3\n\t\t\t\t\t))\n\t\t\t\t);\n\n\t\t\t\tif (!cull && !isSetup && moveIsRejectable) {\n\t\t\t\t\t// There may be more important moves that this Pokemon needs\n\t\t\t\t\tconst canRollForcedMoves = (\n\t\t\t\t\t\t// These moves should always be rolled\n\t\t\t\t\t\tmovePool.includes('spore') || (!Array.from(moves).some(id => recoveryMoves.includes(id)) && (\n\t\t\t\t\t\t\tmovePool.includes('softboiled') && !moves.has('explosion') ||\n\t\t\t\t\t\t\t(species.baseSpecies === 'Arceus' && movePool.includes('recover'))\n\t\t\t\t\t\t))\n\t\t\t\t\t);\n\t\t\t\t\t// Pokemon should usually have at least one STAB move\n\t\t\t\t\tconst requiresStab = (\n\t\t\t\t\t\t!counter.get('stab') && !counter.get('damage') && (\n\t\t\t\t\t\t\tspecies.types.length > 1 ||\n\t\t\t\t\t\t\t(species.types[0] !== 'Normal' && species.types[0] !== 'Psychic') ||\n\t\t\t\t\t\t\t!moves.has('icebeam') ||\n\t\t\t\t\t\t\tspecies.baseStats.spa >= species.baseStats.spd\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tif (\n\t\t\t\t\t\tcanRollForcedMoves ||\n\t\t\t\t\t\trequiresStab ||\n\t\t\t\t\t\t(species.requiredMove && movePool.includes(toID(species.requiredMove))) ||\n\t\t\t\t\t\t(counter.get('defensesetup') && !counter.get('recovery') && !moves.has('rest'))\n\t\t\t\t\t) {\n\t\t\t\t\t\tcull = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Pokemon should have moves that benefit their typing or ability\n\t\t\t\t\t\tfor (const type of types) {\n\t\t\t\t\t\t\tif (runEnforcementChecker(type)) cull = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const abil of abilities) {\n\t\t\t\t\t\t\tif (runEnforcementChecker(abil)) cull = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const m of moves) {\n\t\t\t\t\t\t\tif (runEnforcementChecker(m)) cull = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Sleep Talk shouldn't be selected without Rest\n\t\t\t\tif (moveid === 'rest' && cull) {\n\t\t\t\t\tconst sleeptalk = movePool.indexOf('sleeptalk');\n\t\t\t\t\tif (sleeptalk >= 0) {\n\t\t\t\t\t\tif (movePool.length < 2) {\n\t\t\t\t\t\t\tcull = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.fastPop(movePool, sleeptalk);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove rejected moves from the move list\n\t\t\t\tif (cull && (\n\t\t\t\t\tmovePool.length - availableHP || availableHP && (moveid.startsWith('hiddenpower') || !hasHiddenPower)\n\t\t\t\t)) {\n\t\t\t\t\tif (move.category !== 'Status' && (!moveid.startsWith('hiddenpower') || !availableHP)) rejectedPool.push(moveid);\n\t\t\t\t\tmoves.delete(moveid);\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) hasHiddenPower = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (cull && rejectedPool.length) {\n\t\t\t\t\tmoves.delete(moveid);\n\t\t\t\t\tif (moveid.startsWith('hiddenpower')) hasHiddenPower = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (moves.size < this.maxMoveCount && (movePool.length || rejectedPool.length));\n\n\t\tif (hasHiddenPower) {\n\t\t\tlet hpType;\n\t\t\tfor (const move of moves) {\n\t\t\t\tif (move.startsWith('hiddenpower')) {\n\t\t\t\t\thpType = move.substr(11);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!hpType) throw new Error(`hasHiddenPower is true, but no Hidden Power move was found.`);\n\t\t\tconst HPivs = this.dex.types.get(hpType).HPivs;\n\t\t\tlet iv: StatID;\n\t\t\tfor (iv in HPivs) {\n\t\t\t\tivs[iv] = HPivs[iv]!;\n\t\t\t}\n\t\t}\n\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\n\n\t\tlet ability0 = abilityData[0];\n\t\tlet ability1 = abilityData[1];\n\t\tif (abilityData[1]) {\n\t\t\tif (ability0.rating <= ability1.rating && this.randomChance(1, 2)) {\n\t\t\t\t[ability0, ability1] = [ability1, ability0];\n\t\t\t} else if (ability0.rating - 0.6 <= ability1.rating && this.randomChance(2, 3)) {\n\t\t\t\t[ability0, ability1] = [ability1, ability0];\n\t\t\t}\n\t\t\tability = ability0.name;\n\n\t\t\twhile (this.shouldCullAbility(ability, types, moves, abilities, counter, movePool, teamDetails, species)) {\n\t\t\t\tif (ability === ability0.name && ability1.rating >= 1) {\n\t\t\t\t\tability = ability1.name;\n\t\t\t\t} else {\n\t\t\t\t\t// Default to the highest rated ability if all are rejected\n\t\t\t\t\tability = abilityData[0].name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (abilities.has('Hydration') && moves.has('raindance') && moves.has('rest')) {\n\t\t\t\tability = 'Hydration';\n\t\t\t} else if (abilities.has('Swift Swim') && moves.has('raindance')) {\n\t\t\t\tability = 'Swift Swim';\n\t\t\t} else if (abilities.has('Technician') && moves.has('machpunch') && types.has('Fighting') && counter.get('stab') < 2) {\n\t\t\t\tability = 'Technician';\n\t\t\t}\n\t\t} else {\n\t\t\tability = ability0.name;\n\t\t}\n\n\t\titem = this.getHighPriorityItem(ability, types, moves, counter, teamDetails, species, isLead);\n\t\tif (item === undefined) item = this.getMediumPriorityItem(ability, moves, counter, species, false, isLead);\n\t\tif (item === undefined) {\n\t\t\titem = this.getLowPriorityItem(ability, types, moves, abilities, counter, teamDetails, species);\n\t\t}\n\n\t\t// For Trick / Switcheroo\n\t\tif (item === 'Leftovers' && types.has('Poison')) {\n\t\t\titem = 'Black Sludge';\n\t\t}\n\n\t\tconst level = this.adjustLevel || data.level || (species.nfe ? 90 : 80);\n\n\t\t// Prepare optimal HP\n\t\tlet hp = Math.floor(\n\t\t\tMath.floor(\n\t\t\t\t2 * species.baseStats.hp + (ivs.hp || 31) + Math.floor(evs.hp / 4) + 100\n\t\t\t) * level / 100 + 10\n\t\t);\n\t\tif (moves.has('substitute') && item === 'Sitrus Berry') {\n\t\t\t// Two Substitutes should activate Sitrus Berry\n\t\t\twhile (hp % 4 > 0) {\n\t\t\t\tevs.hp -= 4;\n\t\t\t\thp = Math.floor(\n\t\t\t\t\tMath.floor(\n\t\t\t\t\t\t2 * species.baseStats.hp + (ivs.hp || 31) + Math.floor(evs.hp / 4) + 100\n\t\t\t\t\t) * level / 100 + 10\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (moves.has('bellydrum') && item === 'Sitrus Berry') {\n\t\t\t// Belly Drum should activate Sitrus Berry\n\t\t\tif (hp % 2 > 0) evs.hp -= 4;\n\t\t} else {\n\t\t\t// Maximize number of Stealth Rock switch-ins\n\t\t\tconst srWeakness = this.dex.getEffectiveness('Rock', species);\n\t\t\tif (srWeakness > 0 && hp % (4 / srWeakness) === 0) evs.hp -= 4;\n\t\t}\n\n\t\t// Minimize confusion damage\n\t\tif (!counter.get('Physical') && !moves.has('transform')) {\n\t\t\tevs.atk = 0;\n\t\t\tivs.atk = hasHiddenPower ? (ivs.atk || 31) - 28 : 0;\n\t\t}\n\n\t\tif (['gyroball', 'metalburst', 'trickroom'].some(m => moves.has(m))) {\n\t\t\tevs.spe = 0;\n\t\t\tivs.spe = hasHiddenPower ? (ivs.spe || 31) - 28 : 0;\n\t\t}\n\n\t\treturn {\n\t\t\tname: species.baseSpecies,\n\t\t\tspecies: forme,\n\t\t\tgender: species.gender,\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tmoves: Array.from(moves),\n\t\t\tability,\n\t\t\tevs,\n\t\t\tivs,\n\t\t\titem,\n\t\t\tlevel,\n\t\t};\n\t}\n}\n\nexport default RandomGen4Teams;\n"],
  "mappings": "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",
  "names": ["RandomGen5Teams"]
}
