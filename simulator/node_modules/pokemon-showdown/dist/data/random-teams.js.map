{
  "version": 3,
  "sources": ["../../data/random-teams.ts"],
  "sourcesContent": ["import {Dex, toID} from '../sim/dex';\nimport {Utils} from '../lib';\nimport {PRNG, PRNGSeed} from '../sim/prng';\nimport {RuleTable} from '../sim/dex-formats';\nimport {Tags} from './tags';\n\nexport interface TeamData {\n\ttypeCount: {[k: string]: number};\n\ttypeComboCount: {[k: string]: number};\n\tbaseFormes: {[k: string]: number};\n\tmegaCount?: number;\n\tzCount?: number;\n\thas: {[k: string]: number};\n\tforceResult: boolean;\n\tweaknesses: {[k: string]: number};\n\tresistances: {[k: string]: number};\n\tweather?: string;\n\teeveeLimCount?: number;\n\tgigantamax?: boolean;\n}\nexport interface BattleFactorySpecies {\n\tflags: {limEevee?: 1};\n\tsets: BattleFactorySet[];\n}\ninterface BattleFactorySet {\n\tspecies: string;\n\titem: string;\n\tability: string;\n\tnature: string;\n\tmoves: string[];\n\tevs?: Partial<StatsTable>;\n\tivs?: Partial<StatsTable>;\n}\nexport class MoveCounter extends Utils.Multiset<string> {\n\tdamagingMoves: Set<Move>;\n\tstabCounter: number;\n\tironFist: number;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.damagingMoves = new Set();\n\t\tthis.stabCounter = 0;\n\t\tthis.ironFist = 0;\n\t}\n\n\tget(key: string): number {\n\t\treturn super.get(key) || 0;\n\t}\n}\n\ntype MoveEnforcementChecker = (\n\tmovePool: string[], moves: Set<string>, abilities: Set<string>, types: string[],\n\tcounter: MoveCounter, species: Species, teamDetails: RandomTeamsTypes.TeamDetails,\n\tisLead: boolean, isDoubles: boolean, teraType: string, role: string,\n) => boolean;\n\n// Moves that restore HP:\nconst RecoveryMove = [\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\n];\n// Moves that drop stats:\nconst ContraryMoves = [\n\t'armorcannon', 'closecombat', 'leafstorm', 'makeitrain', 'overheat', 'spinout', 'superpower', 'vcreate',\n];\n// Moves that boost Attack:\nconst PhysicalSetup = [\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'swordsdance', 'tidyup', 'victorydance',\n];\n// Moves which boost Special Attack:\nconst SpecialSetup = [\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow', 'torchsong',\n];\n// Moves that boost Attack AND Special Attack:\nconst MixedSetup = [\n\t'clangoroussoul', 'growth', 'happyhour', 'holdhands', 'noretreat', 'shellsmash', 'workup',\n];\n// Some moves that only boost Speed:\nconst SpeedSetup = [\n\t'agility', 'autotomize', 'rockpolish',\n];\n// Conglomerate for ease of access\nconst Setup = [\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'coil', 'curse', 'dragondance', 'flamecharge',\n\t'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'noretreat', 'poweruppunch', 'quiverdance', 'rockpolish',\n\t'shellsmash', 'shiftgear', 'swordsdance', 'tailglow', 'tidyup', 'trailblaze', 'workup', 'victorydance',\n];\n// Moves that shouldn't be the only STAB moves:\nconst NoStab = [\n\t'accelerock', 'aquajet', 'beakblast', 'bounce', 'breakingswipe', 'chatter', 'chloroblast', 'clearsmog', 'dragontail', 'eruption',\n\t'explosion', 'fakeout', 'flamecharge', 'flipturn', 'iceshard', 'icywind', 'incinerate', 'machpunch', 'meteorbeam',\n\t'mortalspin', 'pluck', 'pursuit', 'quickattack', 'rapidspin', 'reversal', 'selfdestruct', 'shadowsneak',\n\t'skydrop', 'snarl', 'suckerpunch', 'uturn', 'watershuriken', 'vacuumwave', 'voltswitch', 'waterspout',\n];\n// Hazard-setting moves\nconst Hazards = [\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\n];\n\n// Moves that should be paired together when possible\nconst MovePairs = [\n\t['lightscreen', 'reflect'],\n\t['sleeptalk', 'rest'],\n\t['protect', 'wish'],\n\t['leechseed', 'protect'],\n];\n\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\nconst priorityPokemon = [\n\t'banette', 'breloom', 'brutebonnet', 'cacturne', 'giratinaorigin', 'lycanrocdusk', 'mimikyu', 'scizor',\n];\n\n/** Pokemon who should never be in the lead slot */\nconst noLeadPokemon = [\n\t'Basculegion', 'Houndstone', 'Rillaboom', 'Zacian', 'Zamazenta',\n];\n\nfunction sereneGraceBenefits(move: Move) {\n\treturn move.secondary?.chance && move.secondary.chance > 20 && move.secondary.chance < 100;\n}\n\nexport class RandomTeams {\n\tdex: ModdedDex;\n\tgen: number;\n\tfactoryTier: string;\n\tformat: Format;\n\tprng: PRNG;\n\tnoStab: string[];\n\treadonly maxTeamSize: number;\n\treadonly adjustLevel: number | null;\n\treadonly maxMoveCount: number;\n\treadonly forceMonotype: string | undefined;\n\n\t/**\n\t * Checkers for move enforcement based on types or other factors\n\t *\n\t * returns true to try to force the move type, false otherwise.\n\t */\n\tmoveEnforcementCheckers: {[k: string]: MoveEnforcementChecker};\n\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\n\t\tformat = Dex.formats.get(format);\n\t\tthis.dex = Dex.forFormat(format);\n\t\tthis.gen = this.dex.gen;\n\t\tthis.noStab = NoStab;\n\n\t\tconst ruleTable = Dex.formats.getRuleTable(format);\n\t\tthis.maxTeamSize = ruleTable.maxTeamSize;\n\t\tthis.adjustLevel = ruleTable.adjustLevel;\n\t\tthis.maxMoveCount = ruleTable.maxMoveCount;\n\t\tconst forceMonotype = ruleTable.valueRules.get('forcemonotype');\n\t\tthis.forceMonotype = forceMonotype && this.dex.types.get(forceMonotype).exists ?\n\t\t\tthis.dex.types.get(forceMonotype).name : undefined;\n\n\t\tthis.factoryTier = '';\n\t\tthis.format = format;\n\t\tthis.prng = prng && !Array.isArray(prng) ? prng : new PRNG(prng);\n\n\t\tthis.moveEnforcementCheckers = {\n\t\t\tBug: (movePool) => movePool.includes('megahorn'),\n\t\t\tDark: (movePool, moves, abilities, types, counter) => !counter.get('Dark'),\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => (\n\t\t\t\t!counter.get('Dragon') &&\n\t\t\t\t!movePool.includes('dualwingbeat')\n\t\t\t),\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\n\t\t\tFairy: (movePool, moves, abilities, types, counter) => !counter.get('Fairy'),\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting'),\n\t\t\tFire: (movePool, moves, abilities, types, counter, species) => !counter.get('Fire'),\n\t\t\tFlying: (movePool, moves, abilities, types, counter) => !counter.get('Flying'),\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !counter.get('Ghost'),\n\t\t\tGrass: (movePool, moves, abilities, types, counter, species) => (\n\t\t\t\t!counter.get('Grass') && (\n\t\t\t\t\tmovePool.includes('leafstorm') || species.baseStats.atk >= 100 ||\n\t\t\t\t\ttypes.includes('Electric') || abilities.has('Seed Sower')\n\t\t\t\t)\n\t\t\t),\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\n\t\t\tIce: (movePool, moves, abilities, types, counter) => (movePool.includes('freezedry') || !counter.get('Ice')),\n\t\t\tNormal: (movePool, moves, types, counter) => (movePool.includes('boomburst') || movePool.includes('hypervoice')),\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => {\n\t\t\t\tif (types.includes('Ground')) return false;\n\t\t\t\treturn !counter.get('Poison');\n\t\t\t},\n\t\t\tPsychic: (movePool, moves, abilities, types, counter) => {\n\t\t\t\tif (counter.get('Psychic')) return false;\n\t\t\t\tif (movePool.includes('calmmind') || movePool.includes('psychicfangs') || movePool.includes('psychocut')) return true;\n\t\t\t\treturn abilities.has('Psychic Surge') || types.includes('Fire') || types.includes('Electric');\n\t\t\t},\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => !counter.get('Rock') && species.baseStats.atk >= 80,\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species) => {\n\t\t\t\tif (species.baseStats.atk <= 95 && !movePool.includes('makeitrain')) return false;\n\t\t\t\treturn !counter.get('Steel');\n\t\t\t},\n\t\t\tWater: (movePool, moves, abilities, types, counter, species) => {\n\t\t\t\tif (types.includes('Ground')) return false;\n\t\t\t\treturn !counter.get('Water');\n\t\t\t},\n\t\t};\n\t}\n\n\tsetSeed(prng?: PRNG | PRNGSeed) {\n\t\tthis.prng = prng && !Array.isArray(prng) ? prng : new PRNG(prng);\n\t}\n\n\tgetTeam(options?: PlayerOptions | null): PokemonSet[] {\n\t\tconst generatorName = (\n\t\t\ttypeof this.format.team === 'string' && this.format.team.startsWith('random')\n\t\t ) ? this.format.team + 'Team' : '';\n\t\t// @ts-ignore\n\t\treturn this[generatorName || 'randomTeam'](options);\n\t}\n\n\trandomChance(numerator: number, denominator: number) {\n\t\treturn this.prng.randomChance(numerator, denominator);\n\t}\n\n\tsample<T>(items: readonly T[]): T {\n\t\treturn this.prng.sample(items);\n\t}\n\n\tsampleIfArray<T>(item: T | T[]): T {\n\t\tif (Array.isArray(item)) {\n\t\t\treturn this.sample(item);\n\t\t}\n\t\treturn item;\n\t}\n\n\trandom(m?: number, n?: number) {\n\t\treturn this.prng.next(m, n);\n\t}\n\n\t/**\n\t * Remove an element from an unsorted array significantly faster\n\t * than .splice\n\t */\n\tfastPop(list: any[], index: number) {\n\t\t// If an array doesn't need to be in order, replacing the\n\t\t// element at the given index with the removed element\n\t\t// is much, much faster than using list.splice(index, 1).\n\t\tconst length = list.length;\n\t\tif (index < 0 || index >= list.length) {\n\t\t\t// sanity check\n\t\t\tthrow new Error(`Index ${index} out of bounds for given array`);\n\t\t}\n\n\t\tconst element = list[index];\n\t\tlist[index] = list[length - 1];\n\t\tlist.pop();\n\t\treturn element;\n\t}\n\n\t/**\n\t * Remove a random element from an unsorted array and return it.\n\t * Uses the battle's RNG if in a battle.\n\t */\n\tsampleNoReplace(list: any[]) {\n\t\tconst length = list.length;\n\t\tif (length === 0) return null;\n\t\tconst index = this.random(length);\n\t\treturn this.fastPop(list, index);\n\t}\n\n\t/**\n\t * Removes n random elements from an unsorted array and returns them.\n\t * If n is less than the array's length, randomly removes and returns all the elements\n\t * in the array (so the returned array could have length < n).\n\t */\n\tmultipleSamplesNoReplace<T>(list: T[], n: number): T[] {\n\t\tconst samples = [];\n\t\twhile (samples.length < n && list.length) {\n\t\t\tsamples.push(this.sampleNoReplace(list));\n\t\t}\n\n\t\treturn samples;\n\t}\n\n\t/**\n\t * Check if user has directly tried to ban/unban/restrict things in a custom battle.\n\t * Doesn't count bans nested inside other formats/rules.\n\t */\n\tprivate hasDirectCustomBanlistChanges() {\n\t\tif (this.format.banlist.length || this.format.restricted.length || this.format.unbanlist.length) return true;\n\t\tif (!this.format.customRules) return false;\n\t\tfor (const rule of this.format.customRules) {\n\t\t\tfor (const banlistOperator of ['-', '+', '*']) {\n\t\t\t\tif (rule.startsWith(banlistOperator)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Inform user when custom bans are unsupported in a team generator.\n\t */\n\tprotected enforceNoDirectCustomBanlistChanges() {\n\t\tif (this.hasDirectCustomBanlistChanges()) {\n\t\t\tthrow new Error(`Custom bans are not currently supported in ${this.format.name}.`);\n\t\t}\n\t}\n\n\t/**\n\t * Inform user when complex bans are unsupported in a team generator.\n\t */\n\tprotected enforceNoDirectComplexBans() {\n\t\tif (!this.format.customRules) return false;\n\t\tfor (const rule of this.format.customRules) {\n\t\t\tif (rule.includes('+') && !rule.startsWith('+')) {\n\t\t\t\tthrow new Error(`Complex bans are not currently supported in ${this.format.name}.`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate set element pool size is sufficient to support size requirements after simple bans.\n\t */\n\tprivate enforceCustomPoolSizeNoComplexBans(\n\t\teffectTypeName: string,\n\t\tbasicEffectPool: BasicEffect[],\n\t\trequiredCount: number,\n\t\trequiredCountExplanation: string\n\t) {\n\t\tif (basicEffectPool.length >= requiredCount) return;\n\t\tthrow new Error(`Legal ${effectTypeName} count is insufficient to support ${requiredCountExplanation} (${basicEffectPool.length} / ${requiredCount}).`);\n\t}\n\n\tqueryMoves(\n\t\tmoves: Set<string> | null,\n\t\tspecies: Species,\n\t\tteraType: string,\n\t\tabilities: Set<string> = new Set(),\n\t): MoveCounter {\n\t\t// This is primarily a helper function for random setbuilder functions.\n\t\tconst counter = new MoveCounter();\n\t\tconst types = species.types;\n\t\tif (!moves?.size) return counter;\n\n\t\tconst categories = {Physical: 0, Special: 0, Status: 0};\n\n\t\t// Iterate through all moves we've chosen so far and keep track of what they do:\n\t\tfor (const moveid of moves) {\n\t\t\tconst move = this.dex.moves.get(moveid);\n\n\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\tif (move.damage || move.damageCallback) {\n\t\t\t\t// Moves that do a set amount of damage:\n\t\t\t\tcounter.add('damage');\n\t\t\t\tcounter.damagingMoves.add(move);\n\t\t\t} else {\n\t\t\t\t// Are Physical/Special/Status moves:\n\t\t\t\tcategories[move.category]++;\n\t\t\t}\n\t\t\t// Moves that have a low base power:\n\t\t\tif (moveid === 'lowkick' || (move.basePower && move.basePower <= 60 && moveid !== 'rapidspin')) {\n\t\t\t\tcounter.add('technician');\n\t\t\t}\n\t\t\t// Moves that hit up to 5 times:\n\t\t\tif (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5) counter.add('skilllink');\n\t\t\tif (move.recoil || move.hasCrashDamage) counter.add('recoil');\n\t\t\tif (move.drain) counter.add('drain');\n\t\t\t// Moves which have a base power, but aren't super-weak:\n\t\t\tif (move.basePower > 30 || move.multihit || move.basePowerCallback) {\n\t\t\t\tif (!this.noStab.includes(moveid) || priorityPokemon.includes(species.id) && move.priority > 0) {\n\t\t\t\t\tcounter.add(moveType);\n\t\t\t\t\tif (types.includes(moveType)) counter.stabCounter++;\n\t\t\t\t\tif (teraType === moveType) counter.add('stabtera');\n\t\t\t\t}\n\t\t\t\tif (move.flags['bite']) counter.add('strongjaw');\n\t\t\t\tif (move.flags['punch']) counter.ironFist++;\n\t\t\t\tif (move.flags['sound']) counter.add('sound');\n\t\t\t\tif (move.priority > 0 || (moveid === 'grassyglide' && abilities.has('Grassy Surge'))) {\n\t\t\t\t\tcounter.add('priority');\n\t\t\t\t}\n\t\t\t\tcounter.damagingMoves.add(move);\n\t\t\t}\n\t\t\t// Moves with secondary effects:\n\t\t\tif (move.secondary || move.hasSheerForce) {\n\t\t\t\tcounter.add('sheerforce');\n\t\t\t\tif (sereneGraceBenefits(move)) {\n\t\t\t\t\tcounter.add('serenegrace');\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Moves with low accuracy:\n\t\t\tif (move.accuracy && move.accuracy !== true && move.accuracy < 90) counter.add('inaccurate');\n\n\t\t\t// Moves that change stats:\n\t\t\tif (RecoveryMove.includes(moveid)) counter.add('recovery');\n\t\t\tif (ContraryMoves.includes(moveid)) counter.add('contrary');\n\t\t\tif (PhysicalSetup.includes(moveid)) counter.add('physicalsetup');\n\t\t\tif (SpecialSetup.includes(moveid)) counter.add('specialsetup');\n\t\t\tif (MixedSetup.includes(moveid)) counter.add('mixedsetup');\n\t\t\tif (SpeedSetup.includes(moveid)) counter.add('speedsetup');\n\t\t\tif (Setup.includes(moveid)) counter.add('setup');\n\t\t\tif (Hazards.includes(moveid)) counter.add('hazards');\n\t\t}\n\n\t\tcounter.set('Physical', Math.floor(categories['Physical']));\n\t\tcounter.set('Special', Math.floor(categories['Special']));\n\t\tcounter.set('Status', categories['Status']);\n\t\treturn counter;\n\t}\n\n\tcullMovePool(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tmovePool: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: string,\n\t): void {\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\n\t\tif (moves.size === this.maxMoveCount - 2) {\n\t\t\tconst unpairedMoves = [...movePool];\n\t\t\tfor (const pair of MovePairs) {\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (unpairedMoves.length === 1) {\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\n\t\t\t}\n\t\t}\n\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\n\t\tif (moves.size === this.maxMoveCount - 1) {\n\t\t\tfor (const pair of MovePairs) {\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Develop additional move lists\n\t\tconst pivotingMoves = ['chillyreception', 'flipturn', 'partingshot', 'shedtail', 'teleport', 'uturn', 'voltswitch'];\n\t\tconst statusMoves = this.dex.moves.all()\n\t\t\t.filter(move => move.category === 'Status')\n\t\t\t.map(move => move.id);\n\n\t\t// Team-based move culls\n\t\tif (teamDetails.stickyWeb) {\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.stealthRock) {\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.toxicSpikes && teamDetails.toxicSpikes >= 2) {\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\n\t\t// These moves don't mesh well with other aspects of the set\n\t\tthis.incompatibleMoves(moves, movePool, statusMoves, ['healingwish', 'switcheroo', 'trick']);\n\t\tif (species.id !== \"scyther\" && species.id !== \"scizor\") {\n\t\t\tthis.incompatibleMoves(moves, movePool, Setup, pivotingMoves);\n\t\t}\n\t\tthis.incompatibleMoves(moves, movePool, Setup, Hazards);\n\t\tthis.incompatibleMoves(moves, movePool, Setup, ['defog', 'nuzzle', 'toxic', 'waterspout', 'yawn', 'haze']);\n\t\tthis.incompatibleMoves(moves, movePool, PhysicalSetup, PhysicalSetup);\n\t\tthis.incompatibleMoves(moves, movePool, SpecialSetup, 'thunderwave');\n\t\tthis.incompatibleMoves(moves, movePool, 'substitute', pivotingMoves);\n\t\tthis.incompatibleMoves(moves, movePool, SpeedSetup, ['aquajet', 'rest', 'trickroom']);\n\t\tthis.incompatibleMoves(moves, movePool, 'curse', 'rapidspin');\n\t\tthis.incompatibleMoves(moves, movePool, 'dragondance', 'dracometeor');\n\t\tthis.incompatibleMoves(moves, movePool, 'healingwish', 'uturn');\n\n\n\t\t// These attacks are redundant with each other\n\t\tthis.incompatibleMoves(moves, movePool, 'psychic', 'psyshock');\n\t\tthis.incompatibleMoves(moves, movePool, 'surf', 'hydropump');\n\t\tthis.incompatibleMoves(moves, movePool, 'liquidation', 'wavecrash');\n\t\tthis.incompatibleMoves(moves, movePool, ['airslash', 'bravebird', 'hurricane'], ['airslash', 'bravebird', 'hurricane']);\n\t\tthis.incompatibleMoves(moves, movePool, ['knockoff', 'bite'], 'foulplay');\n\t\tthis.incompatibleMoves(moves, movePool, 'doubleedge', 'headbutt');\n\t\tthis.incompatibleMoves(moves, movePool, 'fireblast', ['fierydance', 'flamethrower']);\n\t\tthis.incompatibleMoves(moves, movePool, 'lavaplume', 'magmastorm');\n\t\tthis.incompatibleMoves(moves, movePool, 'thunderpunch', 'wildcharge');\n\t\tthis.incompatibleMoves(moves, movePool, 'gunkshot', ['direclaw', 'poisonjab']);\n\t\tthis.incompatibleMoves(moves, movePool, 'aurasphere', 'focusblast');\n\t\tthis.incompatibleMoves(moves, movePool, 'closecombat', 'drainpunch');\n\t\tthis.incompatibleMoves(moves, movePool, 'bugbite', 'pounce');\n\t\tthis.incompatibleMoves(moves, movePool, 'bittermalice', 'shadowball');\n\t\tthis.incompatibleMoves(moves, movePool, ['dragonpulse', 'spacialrend'], 'dracometeor');\n\n\n\t\t// These status moves are redundant with each other\n\t\tthis.incompatibleMoves(moves, movePool, ['taunt', 'strengthsap'], 'encore');\n\t\tthis.incompatibleMoves(moves, movePool, 'taunt', 'disable');\n\t\tthis.incompatibleMoves(moves, movePool, 'toxic', 'willowisp');\n\t\tthis.incompatibleMoves(moves, movePool, ['thunderwave', 'toxic', 'willowisp'], 'toxicspikes');\n\t\tthis.incompatibleMoves(moves, movePool, 'thunderwave', 'yawn');\n\n\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context\n\t\tif (species.id === \"dugtrio\") {\n\t\t\tthis.incompatibleMoves(moves, movePool, statusMoves, 'memento');\n\t\t}\n\t\tif (species.id === \"cyclizar\") {\n\t\t\tthis.incompatibleMoves(moves, movePool, 'taunt', 'knockoff');\n\t\t}\n\t\t// Landorus\n\t\tthis.incompatibleMoves(moves, movePool, 'nastyplot', 'rockslide');\n\t\t// Persian and Grafaiai\n\t\tthis.incompatibleMoves(moves, movePool, 'switcheroo', ['fakeout', 'superfang']);\n\t\t// Beartic\n\t\tthis.incompatibleMoves(moves, movePool, 'snowscape', 'swordsdance');\n\t\t// Cryogonal\n\t\tif (!teamDetails.defog && !teamDetails.rapidSpin && species.id === 'cryogonal') {\n\t\t\tif (movePool.includes('haze')) this.fastPop(movePool, movePool.indexOf('haze'));\n\t\t}\n\t\t// Magnezone\n\t\tthis.incompatibleMoves(moves, movePool, 'bodypress', 'mirrorcoat');\n\t\t// Amoonguss, though this can work well as a general rule later\n\t\tthis.incompatibleMoves(moves, movePool, 'toxic', 'clearsmog');\n\t}\n\n\t// Checks for and removes incompatible moves, starting with the first move in movesA.\n\tincompatibleMoves(\n\t\tmoves: Set<string>,\n\t\tmovePool: string[],\n\t\tmovesA: string | string[],\n\t\tmovesB: string | string[],\n\t): void {\n\t\tconst moveArrayA = (Array.isArray(movesA)) ? movesA : [movesA];\n\t\tconst moveArrayB = (Array.isArray(movesB)) ? movesB : [movesB];\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\tfor (const moveid1 of moves) {\n\t\t\tif (moveArrayB.includes(moveid1)) {\n\t\t\t\tfor (const moveid2 of moveArrayA) {\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (moveArrayA.includes(moveid1)) {\n\t\t\t\tfor (const moveid2 of moveArrayB) {\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Adds a move to the moveset, returns the MoveCounter\n\taddMove(\n\t\tmove: string,\n\t\tmoves: Set<string>,\n\t\ttypes: string[],\n\t\tabilities: Set<string>,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tmovePool: string[],\n\t\tteraType: string,\n\t\trole: string,\n\t): MoveCounter {\n\t\tmoves.add(move);\n\t\tthis.fastPop(movePool, movePool.indexOf(move));\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\n\t\treturn counter;\n\t}\n\n\t// Returns the type of a given move for STAB/coverage enforcement purposes\n\tgetMoveType(move: Move, species: Species, abilities: Set<string>, teraType: string): string {\n\t\tif (move.id === 'terablast') return teraType;\n\t\tif (['judgment', 'revelationdance'].includes(move.id)) return species.types[0];\n\n\t\tif (move.name === \"Raging Bull\" && species.name.startsWith(\"Tauros-Paldea\")) {\n\t\t\tif (species.name.endsWith(\"Combat\")) return \"Fighting\";\n\t\t\tif (species.name.endsWith(\"Blaze\")) return \"Fire\";\n\t\t\tif (species.name.endsWith(\"Aqua\")) return \"Water\";\n\t\t}\n\n\t\tconst moveType = move.type;\n\t\tif (moveType === 'Normal') {\n\t\t\tif (abilities.has('Aerilate')) return 'Flying';\n\t\t\tif (abilities.has('Galvanize')) return 'Electric';\n\t\t\tif (abilities.has('Pixilate')) return 'Fairy';\n\t\t\tif (abilities.has('Refrigerate')) return 'Ice';\n\t\t}\n\t\treturn moveType;\n\t}\n\n\t// Generate random moveset for a given species, role, tera type.\n\trandomMoveset(\n\t\ttypes: string[],\n\t\tabilities: Set<string>,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tmovePool: string[],\n\t\tteraType: string,\n\t\trole: string,\n\t): Set<string> {\n\t\tconst moves = new Set<string>();\n\t\tlet counter = this.queryMoves(moves, species, teraType, abilities);\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\n\n\t\t// If there are only four moves, add all moves and return early\n\t\tif (movePool.length <= this.maxMoveCount) {\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tmoves.add(moveid);\n\t\t\t}\n\t\t\treturn moves;\n\t\t}\n\n\t\tconst runEnforcementChecker = (checkerName: string) => {\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\n\t\t\t);\n\t\t};\n\n\t\tif (role === \"Tera Blast user\") {\n\t\t\tcounter = this.addMove('terablast', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\n\t\tif (species.requiredMove) {\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\n\n\t\t// Enforce Facade if Guts is a possible ability\n\t\tif (movePool.includes('facade') && abilities.has('Guts')) {\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Sticky Web\n\t\tif (movePool.includes('stickyweb')) {\n\t\t\tcounter = this.addMove('stickyweb', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Revival Blessing\n\t\tif (movePool.includes('revivalblessing')) {\n\t\t\tcounter = this.addMove('revivalblessing', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Salt Cure\n\t\tif (movePool.includes('saltcure')) {\n\t\t\tcounter = this.addMove('saltcure', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Toxic on Grafaiai\n\t\tif (movePool.includes('toxic') && species.id === 'grafaiai') {\n\t\t\tcounter = this.addMove('toxic', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce STAB priority\n\t\tif (role === 'Bulky Attacker' || role === 'Bulky Setup' || priorityPokemon.includes(species.id)) {\n\t\t\tconst priorityMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (types.includes(moveType) && move.priority > 0 && move.category !== 'Status') {\n\t\t\t\t\tpriorityMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (priorityMoves.length) {\n\t\t\t\tconst moveid = this.sample(priorityMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce STAB\n\t\tfor (const type of types) {\n\t\t\t// Check if a STAB move of that type should be required\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (type === moveType &&\n\t\t\t\t\t(move.basePower > 30 || move.multihit || move.basePowerCallback) &&\n\t\t\t\t\t(!this.noStab.includes(moveid) || abilities.has('Technician') && moveid === 'machpunch')) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (runEnforcementChecker(type)) {\n\t\t\t\tif (!stabMoves.length) break;\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// If no STAB move was added in the previous step, add a STAB move\n\t\tif (!counter.stabCounter) {\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower > 30 || move.multihit || move.basePowerCallback) &&\n\t\t\t\t\ttypes.includes(moveType)) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stabMoves.length) {\n\t\t\t\tconst moveid = this.sample(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Tera STAB\n\t\tif (!counter.get('stabtera') && role !== \"Bulky Support\" && species.baseSpecies !== 'Dudunsparce') {\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower > 30 || move.multihit || move.basePowerCallback)) {\n\t\t\t\t\tif (teraType === moveType) {\n\t\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stabMoves.length) {\n\t\t\t\tconst moveid = this.sample(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce recovery\n\t\tif ([\"Bulky Support\", \"Bulky Attacker\", \"Bulky Setup\"].includes(role)) {\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RecoveryMove.includes(moveid));\n\t\t\tif (recoveryMoves.length) {\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce setup\n\t\tif (role.includes('Setup') || role === 'Tera Blast user') {\n\t\t\t// First, try to add a non-Speed setup move\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => Setup.includes(moveid) && !SpeedSetup.includes(moveid));\n\t\t\tif (nonSpeedSetupMoves.length) {\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t} else {\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\n\t\t\t\tconst setupMoves = movePool.filter(moveid => Setup.includes(moveid));\n\t\t\t\tif (setupMoves.length) {\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enforce coverage move\n\t\tif (!['AV Pivot', 'Fast Support', 'Bulky Support'].includes(role)) {\n\t\t\tif (counter.damagingMoves.size <= 1) {\n\t\t\t\t// Find the type of the current attacking move\n\t\t\t\tlet currentAttackType: string;\n\t\t\t\tfor (const moveid of moves) {\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\t\tif (move.basePower > 30 || move.multihit || move.basePowerCallback) {\n\t\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\t\t\tcurrentAttackType = moveType;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\n\t\t\t\tconst coverageMoves = [];\n\t\t\t\tfor (const moveid of movePool) {\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower > 30 || move.multihit || move.basePowerCallback)) {\n\t\t\t\t\t\tif (currentAttackType! !== moveType) coverageMoves.push(moveid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (coverageMoves.length) {\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add (moves.size < this.maxMoveCount) as a condition if moves is getting larger than 4 moves.\n\t\t// If you want moves to be favored but not required, add something like && this.randomChance(1, 2) to your condition.\n\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) {\n\t\t\t\tfor (const moveid of movePool) {\n\t\t\t\t\tmoves.add(moveid);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst moveid = this.sample(movePool);\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t\tfor (const pair of MovePairs) {\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}\n\n\tshouldCullAbility(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: string,\n\t): boolean {\n\t\tif ([\n\t\t\t'Armor Tail', 'Battle Bond', 'Early Bird', 'Flare Boost', 'Gluttony', 'Harvest', 'Hydration', 'Ice Body', 'Immunity',\n\t\t\t'Moody', 'Own Tempo', 'Pressure', 'Quick Feet', 'Rain Dish', 'Sand Veil', 'Snow Cloak', 'Steadfast', 'Steam Engine',\n\t\t].includes(ability)) return true;\n\n\t\tswitch (ability) {\n\t\t// Abilities which are primarily useful for certain moves\n\t\tcase 'Contrary': case 'Serene Grace': case 'Skill Link': case 'Strong Jaw':\n\t\t\treturn !counter.get(toID(ability));\n\t\tcase 'Chlorophyll':\n\t\t\treturn (!moves.has('sunnyday') && !teamDetails.sun && species.id !== 'lilligant');\n\t\tcase 'Cloud Nine':\n\t\t\treturn (species.id !== 'golduck');\n\t\tcase 'Competitive':\n\t\t\treturn (species.id === 'kilowattrel');\n\t\tcase 'Compound Eyes': case 'No Guard':\n\t\t\treturn !counter.get('inaccurate');\n\t\tcase 'Cursed Body':\n\t\t\treturn abilities.has('Infiltrator');\n\t\tcase 'Defiant':\n\t\t\treturn (!counter.get('Physical') || (abilities.has('Prankster') && (moves.has('thunderwave') || moves.has('taunt'))));\n\t\tcase 'Flash Fire':\n\t\t\treturn (\n\t\t\t\t['Flame Body', 'Intimidate', 'Rock Head', 'Weak Armor'].some(m => abilities.has(m)) &&\n\t\t\t\tthis.dex.getEffectiveness('Fire', species) < 0\n\t\t\t);\n\t\tcase 'Guts':\n\t\t\treturn (!moves.has('facade') && !moves.has('sleeptalk'));\n\t\tcase 'Hustle':\n\t\t\treturn (counter.get('Physical') < 2);\n\t\tcase 'Infiltrator':\n\t\t\treturn (isDoubles && abilities.has('Clear Body'));\n\t\tcase 'Insomnia':\n\t\t\treturn (role === 'Wallbreaker');\n\t\tcase 'Intimidate':\n\t\t\tif (abilities.has('Hustle')) return true;\n\t\t\tif (abilities.has('Sheer Force') && !!counter.get('sheerforce')) return true;\n\t\t\treturn (abilities.has('Stakeout'));\n\t\tcase 'Iron Fist':\n\t\t\treturn !counter.ironFist;\n\t\tcase 'Justified':\n\t\t\treturn !counter.get('Physical');\n\t\tcase 'Mold Breaker':\n\t\t\treturn (abilities.has('Sharpness') || abilities.has('Unburden'));\n\t\tcase 'Moxie':\n\t\t\treturn (!counter.get('Physical') || moves.has('stealthrock'));\n\t\tcase 'Natural Cure':\n\t\t\treturn species.id === 'pawmot';\n\t\tcase 'Overgrow':\n\t\t\treturn !counter.get('Grass');\n\t\tcase 'Prankster':\n\t\t\treturn !counter.get('Status');\n\t\tcase 'Reckless':\n\t\t\treturn !counter.get('recoil');\n\t\tcase 'Rock Head':\n\t\t\treturn !counter.get('recoil');\n\t\tcase 'Sand Force': case 'Sand Rush':\n\t\t\treturn !teamDetails.sand;\n\t\tcase 'Sap Sipper':\n\t\t\treturn species.id === 'wyrdeer';\n\t\tcase 'Seed Sower':\n\t\t\treturn role === 'Bulky Support';\n\t\tcase 'Shed Skin':\n\t\t\treturn species.id === 'seviper';\n\t\tcase 'Sheer Force':\n\t\t\tconst braviaryCase = (species.id === 'braviaryhisui' && role === 'Wallbreaker');\n\t\t\tconst abilitiesCase = (abilities.has('Guts') || abilities.has('Sharpness'));\n\t\t\treturn (!counter.get('sheerforce') || moves.has('bellydrum') || braviaryCase || abilitiesCase);\n\t\tcase 'Slush Rush':\n\t\t\treturn !teamDetails.snow;\n\t\tcase 'Sniper':\n\t\t\treturn abilities.has('Torrent');\n\t\tcase 'Solar Power':\n\t\t\treturn (!teamDetails.sun || !counter.get('Special'));\n\t\tcase 'Sturdy':\n\t\t\treturn !!counter.get('recoil');\n\t\tcase 'Swarm':\n\t\t\treturn (!counter.get('Bug') || !!counter.get('recovery'));\n\t\tcase 'Sweet Veil':\n\t\t\treturn types.includes('Grass');\n\t\tcase 'Swift Swim':\n\t\t\treturn (!moves.has('raindance') && !teamDetails.rain);\n\t\tcase 'Synchronize':\n\t\t\treturn (species.id !== 'umbreon' && species.id !== 'rabsca');\n\t\tcase 'Technician':\n\t\t\treturn (!counter.get('technician') || abilities.has('Punk Rock'));\n\t\tcase 'Tinted Lens':\n\t\t\treturn (species.id === 'braviaryhisui' && role === 'Fast Support');\n\t\tcase 'Unburden':\n\t\t\treturn (abilities.has('Prankster') || !counter.get('setup'));\n\t\tcase 'Volt Absorb':\n\t\t\tif (abilities.has('Iron Fist') && counter.ironFist >= 2) return true;\n\t\t\treturn (this.dex.getEffectiveness('Electric', species) < -1);\n\t\tcase 'Water Absorb':\n\t\t\treturn species.id === 'quagsire';\n\t\tcase 'Weak Armor':\n\t\t\treturn moves.has('shellsmash');\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\tgetAbility(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: string,\n\t): string {\n\t\tconst abilityData = Array.from(abilities).map(a => this.dex.abilities.get(a));\n\t\tUtils.sortBy(abilityData, abil => -abil.rating);\n\n\t\tif (abilityData.length <= 1) return abilityData[0].name;\n\n\t\t// Hard-code abilities here\n\t\tif (species.id === 'arcaninehisui') return 'Rock Head';\n\t\tif (species.id === 'staraptor') return 'Reckless';\n\t\tif (species.id === 'scovillain') return 'Chlorophyll';\n\t\tif (species.id === 'vespiquen') return 'Pressure';\n\t\tif (species.id === 'enamorus' && moves.has('calmmind')) return 'Cute Charm';\n\t\tif (species.id === 'cetitan' && role === 'Wallbreaker') return 'Sheer Force';\n\t\tif (species.id === 'klawf' && role === 'Setup Sweeper') return 'Anger Shell';\n\t\tif (abilities.has('Cud Chew') && moves.has('substitute')) return 'Cud Chew';\n\t\tif (abilities.has('Guts') && (moves.has('facade') || moves.has('sleeptalk'))) return 'Guts';\n\t\tif (abilities.has('Harvest') && moves.has('substitute')) return 'Harvest';\n\t\tif (species.id === 'hypno') return 'Insomnia';\n\t\tif (abilities.has('Serene Grace') && moves.has('headbutt')) return 'Serene Grace';\n\t\tif (abilities.has('Technician') && counter.get('technician')) return 'Technician';\n\t\tif (abilities.has('Own Tempo') && moves.has('petaldance')) return 'Own Tempo';\n\t\tif (abilities.has('Slush Rush') && moves.has('snowscape')) return 'Slush Rush';\n\t\tif (abilities.has('Soundproof') && moves.has('substitute')) return 'Soundproof';\n\n\t\tlet abilityAllowed: Ability[] = [];\n\t\t// Obtain a list of abilities that are allowed (not culled)\n\t\tfor (const ability of abilityData) {\n\t\t\tif (ability.rating >= 1 && !this.shouldCullAbility(\n\t\t\t\tability.name, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role\n\t\t\t)) {\n\t\t\t\tabilityAllowed.push(ability);\n\t\t\t}\n\t\t}\n\n\t\t// If all abilities are culled, re-allow all\n\t\tif (!abilityAllowed.length) abilityAllowed = abilityData;\n\n\t\tif (abilityAllowed.length === 1) return abilityAllowed[0].name;\n\t\t// Sort abilities by rating with an element of randomness\n\t\t// All three abilities can be chosen\n\t\tif (abilityAllowed[2] && abilityAllowed[0].rating - 0.5 <= abilityAllowed[2].rating) {\n\t\t\tif (abilityAllowed[1].rating <= abilityAllowed[2].rating) {\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\n\t\t\t} else {\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[1], abilityAllowed[2]] = [abilityAllowed[2], abilityAllowed[1]];\n\t\t\t}\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\n\t\t\t\tif (this.randomChance(2, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\n\t\t\t} else {\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\n\t\t\t}\n\t\t} else {\n\t\t\t// Third ability cannot be chosen\n\t\t\tif (abilityAllowed[0].rating <= abilityAllowed[1].rating) {\n\t\t\t\tif (this.randomChance(1, 2)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\n\t\t\t} else if (abilityAllowed[0].rating - 0.5 <= abilityAllowed[1].rating) {\n\t\t\t\tif (this.randomChance(1, 3)) [abilityAllowed[0], abilityAllowed[1]] = [abilityAllowed[1], abilityAllowed[0]];\n\t\t\t}\n\t\t}\n\n\t\t// After sorting, choose the first ability\n\t\treturn abilityAllowed[0].name;\n\t}\n\n\tgetPriorityItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: string,\n\t) {\n\t\tif (species.requiredItems) {\n\t\t\t// Z-Crystals aren't available in Gen 9, so require Plates\n\t\t\tif (species.baseSpecies === 'Arceus') {\n\t\t\t\treturn species.requiredItems[0];\n\t\t\t}\n\t\t\treturn this.sample(species.requiredItems);\n\t\t}\n\t\tif (role === 'AV Pivot') return 'Assault Vest';\n\t\tif (\n\t\t\t!isLead && role === 'Bulky Setup' &&\n\t\t\t(ability === 'Quark Drive' || ability === 'Protosynthesis')\n\t\t) {\n\t\t\treturn 'Booster Energy';\n\t\t}\n\t\tif (species.id === 'pikachu') return 'Light Ball';\n\t\tif (species.id === 'regieleki') return 'Magnet';\n\t\tif (species.id === 'pincurchin') return 'Shuca Berry';\n\t\tif (species.id === 'lokix') {\n\t\t\treturn (role === 'Fast Attacker') ? 'Silver Powder' : 'Life Orb';\n\t\t}\n\t\tif (species.id === 'toxtricity' && moves.has('shiftgear')) return 'Throat Spray';\n\t\tif (species.baseSpecies === 'Magearna' && role === 'Tera Blast user') return 'Weakness Policy';\n\t\tif (moves.has('lastrespects')) return 'Choice Scarf';\n\t\tif (ability === 'Imposter' || (species.id === 'magnezone' && moves.has('bodypress'))) return 'Choice Scarf';\n\t\tif (moves.has('bellydrum') && moves.has('substitute')) return 'Salac Berry';\n\t\tif (\n\t\t\t['Cheek Pouch', 'Cud Chew', 'Harvest'].some(m => ability === m) ||\n\t\t\tmoves.has('bellydrum') || moves.has('filletaway')\n\t\t) {\n\t\t\treturn 'Sitrus Berry';\n\t\t}\n\t\tif (['healingwish', 'switcheroo', 'trick'].some(m => moves.has(m))) {\n\t\t\tif (species.baseStats.spe >= 60 && species.baseStats.spe <= 108 && role !== 'Wallbreaker') {\n\t\t\t\treturn 'Choice Scarf';\n\t\t\t} else {\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\n\t\t\t}\n\t\t}\n\t\tif ((ability === 'Guts' || moves.has('facade')) && !moves.has('sleeptalk')) {\n\t\t\treturn (types.includes('Fire') || ability === 'Toxic Boost') ? 'Toxic Orb' : 'Flame Orb';\n\t\t}\n\t\tif (\n\t\t\t(ability === 'Magic Guard' && counter.damagingMoves.size > 1) ||\n\t\t\t(ability === 'Sheer Force' && counter.get('sheerforce'))\n\t\t) {\n\t\t\treturn 'Life Orb';\n\t\t}\n\t\tif (ability === 'Anger Shell') return this.sample(['Rindo Berry', 'Passho Berry', 'Scope Lens', 'Sitrus Berry']);\n\t\tif (moves.has('shellsmash')) return 'White Herb';\n\t\tif (moves.has('populationbomb')) return 'Wide Lens';\n\t\tif (moves.has('courtchange')) return 'Heavy-Duty Boots';\n\t\tif (moves.has('stuffcheeks')) return this.randomChance(1, 2) ? 'Liechi Berry' : 'Salac Berry';\n\t\tif (ability === 'Unburden') return moves.has('closecombat') ? 'White Herb' : 'Sitrus Berry';\n\t\tif (moves.has('acrobatics')) return ability === 'Grassy Surge' ? 'Grassy Seed' : '';\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\n\t\tif (\n\t\t\tmoves.has('rest') && !moves.has('sleeptalk') &&\n\t\t\tability !== 'Natural Cure' && ability !== 'Shed Skin'\n\t\t) {\n\t\t\treturn 'Chesto Berry';\n\t\t}\n\t\tif (species.id === 'scyther') return (isLead && !moves.has('uturn')) ? 'Eviolite' : 'Heavy-Duty Boots';\n\t\tif (species.nfe) return 'Eviolite';\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 2) return 'Heavy-Duty Boots';\n\t}\n\n\t/** Item generation specific to Random Doubles */\n\t// This will be changed and used later, once doubles is actually coming out.\n\tgetDoublesItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tteraType: string,\n\t\trole: string,\n\t) {\n\t\tconst defensiveStatTotal = species.baseStats.hp + species.baseStats.def + species.baseStats.spd;\n\n\t\tif (\n\t\t\t(['dragonenergy', 'eruption', 'waterspout'].some(m => moves.has(m))) &&\n\t\t\tcounter.damagingMoves.size >= 4\n\t\t) return 'Choice Scarf';\n\t\tif (moves.has('blizzard') && ability !== 'Snow Warning' && !teamDetails.snow) return 'Blunder Policy';\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 2 && !types.includes('Flying')) return 'Heavy-Duty Boots';\n\t\tif (counter.get('Physical') >= 4 && ['fakeout', 'feint', 'rapidspin', 'suckerpunch'].every(m => !moves.has(m)) && (\n\t\t\ttypes.includes('Dragon') || types.includes('Fighting') || types.includes('Rock') ||\n\t\t\tmoves.has('flipturn') || moves.has('uturn')\n\t\t)) {\n\t\t\treturn (\n\t\t\t\t!counter.get('priority') && ability !== 'Speed Boost' &&\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 100 &&\n\t\t\t\tthis.randomChance(1, 2)\n\t\t\t) ? 'Choice Scarf' : 'Choice Band';\n\t\t}\n\t\tif (\n\t\t\t(\n\t\t\t\tcounter.get('Special') >= 4 &&\n\t\t\t\t(types.includes('Dragon') || types.includes('Fighting') || types.includes('Rock') || moves.has('voltswitch'))\n\t\t\t) || (\n\t\t\t\t(counter.get('Special') >= 3 && (moves.has('flipturn') || moves.has('uturn'))) &&\n\t\t\t\t!moves.has('acidspray') && !moves.has('electroweb')\n\t\t\t)\n\t\t) {\n\t\t\treturn (\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 100 && this.randomChance(1, 2)\n\t\t\t) ? 'Choice Scarf' : 'Choice Specs';\n\t\t}\n\t\t// This one is intentionally below the Choice item checks.\n\t\tif ((defensiveStatTotal < 250 && ability === 'Regenerator') || species.name === 'Pheromosa') return 'Life Orb';\n\t\tif (counter.damagingMoves.size >= 4 && defensiveStatTotal >= 275) return 'Assault Vest';\n\t\tif (\n\t\t\tcounter.damagingMoves.size >= 3 &&\n\t\t\tspecies.baseStats.spe >= 60 &&\n\t\t\tability !== 'Multiscale' && ability !== 'Sturdy' &&\n\t\t\t[\n\t\t\t\t'acidspray', 'clearsmog', 'electroweb', 'fakeout', 'feint', 'icywind',\n\t\t\t\t'incinerate', 'naturesmadness', 'rapidspin', 'snarl', 'uturn',\n\t\t\t].every(m => !moves.has(m))\n\t\t) return (ability === 'Defeatist' || defensiveStatTotal >= 275) ? 'Sitrus Berry' : 'Life Orb';\n\t}\n\n\tgetItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: string,\n\t): string | undefined {\n\t\tif (\n\t\t\t(counter.get('Physical') >= 4 ||\n\t\t\t(counter.get('Physical') >= 3 && moves.has('memento'))) &&\n\t\t\t['fakeout', 'firstimpression', 'flamecharge', 'rapidspin', 'ruination', 'superfang'].every(m => !moves.has(m))\n\t\t) {\n\t\t\tconst scarfReqs = (\n\t\t\t\trole !== 'Wallbreaker' &&\n\t\t\t\t(species.baseStats.atk >= 100 || ability === 'Huge Power' || ability === 'Pure Power') &&\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\tability !== 'Speed Boost' && !counter.get('priority') && !moves.has('aquastep')\n\t\t\t);\n\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Band';\n\t\t}\n\t\tif (\n\t\t\t(counter.get('Special') >= 4) ||\n\t\t\t(counter.get('Special') >= 3 && ['flipturn', 'partingshot', 'uturn'].some(m => moves.has(m)))\n\t\t) {\n\t\t\tconst scarfReqs = (\n\t\t\t\trole !== 'Wallbreaker' &&\n\t\t\t\tspecies.baseStats.spa >= 100 &&\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\tability !== 'Speed Boost' && ability !== 'Tinted Lens' && !counter.get('Physical')\n\t\t\t);\n\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Specs';\n\t\t}\n\t\tif (!counter.get('Status') && role !== 'Fast Attacker' && role !== 'Wallbreaker') return 'Assault Vest';\n\t\tif (counter.get('speedsetup') && this.dex.getEffectiveness('Ground', species) < 1) return 'Weakness Policy';\n\t\tif (species.id === 'urshifurapidstrike') return 'Punching Glove';\n\t\tif (species.id === 'palkia') return 'Lustrous Orb';\n\t\tif (moves.has('substitute') || ability === 'Moody') return 'Leftovers';\n\t\tif (moves.has('stickyweb') && isLead) return 'Focus Sash';\n\t\tif (\n\t\t\t((!teamDetails.defog && !teamDetails.rapidSpin) || (!counter.get('setup') && role !== 'Wallbreaker')) &&\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 1\n\t\t) return 'Heavy-Duty Boots';\n\t\tif (\n\t\t\trole === 'Fast Support' &&\n\t\t\t['defog', 'rapidspin', 'uturn', 'voltswitch'].some(m => moves.has(m)) &&\n\t\t\t!types.includes('Flying') && ability !== 'Levitate'\n\t\t) return 'Heavy-Duty Boots';\n\n\t\t// Low Priority\n\t\tif (moves.has('outrage')) return 'Lum Berry';\n\t\tif (\n\t\t\t(species.id === 'garchomp' && role === 'Fast Support') ||\n\t\t\t(ability === 'Regenerator' && types.includes('Water') && species.baseStats.def >= 110 && this.randomChance(1, 3))\n\t\t) return 'Rocky Helmet';\n\t\tif (\n\t\t\trole === 'Fast Support' && isLead &&\n\t\t\t!counter.get('recovery') && !counter.get('recoil') && !moves.has('protect') &&\n\t\t\t(species.baseStats.hp + species.baseStats.def + species.baseStats.spd) < 258\n\t\t) return 'Focus Sash';\n\t\tif (\n\t\t\trole !== 'Fast Attacker' && role !== 'Tera Blast user' && ability !== 'Levitate' &&\n\t\t\tthis.dex.getEffectiveness('Ground', species) >= 2\n\t\t) return 'Air Balloon';\n\t\tif (['Bulky Attacker', 'Bulky Support', 'Bulky Setup'].some(m => role === (m))) return 'Leftovers';\n\t\tif (role === 'Fast Support' || role === 'Fast Bulky Setup') {\n\t\t\treturn (counter.damagingMoves.size >= 3 && !moves.has('nuzzle')) ? 'Life Orb' : 'Leftovers';\n\t\t}\n\t\tif (role === 'Tera Blast user' && counter.get('recovery') && counter.damagingMoves.size < 3) return 'Leftovers';\n\t\tif (\n\t\t\t['flamecharge', 'rapidspin'].every(m => !moves.has(m)) &&\n\t\t\t['Fast Attacker', 'Setup Sweeper', 'Tera Blast user', 'Wallbreaker'].some(m => role === (m))\n\t\t) return 'Life Orb';\n\t\tif (isDoubles) return 'Sitrus Berry';\n\t\treturn 'Leftovers';\n\t}\n\n\tgetLevel(\n\t\tspecies: Species,\n\t\tisDoubles: boolean,\n\t): number {\n\t\tif (this.adjustLevel) return this.adjustLevel;\n\t\t// doubles levelling\n\t\tif (isDoubles && this.randomDoublesSets[species.id][\"level\"]) return this.randomDoublesSets[species.id][\"level\"];\n\t\tif (!isDoubles && this.randomSets[species.id][\"level\"]) return this.randomSets[species.id][\"level\"];\n\t\t// Default to tier-based levelling\n\t\tconst tier = species.tier;\n\t\tconst tierScale: Partial<Record<Species['tier'], number>> = {\n\t\t\tUber: 76,\n\t\t\tOU: 80,\n\t\t\tUUBL: 81,\n\t\t\tUU: 82,\n\t\t\tRUBL: 83,\n\t\t\tRU: 84,\n\t\t\tNUBL: 85,\n\t\t\tNU: 86,\n\t\t\tPUBL: 87,\n\t\t\tPU: 88, \"(PU)\": 88, NFE: 88,\n\t\t};\n\t\treturn tierScale[tier] || 80;\n\t}\n\n\trandomSet(\n\t\tspecies: string | Species,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\n\t\tisLead = false,\n\t\tisDoubles = false\n\t): RandomTeamsTypes.RandomSet {\n\t\tspecies = this.dex.species.get(species);\n\t\tlet forme = species.name;\n\n\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\n\t\t\tforme = species.battleOnly;\n\t\t}\n\t\tif (species.cosmeticFormes) {\n\t\t\tforme = this.sample([species.name].concat(species.cosmeticFormes));\n\t\t}\n\t\tconst sets = (this as any)[`random${isDoubles ? 'Doubles' : ''}Sets`][species.id][\"sets\"];\n\t\tconst possibleSets = [];\n\t\tfor (const set of sets) {\n\t\t\tif (teamDetails.teraBlast && set.role === \"Tera Blast user\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpossibleSets.push(set);\n\t\t}\n\t\tconst set = this.sampleIfArray(possibleSets);\n\t\tconst role = set.role;\n\t\tconst movePool: string[] = [];\n\t\tfor (const movename of set.movepool) {\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\n\t\t}\n\t\tconst teraTypes = set.teraTypes;\n\t\tconst teraType = this.sampleIfArray(teraTypes);\n\n\t\tif (this.format.gameType === 'multi' || this.format.gameType === 'freeforall') {\n\t\t\t// Random Multi Battle uses doubles move pools, but Ally Switch fails in multi battles\n\t\t\t// Random Free-For-All also uses doubles move pools, for now\n\t\t\tconst allySwitch = movePool.indexOf('allyswitch');\n\t\t\tif (allySwitch > -1) {\n\t\t\t\tif (movePool.length > this.maxMoveCount) {\n\t\t\t\t\tthis.fastPop(movePool, allySwitch);\n\t\t\t\t} else {\n\t\t\t\t\t// Ideally, we'll never get here, but better to have a move that usually does nothing than one that always does\n\t\t\t\t\tmovePool[allySwitch] = 'sleeptalk';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet ability = '';\n\t\tlet item = undefined;\n\n\t\tconst evs = {hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85};\n\t\tconst ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n\n\t\tconst types = species.types;\n\t\tconst abilities = new Set(Object.values(species.abilities));\n\t\tif (species.unreleasedHidden) abilities.delete(species.abilities.H);\n\n\t\t// Get moves\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\n\n\t\t// Get ability\n\t\tability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role);\n\n\t\t// Get items\n\t\t// First, the priority items\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);\n\t\tif (item === undefined && isDoubles) {\n\t\t\titem = this.getDoublesItem(ability, types, moves, counter, teamDetails, species, teraType, role);\n\t\t}\n\t\tif (item === undefined) {\n\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);\n\t\t}\n\n\t\t// fallback\n\t\tif (item === undefined) item = isDoubles ? 'Sitrus Berry' : 'Leftovers';\n\n\t\tif (species.baseSpecies === 'Pikachu') {\n\t\t\tforme = 'Pikachu' + this.sample(['', '-Original', '-Hoenn', '-Sinnoh', '-Unova', '-Kalos', '-Alola', '-Partner', '-World']);\n\t\t}\n\n\t\t// Get level\n\t\tconst level = this.getLevel(species, isDoubles);\n\n\t\t// Prepare optimal HP\n\t\tconst srImmunity = ability === 'Magic Guard' || item === 'Heavy-Duty Boots';\n\t\tconst srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\n\t\twhile (evs.hp > 1) {\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\tif ((moves.has('substitute') && ['Sitrus Berry', 'Salac Berry'].includes(item))) {\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\n\t\t\t\tif (hp % 4 === 0) break;\n\t\t\t} else if ((moves.has('bellydrum') || moves.has('filletaway')) && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\n\t\t\t\t// Belly Drum should activate Sitrus Berry\n\t\t\t\tif (hp % 2 === 0) break;\n\t\t\t} else {\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\n\t\t\t\tif (srWeakness <= 0 || hp % (4 / srWeakness) > 0 || ['Leftovers', 'Life Orb'].includes(item)) break;\n\t\t\t}\n\t\t\tevs.hp -= 4;\n\t\t}\n\n\t\t// Minimize confusion damage\n\t\tconst noAttackStatMoves = [...moves].every(m => {\n\t\t\tconst move = this.dex.moves.get(m);\n\t\t\tif (move.damageCallback || move.damage) return true;\n\t\t\tif (move.id === 'shellsidearm') return false;\n\t\t\t// Magearna, though this can work well as a general rule\n\t\t\tif (move.id === 'terablast' && moves.has('shiftgear')) return false;\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\n\t\t});\n\t\tif (noAttackStatMoves && !moves.has('transform')) {\n\t\t\tevs.atk = 0;\n\t\t\tivs.atk = 0;\n\t\t}\n\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\n\t\t\tevs.spe = 0;\n\t\t\tivs.spe = 0;\n\t\t}\n\n\t\t// shuffle moves to add more randomness to camomons\n\t\tconst shuffledMoves = Array.from(moves);\n\t\tthis.prng.shuffle(shuffledMoves);\n\t\treturn {\n\t\t\tname: species.baseSpecies,\n\t\t\tspecies: forme,\n\t\t\tgender: species.gender,\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tlevel,\n\t\t\tmoves: shuffledMoves,\n\t\t\tability,\n\t\t\tevs,\n\t\t\tivs,\n\t\t\titem,\n\t\t\tteraType,\n\t\t\trole,\n\t\t};\n\t}\n\n\tgetPokemonPool(\n\t\ttype: string,\n\t\tpokemonToExclude: RandomTeamsTypes.RandomSet[] = [],\n\t\tisMonotype = false,\n\t\tisDoubles = false,\n\t) {\n\t\tconst exclude = pokemonToExclude.map(p => toID(p.species));\n\t\tconst pokemonPool = [];\n\t\tconst baseSpeciesPool: string[] = [];\n\t\tif (isDoubles) {\n\t\t\tfor (const pokemon of Object.keys(this.randomDoublesSets)) {\n\t\t\t\tlet species = this.dex.species.get(pokemon);\n\t\t\t\tif (species.gen > this.gen || exclude.includes(species.id)) continue;\n\t\t\t\tif (isMonotype) {\n\t\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\n\t\t\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpokemonPool.push(pokemon);\n\t\t\t\tif (!baseSpeciesPool.includes(species.baseSpecies)) baseSpeciesPool.push(species.baseSpecies);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const pokemon of Object.keys(this.randomSets)) {\n\t\t\t\tlet species = this.dex.species.get(pokemon);\n\t\t\t\tif (species.gen > this.gen || exclude.includes(species.id)) continue;\n\t\t\t\tif (isMonotype) {\n\t\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\n\t\t\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpokemonPool.push(pokemon);\n\t\t\t\tif (!baseSpeciesPool.includes(species.baseSpecies)) baseSpeciesPool.push(species.baseSpecies);\n\t\t\t}\n\t\t}\n\t\treturn [pokemonPool, baseSpeciesPool];\n\t}\n\n\t// TODO: Make types for this\n\trandomSets: AnyObject = require('./random-sets.json');\n\trandomDoublesSets: AnyObject = require('./random-sets.json'); // Doubles sets are the same as singles for now\n\n\trandomTeam() {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst seed = this.prng.seed;\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\n\t\tconst isDoubles = this.format.gameType !== 'singles';\n\t\tconst typePool = this.dex.types.names();\n\t\tconst type = this.forceMonotype || this.sample(typePool);\n\n\t\t// PotD stuff\n\t\tconst usePotD = global.Config && Config.potd && ruleTable.has('potd');\n\t\tconst potd = usePotD ? this.dex.species.get(Config.potd) : null;\n\n\t\tconst baseFormes: {[k: string]: number} = {};\n\n\t\tconst tierCount: {[k: string]: number} = {};\n\t\tconst typeCount: {[k: string]: number} = {};\n\t\tconst typeComboCount: {[k: string]: number} = {};\n\t\tconst typeWeaknesses: {[k: string]: number} = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, isDoubles);\n\n\t\tlet generatedLead = false;\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\n\t\t\tconst currentSpeciesPool: Species[] = [];\n\t\t\tfor (const poke of pokemonPool) {\n\t\t\t\tconst species = this.dex.species.get(poke);\n\t\t\t\tif (species.baseSpecies === baseSpecies) currentSpeciesPool.push(species);\n\t\t\t}\n\t\t\tlet species = this.sample(currentSpeciesPool);\n\t\t\tif (!species.exists) continue;\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.baseSpecies === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\n\n\t\t\t// If Zoroark is in the team, ensure its level is balanced\n\t\t\t// Level range differs for each forme of Zoroark\n\t\t\tif (\n\t\t\t\tpokemon.some(pkmn => pkmn.species === 'Zoroark') &&\n\t\t\t\tpokemon.length >= (this.maxTeamSize - 1) &&\n\t\t\t\t(this.getLevel(species, isDoubles) < 76 || this.getLevel(species, isDoubles) > 94) &&\n\t\t\t\t!this.adjustLevel\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tpokemon.some(pkmn => pkmn.species === 'Zoroark-Hisui') &&\n\t\t\t\tpokemon.length >= (this.maxTeamSize - 1) &&\n\t\t\t\t(this.getLevel(species, isDoubles) < 72 || this.getLevel(species, isDoubles) > 86) &&\n\t\t\t\t!this.adjustLevel\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst tier = species.tier;\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\n\n\t\t\t// Limit one Pokemon per tier, two for Monotype\n\t\t\t// Disable this for now, since it is still a new gen\n\t\t\t// Unless you want to have a lot of Ubers!\n\t\t\t// if (\n\t\t\t// \t(tierCount[tier] >= (this.forceMonotype || isMonotype ? 2 : 1) * limitFactor) &&\n\t\t\t// \t!this.randomChance(1, Math.pow(5, tierCount[tier]))\n\t\t\t// ) {\n\t\t\t// \tcontinue;\n\t\t\t// }\n\n\t\t\tif (!isMonotype && !this.forceMonotype) {\n\t\t\t\tlet skip = false;\n\n\t\t\t\t// Limit two of any type\n\t\t\t\tfor (const typeName of types) {\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Limit three weak to any type\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t\t// it's weak to the type\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\t\t\t}\n\n\t\t\t// Limit one of any type combination, two in Monotype\n\t\t\tif (!this.forceMonotype && typeComboCount[typeCombo] >= (isMonotype ? 2 : 1) * limitFactor) continue;\n\n\t\t\t// The Pokemon of the Day\n\t\t\tif (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1)) species = potd;\n\n\t\t\tlet set: RandomTeamsTypes.RandomSet;\n\n\t\t\tif (!generatedLead) {\n\t\t\t\tif (noLeadPokemon.includes(species.baseSpecies)) {\n\t\t\t\t\tif (pokemon.length + 1 === this.maxTeamSize) continue;\n\t\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\n\t\t\t\t\tpokemon.push(set);\n\t\t\t\t} else {\n\t\t\t\t\tset = this.randomSet(species, teamDetails, true, isDoubles);\n\t\t\t\t\tpokemon.unshift(set);\n\t\t\t\t\tgeneratedLead = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\n\t\t\t\tpokemon.push(set);\n\t\t\t}\n\n\t\t\tif (pokemon.length === this.maxTeamSize) {\n\t\t\t\t// Set Zoroark's level to be the same as the last Pokemon\n\t\t\t\tfor (const poke of pokemon) {\n\t\t\t\t\tif (poke.ability === 'Illusion') poke.level = pokemon[this.maxTeamSize - 1].level;\n\t\t\t\t}\n\n\t\t\t\t// Don't bother tracking details for the last Pokemon\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment tier counter\n\t\t\tif (tierCount[tier]) {\n\t\t\t\ttierCount[tier]++;\n\t\t\t} else {\n\t\t\t\ttierCount[tier] = 1;\n\t\t\t}\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Increment weakness counter\n\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t// it's weak to the type\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\ttypeWeaknesses[typeName]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Orichalcum Pulse' || set.moves.includes('sunnyday')) {\n\t\t\t\tteamDetails.sun = 1;\n\t\t\t}\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\n\t\t\t\tteamDetails.snow = 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('spikes') || set.moves.includes('ceaselessedge')) {\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') {\n\t\t\t\tteamDetails.toxicSpikes = (teamDetails.toxicSpikes || 0) + 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('stealthrock') || set.moves.includes('stoneaxe')) teamDetails.stealthRock = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\n\t\t\tif (set.moves.includes('defog') || set.moves.includes('tidyup')) teamDetails.defog = 1;\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\n\t\t\t\tteamDetails.screens = 1;\n\t\t\t}\n\t\t\tif (set.role === 'Tera Blast user') teamDetails.teraBlast = 1;\n\t\t}\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\t\t}\n\n\t\treturn pokemon;\n\t}\n\n\trandomCCTeam(): RandomTeamsTypes.RandomSet[] {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst dex = this.dex;\n\t\tconst team = [];\n\n\t\tconst natures = this.dex.natures.all();\n\t\tconst items = this.dex.items.all();\n\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined, undefined, true);\n\n\t\tfor (let forme of randomN) {\n\t\t\tlet species = dex.species.get(forme);\n\t\t\tif (species.isNonstandard) species = dex.species.get(species.baseSpecies);\n\n\t\t\t// Random legal item\n\t\t\tlet item = '';\n\t\t\tlet isIllegalItem;\n\t\t\tlet isBadItem;\n\t\t\tif (this.gen >= 2) {\n\t\t\t\tdo {\n\t\t\t\t\titem = this.sample(items).name;\n\t\t\t\t\tisIllegalItem = this.dex.items.get(item).gen > this.gen || this.dex.items.get(item).isNonstandard;\n\t\t\t\t\tisBadItem = item.startsWith(\"TR\") || this.dex.items.get(item).isPokeball;\n\t\t\t\t} while (isIllegalItem || (isBadItem && this.randomChance(19, 20)));\n\t\t\t}\n\n\t\t\t// Make sure forme is legal\n\t\t\tif (species.battleOnly) {\n\t\t\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t\t\tspecies = dex.species.get(species.battleOnly);\n\t\t\t\t} else {\n\t\t\t\t\tspecies = dex.species.get(this.sample(species.battleOnly));\n\t\t\t\t}\n\t\t\t\tforme = species.name;\n\t\t\t} else if (species.requiredItems && !species.requiredItems.some(req => toID(req) === item)) {\n\t\t\t\tif (!species.changesFrom) throw new Error(`${species.name} needs a changesFrom value`);\n\t\t\t\tspecies = dex.species.get(species.changesFrom);\n\t\t\t\tforme = species.name;\n\t\t\t}\n\n\t\t\t// Make sure that a base forme does not hold any forme-modifier items.\n\t\t\tlet itemData = this.dex.items.get(item);\n\t\t\tif (itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies) {\n\t\t\t\tdo {\n\t\t\t\t\titemData = this.sample(items);\n\t\t\t\t\titem = itemData.name;\n\t\t\t\t} while (\n\t\t\t\t\titemData.gen > this.gen ||\n\t\t\t\t\titemData.isNonstandard ||\n\t\t\t\t\t(itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Random legal ability\n\t\t\tconst abilities = Object.values(species.abilities).filter(a => this.dex.abilities.get(a).gen <= this.gen);\n\t\t\tconst ability: string = this.gen <= 2 ? 'No Ability' : this.sample(abilities);\n\n\t\t\t// Four random unique moves from the movepool\n\t\t\tlet pool = ['struggle'];\n\t\t\tif (forme === 'Smeargle') {\n\t\t\t\tpool = this.dex.moves\n\t\t\t\t\t.all()\n\t\t\t\t\t.filter(move => !(move.isNonstandard || move.isZ || move.isMax || move.realMove))\n\t\t\t\t\t.map(m => m.id);\n\t\t\t} else {\n\t\t\t\tconst formes = ['gastrodoneast', 'pumpkaboosuper', 'zygarde10'];\n\t\t\t\tlet learnset = this.dex.species.getLearnset(species.id);\n\t\t\t\tlet learnsetSpecies = species;\n\t\t\t\tif (formes.includes(species.id) || !learnset) {\n\t\t\t\t\tlearnsetSpecies = this.dex.species.get(species.baseSpecies);\n\t\t\t\t\tlearnset = this.dex.species.getLearnset(learnsetSpecies.id);\n\t\t\t\t}\n\t\t\t\tif (learnset) {\n\t\t\t\t\tpool = Object.keys(learnset).filter(\n\t\t\t\t\t\tmoveid => learnset![moveid].find(learned => learned.startsWith(String(this.gen)))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (learnset && learnsetSpecies === species && species.changesFrom) {\n\t\t\t\t\tlearnset = this.dex.species.getLearnset(toID(species.changesFrom));\n\t\t\t\t\tfor (const moveid in learnset) {\n\t\t\t\t\t\tif (!pool.includes(moveid) && learnset[moveid].some(source => source.startsWith(String(this.gen)))) {\n\t\t\t\t\t\t\tpool.push(moveid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst evoRegion = learnsetSpecies.evoRegion && learnsetSpecies.gen !== this.gen;\n\t\t\t\twhile (learnsetSpecies.prevo) {\n\t\t\t\t\tlearnsetSpecies = this.dex.species.get(learnsetSpecies.prevo);\n\t\t\t\t\tfor (const moveid in learnset) {\n\t\t\t\t\t\tif (!pool.includes(moveid) &&\n\t\t\t\t\t\t\tlearnset[moveid].some(source => source.startsWith(String(this.gen)) && !evoRegion)) {\n\t\t\t\t\t\t\tpool.push(moveid);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst moves = this.multipleSamplesNoReplace(pool, this.maxMoveCount);\n\n\t\t\t// Random EVs\n\t\t\tconst evs: StatsTable = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n\t\t\tconst s: StatID[] = [\"hp\", \"atk\", \"def\", \"spa\", \"spd\", \"spe\"];\n\t\t\tlet evpool = 510;\n\t\t\tdo {\n\t\t\t\tconst x = this.sample(s);\n\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\n\t\t\t\tevs[x] += y;\n\t\t\t\tevpool -= y;\n\t\t\t} while (evpool > 0);\n\n\t\t\t// Random IVs\n\t\t\tconst ivs = {\n\t\t\t\thp: this.random(32),\n\t\t\t\tatk: this.random(32),\n\t\t\t\tdef: this.random(32),\n\t\t\t\tspa: this.random(32),\n\t\t\t\tspd: this.random(32),\n\t\t\t\tspe: this.random(32),\n\t\t\t};\n\n\t\t\t// Random nature\n\t\t\tconst nature = this.sample(natures).name;\n\n\t\t\t// Level balance--calculate directly from stats rather than using some silly lookup table\n\t\t\tconst mbstmin = 1307; // Sunkern has the lowest modified base stat total, and that total is 807\n\n\t\t\tlet stats = species.baseStats;\n\t\t\t// If Wishiwashi, use the school-forme's much higher stats\n\t\t\tif (species.baseSpecies === 'Wishiwashi') stats = Dex.species.get('wishiwashischool').baseStats;\n\n\t\t\t// Modified base stat total assumes 31 IVs, 85 EVs in every stat\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 31 + 21 + 100) + 10;\n\t\t\tmbst += (stats[\"atk\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"def\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"spa\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"spd\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"spe\"] * 2 + 31 + 21 + 100) + 5;\n\n\t\t\tlet level;\n\t\t\tif (this.adjustLevel) {\n\t\t\t\tlevel = this.adjustLevel;\n\t\t\t} else {\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\n\n\t\t\t\twhile (level < 100) {\n\t\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 31 + 21 + 100) * level / 100 + 10);\n\t\t\t\t\t// Since damage is roughly proportional to level\n\t\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\n\t\t\t\t\tif (mbst >= mbstmin) break;\n\t\t\t\t\tlevel++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random happiness\n\t\t\tconst happiness = this.random(256);\n\n\t\t\t// Random shininess\n\t\t\tconst shiny = this.randomChance(1, 1024);\n\n\t\t\tconst set: RandomTeamsTypes.RandomSet = {\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tgender: species.gender,\n\t\t\t\titem,\n\t\t\t\tability,\n\t\t\t\tmoves,\n\t\t\t\tevs,\n\t\t\t\tivs,\n\t\t\t\tnature,\n\t\t\t\tlevel,\n\t\t\t\thappiness,\n\t\t\t\tshiny,\n\t\t\t};\n\t\t\tif (this.gen === 9) {\n\t\t\t\t// Tera type\n\t\t\t\tset.teraType = this.sample(this.dex.types.all()).name;\n\t\t\t}\n\t\t\tteam.push(set);\n\t\t}\n\n\t\treturn team;\n\t}\n\n\trandomNPokemon(n: number, requiredType?: string, minSourceGen?: number, ruleTable?: RuleTable, requireMoves = false) {\n\t\t// Picks `n` random pokemon--no repeats, even among formes\n\t\t// Also need to either normalize for formes or select formes at random\n\t\t// Unreleased are okay but no CAP\n\t\tconst last = [0, 151, 251, 386, 493, 649, 721, 807, 898, 1010][this.gen];\n\n\t\tif (n <= 0 || n > last) throw new Error(`n must be a number between 1 and ${last} (got ${n})`);\n\t\tif (requiredType && !this.dex.types.get(requiredType).exists) {\n\t\t\tthrow new Error(`\"${requiredType}\" is not a valid type.`);\n\t\t}\n\n\t\tconst isNotCustom = !ruleTable;\n\n\t\tconst pool: number[] = [];\n\t\tlet speciesPool: Species[] = [];\n\t\tif (isNotCustom) {\n\t\t\tspeciesPool = [...this.dex.species.all()];\n\t\t\tfor (const species of speciesPool) {\n\t\t\t\tif (species.isNonstandard && species.isNonstandard !== 'Unobtainable') continue;\n\t\t\t\tif (requireMoves) {\n\t\t\t\t\tconst hasMovesInCurrentGen = Object.values(this.dex.species.getLearnset(species.id) || {})\n\t\t\t\t\t\t.some(sources => sources.some(source => source.startsWith('9')));\n\t\t\t\t\tif (!hasMovesInCurrentGen) continue;\n\t\t\t\t}\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\n\t\t\t\tif (minSourceGen && species.gen < minSourceGen) continue;\n\t\t\t\tconst num = species.num;\n\t\t\t\tif (num <= 0 || pool.includes(num)) continue;\n\t\t\t\tif (num > last) break;\n\t\t\t\tpool.push(num);\n\t\t\t}\n\t\t} else {\n\t\t\tconst EXISTENCE_TAG = ['past', 'future', 'lgpe', 'unobtainable', 'cap', 'custom', 'nonexistent'];\n\t\t\tconst nonexistentBanReason = ruleTable.check('nonexistent');\n\t\t\t// Assume tierSpecies does not differ from species here (mega formes can be used without their stone, etc)\n\t\t\tfor (const species of this.dex.species.all()) {\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\n\n\t\t\t\tlet banReason = ruleTable.check('pokemon:' + species.id);\n\t\t\t\tif (banReason) continue;\n\t\t\t\tif (banReason !== '') {\n\t\t\t\t\tif (species.isMega && ruleTable.check('pokemontag:mega')) continue;\n\n\t\t\t\t\tbanReason = ruleTable.check('basepokemon:' + toID(species.baseSpecies));\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '' || this.dex.species.get(species.baseSpecies).isNonstandard !== species.isNonstandard) {\n\t\t\t\t\t\tconst nonexistentCheck = Tags.nonexistent.genericFilter!(species) && nonexistentBanReason;\n\t\t\t\t\t\tlet tagWhitelisted = false;\n\t\t\t\t\t\tlet tagBlacklisted = false;\n\t\t\t\t\t\tfor (const ruleid of ruleTable.tagRules) {\n\t\t\t\t\t\t\tif (ruleid.startsWith('*')) continue;\n\t\t\t\t\t\t\tconst tagid = ruleid.slice(12);\n\t\t\t\t\t\t\tconst tag = Tags[tagid];\n\t\t\t\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) {\n\t\t\t\t\t\t\t\tconst existenceTag = EXISTENCE_TAG.includes(tagid);\n\t\t\t\t\t\t\t\tif (ruleid.startsWith('+')) {\n\t\t\t\t\t\t\t\t\tif (!existenceTag && nonexistentCheck) continue;\n\t\t\t\t\t\t\t\t\ttagWhitelisted = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttagBlacklisted = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tagBlacklisted) continue;\n\t\t\t\t\t\tif (!tagWhitelisted) {\n\t\t\t\t\t\t\tif (ruleTable.check('pokemontag:allpokemon')) continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tspeciesPool.push(species);\n\t\t\t\tconst num = species.num;\n\t\t\t\tif (pool.includes(num)) continue;\n\t\t\t\tpool.push(num);\n\t\t\t}\n\t\t}\n\n\t\tconst hasDexNumber: {[k: string]: number} = {};\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst num = this.sampleNoReplace(pool);\n\t\t\thasDexNumber[num] = i;\n\t\t}\n\n\t\tconst formes: string[][] = [];\n\t\tfor (const species of speciesPool) {\n\t\t\tif (!(species.num in hasDexNumber)) continue;\n\t\t\tif (isNotCustom && (species.gen > this.gen ||\n\t\t\t\t(species.isNonstandard && species.isNonstandard !== 'Unobtainable'))) continue;\n\t\t\tif (!formes[hasDexNumber[species.num]]) formes[hasDexNumber[species.num]] = [];\n\t\t\tformes[hasDexNumber[species.num]].push(species.name);\n\t\t}\n\n\t\tif (formes.length < n) {\n\t\t\tthrow new Error(`Legal Pokemon forme count insufficient to support Max Team Size: (${formes.length} / ${n}).`);\n\t\t}\n\n\t\tconst nPokemon = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tif (!formes[i].length) {\n\t\t\t\tthrow new Error(`Invalid pokemon gen ${this.gen}: ${JSON.stringify(formes)} numbers ${JSON.stringify(hasDexNumber)}`);\n\t\t\t}\n\t\t\tnPokemon.push(this.sample(formes[i]));\n\t\t}\n\t\treturn nPokemon;\n\t}\n\n\trandomHCTeam(): PokemonSet[] {\n\t\tconst hasCustomBans = this.hasDirectCustomBanlistChanges();\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst hasNonexistentBan = hasCustomBans && ruleTable.check('nonexistent');\n\t\tconst hasNonexistentWhitelist = hasCustomBans && (hasNonexistentBan === '');\n\n\t\tif (hasCustomBans) {\n\t\t\tthis.enforceNoDirectComplexBans();\n\t\t}\n\n\t\t// Item Pool\n\t\tconst doItemsExist = this.gen > 1;\n\t\tlet itemPool: Item[] = [];\n\t\tif (doItemsExist) {\n\t\t\tif (!hasCustomBans) {\n\t\t\t\titemPool = [...this.dex.items.all()].filter(item => (item.gen <= this.gen && !item.isNonstandard));\n\t\t\t} else {\n\t\t\t\tconst hasAllItemsBan = ruleTable.check('pokemontag:allitems');\n\t\t\t\tfor (const item of this.dex.items.all()) {\n\t\t\t\t\tlet banReason = ruleTable.check('item:' + item.id);\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '' && item.id) {\n\t\t\t\t\t\tif (hasAllItemsBan) continue;\n\t\t\t\t\t\tif (item.isNonstandard) {\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(item.isNonstandard));\n\t\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\t\tif (banReason !== '' && item.isNonstandard !== 'Unobtainable') {\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\titemPool.push(item);\n\t\t\t\t}\n\t\t\t\tif (ruleTable.check('item:noitem')) {\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('item', itemPool, this.maxTeamSize, 'Max Team Size');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ability Pool\n\t\tconst doAbilitiesExist = (this.gen > 2) && (this.dex.currentMod !== 'gen7letsgo');\n\t\tlet abilityPool: Ability[] = [];\n\t\tif (doAbilitiesExist) {\n\t\t\tif (!hasCustomBans) {\n\t\t\t\tabilityPool = [...this.dex.abilities.all()].filter(ability => (ability.gen <= this.gen && !ability.isNonstandard));\n\t\t\t} else {\n\t\t\t\tconst hasAllAbilitiesBan = ruleTable.check('pokemontag:allabilities');\n\t\t\t\tfor (const ability of this.dex.abilities.all()) {\n\t\t\t\t\tlet banReason = ruleTable.check('ability:' + ability.id);\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '') {\n\t\t\t\t\t\tif (hasAllAbilitiesBan) continue;\n\t\t\t\t\t\tif (ability.isNonstandard) {\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(ability.isNonstandard));\n\t\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\t\tif (banReason !== '') {\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tabilityPool.push(ability);\n\t\t\t\t}\n\t\t\t\tif (ruleTable.check('ability:noability')) {\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('ability', abilityPool, this.maxTeamSize, 'Max Team Size');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Move Pool\n\t\tconst setMoveCount = ruleTable.maxMoveCount;\n\t\tlet movePool: Move[] = [];\n\t\tif (!hasCustomBans) {\n\t\t\tmovePool = [...this.dex.moves.all()].filter(move =>\n\t\t\t\t(move.gen <= this.gen && !move.isNonstandard));\n\t\t} else {\n\t\t\tconst hasAllMovesBan = ruleTable.check('pokemontag:allmoves');\n\t\t\tfor (const move of this.dex.moves.all()) {\n\t\t\t\tlet banReason = ruleTable.check('move:' + move.id);\n\t\t\t\tif (banReason) continue;\n\t\t\t\tif (banReason !== '') {\n\t\t\t\t\tif (hasAllMovesBan) continue;\n\t\t\t\t\tif (move.isNonstandard) {\n\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(move.isNonstandard));\n\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\tif (banReason !== '' && move.isNonstandard !== 'Unobtainable') {\n\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmovePool.push(move);\n\t\t\t}\n\t\t\tthis.enforceCustomPoolSizeNoComplexBans('move', movePool, this.maxTeamSize * setMoveCount, 'Max Team Size * Max Move Count');\n\t\t}\n\n\t\t// Nature Pool\n\t\tconst doNaturesExist = this.gen > 2;\n\t\tlet naturePool: Nature[] = [];\n\t\tif (doNaturesExist) {\n\t\t\tif (!hasCustomBans) {\n\t\t\t\tnaturePool = [...this.dex.natures.all()];\n\t\t\t} else {\n\t\t\t\tconst hasAllNaturesBan = ruleTable.check('pokemontag:allnatures');\n\t\t\t\tfor (const nature of this.dex.natures.all()) {\n\t\t\t\t\tlet banReason = ruleTable.check('nature:' + nature.id);\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '' && nature.id) {\n\t\t\t\t\t\tif (hasAllNaturesBan) continue;\n\t\t\t\t\t\tif (nature.isNonstandard) {\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(nature.isNonstandard));\n\t\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\t\tif (banReason !== '' && nature.isNonstandard !== 'Unobtainable') {\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnaturePool.push(nature);\n\t\t\t\t}\n\t\t\t\t// There is no 'nature:nonature' rule so do not constrain pool size\n\t\t\t}\n\t\t}\n\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined,\n\t\t\thasCustomBans ? ruleTable : undefined);\n\n\t\tconst team = [];\n\t\tfor (const forme of randomN) {\n\t\t\t// Choose forme\n\t\t\tconst species = this.dex.species.get(forme);\n\n\t\t\t// Random unique item\n\t\t\tlet item = '';\n\t\t\tlet itemData;\n\t\t\tlet isBadItem;\n\t\t\tif (doItemsExist) {\n\t\t\t\t// We discard TRs and Balls with 95% probability because of their otherwise overwhelming presence\n\t\t\t\tdo {\n\t\t\t\t\titemData = this.sampleNoReplace(itemPool);\n\t\t\t\t\titem = itemData?.name;\n\t\t\t\t\tisBadItem = item.startsWith(\"TR\") || itemData.isPokeball;\n\t\t\t\t} while (isBadItem && this.randomChance(19, 20) && itemPool.length > this.maxTeamSize);\n\t\t\t}\n\n\t\t\t// Random unique ability\n\t\t\tlet ability = 'No Ability';\n\t\t\tlet abilityData;\n\t\t\tif (doAbilitiesExist) {\n\t\t\t\tabilityData = this.sampleNoReplace(abilityPool);\n\t\t\t\tability = abilityData?.name;\n\t\t\t}\n\n\t\t\t// Random unique moves\n\t\t\tconst m = [];\n\t\t\tdo {\n\t\t\t\tconst move = this.sampleNoReplace(movePool);\n\t\t\t\tm.push(move.id);\n\t\t\t} while (m.length < setMoveCount);\n\n\t\t\t// Random EVs\n\t\t\tconst evs = {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n\t\t\tif (this.gen === 6) {\n\t\t\t\tlet evpool = 510;\n\t\t\t\tdo {\n\t\t\t\t\tconst x = this.sample(Dex.stats.ids());\n\t\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\n\t\t\t\t\tevs[x] += y;\n\t\t\t\t\tevpool -= y;\n\t\t\t\t} while (evpool > 0);\n\t\t\t} else {\n\t\t\t\tfor (const x of Dex.stats.ids()) {\n\t\t\t\t\tevs[x] = this.random(256);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random IVs\n\t\t\tconst ivs: StatsTable = {\n\t\t\t\thp: this.random(32),\n\t\t\t\tatk: this.random(32),\n\t\t\t\tdef: this.random(32),\n\t\t\t\tspa: this.random(32),\n\t\t\t\tspd: this.random(32),\n\t\t\t\tspe: this.random(32),\n\t\t\t};\n\n\t\t\t// Random nature\n\t\t\tlet nature = '';\n\t\t\tif (doNaturesExist && (naturePool.length > 0)) {\n\t\t\t\tnature = this.sample(naturePool).name;\n\t\t\t}\n\n\t\t\t// Level balance\n\t\t\tconst mbstmin = 1307;\n\t\t\tconst stats = species.baseStats;\n\t\t\tlet mbst = (stats['hp'] * 2 + 31 + 21 + 100) + 10;\n\t\t\tmbst += (stats['atk'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['def'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['spa'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['spd'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['spe'] * 2 + 31 + 21 + 100) + 5;\n\n\t\t\tlet level;\n\t\t\tif (this.adjustLevel) {\n\t\t\t\tlevel = this.adjustLevel;\n\t\t\t} else {\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst);\n\t\t\t\twhile (level < 100) {\n\t\t\t\t\tmbst = Math.floor((stats['hp'] * 2 + 31 + 21 + 100) * level / 100 + 10);\n\t\t\t\t\tmbst += Math.floor(((stats['atk'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats['def'] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor(((stats['spa'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats['spd'] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor((stats['spe'] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tif (mbst >= mbstmin) break;\n\t\t\t\t\tlevel++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random happiness\n\t\t\tconst happiness = this.random(256);\n\n\t\t\t// Random shininess\n\t\t\tconst shiny = this.randomChance(1, 1024);\n\n\t\t\tconst set: PokemonSet = {\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tgender: species.gender,\n\t\t\t\titem,\n\t\t\t\tability,\n\t\t\t\tmoves: m,\n\t\t\t\tevs,\n\t\t\t\tivs,\n\t\t\t\tnature,\n\t\t\t\tlevel,\n\t\t\t\thappiness,\n\t\t\t\tshiny,\n\t\t\t};\n\t\t\tif (this.gen === 9) {\n\t\t\t\t// Random Tera type\n\t\t\t\tset.teraType = this.sample(this.dex.types.all()).name;\n\t\t\t}\n\t\t\tteam.push(set);\n\t\t}\n\n\t\treturn team;\n\t}\n}\n\nexport default RandomTeams;\n"],
  "mappings": "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",
  "names": ["moveid", "set", "species"]
}
