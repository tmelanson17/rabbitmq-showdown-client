{
  "version": 3,
  "sources": ["../../sim/dex-species.ts"],
  "sourcesContent": ["import {toID, BasicEffect} from './dex-data';\n\ninterface SpeciesAbility {\n\t0: string;\n\t1?: string;\n\tH?: string;\n\tS?: string;\n}\n\ntype SpeciesTag = \"Mythical\" | \"Restricted Legendary\" | \"Sub-Legendary\" | \"Paradox\";\n\nexport interface SpeciesData extends Partial<Species> {\n\tname: string;\n\t/** National Dex number */\n\tnum: number;\n\n\ttypes: string[];\n\tabilities: SpeciesAbility;\n\tbaseStats: StatsTable;\n\teggGroups: string[];\n\tweightkg: number;\n}\n\nexport type ModdedSpeciesData = SpeciesData | Partial<Omit<SpeciesData, 'name'>> & {inherit: true};\n\nexport interface SpeciesFormatsData {\n\tdoublesTier?: TierTypes.Doubles | TierTypes.Other;\n\tgmaxUnreleased?: boolean;\n\tisNonstandard?: Nonstandard | null;\n\tnatDexTier?: TierTypes.Singles | TierTypes.Other;\n\ttier?: TierTypes.Singles | TierTypes.Other;\n}\n\nexport type ModdedSpeciesFormatsData = SpeciesFormatsData & {inherit?: true};\n\nexport interface LearnsetData {\n\tlearnset?: {[moveid: string]: MoveSource[]};\n\teventData?: EventInfo[];\n\teventOnly?: boolean;\n\tencounters?: EventInfo[];\n\texists?: boolean;\n}\n\nexport type ModdedLearnsetData = LearnsetData & {inherit?: true};\n\nexport class Species extends BasicEffect implements Readonly<BasicEffect & SpeciesFormatsData> {\n\tdeclare readonly effectType: 'Pokemon';\n\t/**\n\t * Species ID. Identical to ID. Note that this is the full ID, e.g.\n\t * 'basculinbluestriped'. To get the base species ID, you need to\n\t * manually read toID(species.baseSpecies).\n\t */\n\tdeclare readonly id: ID;\n\t/**\n\t * Name. Note that this is the full name with forme,\n\t * e.g. 'Basculin-Blue-Striped'. To get the name without forme, see\n\t * `species.baseSpecies`.\n\t */\n\tdeclare readonly name: string;\n\t/**\n\t * Base species. Species, but without the forme name.\n\t *\n\t * DO NOT ASSUME A POKEMON CAN TRANSFORM FROM `baseSpecies` TO\n\t * `species`. USE `changesFrom` FOR THAT.\n\t */\n\treadonly baseSpecies: string;\n\t/**\n\t * Forme name. If the forme exists,\n\t * `species.name === species.baseSpecies + '-' + species.forme`\n\t *\n\t * The games make a distinction between Forme (foorumu) (legendary Pok\u00E9mon)\n\t * and Form (sugata) (non-legendary Pok\u00E9mon). PS does not use the same\n\t * distinction \u2013 they're all \"Forme\" to PS, reflecting current community\n\t * use of the term.\n\t *\n\t * This property only tracks non-cosmetic formes, and will be `''` for\n\t * cosmetic formes.\n\t */\n\treadonly forme: string;\n\t/**\n\t * Base forme name (e.g. 'Altered' for Giratina).\n\t */\n\treadonly baseForme: string;\n\t/**\n\t * Other forms. List of names of cosmetic forms. These should have\n\t * `aliases.js` aliases to this entry, but not have their own\n\t * entry in `pokedex.js`.\n\t */\n\treadonly cosmeticFormes?: string[];\n\t/**\n\t * Other formes. List of names of formes, appears only on the base\n\t * forme. Unlike forms, these have their own entry in `pokedex.js`.\n\t */\n\treadonly otherFormes?: string[];\n\t/**\n\t * List of forme speciesNames in the order they appear in the game data -\n\t * the union of baseSpecies, otherFormes and cosmeticFormes. Appears only on\n\t * the base species forme.\n\t *\n\t * A species's alternate formeindex may change from generation to generation -\n\t * the forme with index N in Gen A is not guaranteed to be the same forme as the\n\t * forme with index in Gen B.\n\t *\n\t * Gigantamaxes are not considered formes by the game (see data/FORMES.md - PS\n\t * labels them as such for convenience) - Gigantamax \"formes\" are instead included at\n\t * the end of the formeOrder list so as not to interfere with the correct index numbers.\n\t */\n\treadonly formeOrder?: string[];\n\t/**\n\t * Sprite ID. Basically the same as ID, but with a dash between\n\t * species and forme.\n\t */\n\treadonly spriteid: string;\n\t/** Abilities. */\n\treadonly abilities: SpeciesAbility;\n\t/** Types. */\n\treadonly types: string[];\n\t/** Added type (added by Trick-Or-Treat or Forest's Curse, but only listed in species by OMs). */\n\treadonly addedType?: string;\n\t/** Pre-evolution. '' if nothing evolves into this Pokemon. */\n\treadonly prevo: string;\n\t/** Evolutions. Array because many Pokemon have multiple evolutions. */\n\treadonly evos: string[];\n\treadonly evoType?: 'trade' | 'useItem' | 'levelMove' | 'levelExtra' | 'levelFriendship' | 'levelHold' | 'other';\n\t/** Evolution condition. falsy if doesn't evolve. */\n\tdeclare readonly evoCondition?: string;\n\t/** Evolution item. falsy if doesn't evolve. */\n\tdeclare readonly evoItem?: string;\n\t/** Evolution move. falsy if doesn't evolve. */\n\treadonly evoMove?: string;\n\t/** Region required to be in for evolution. falsy if doesn't evolve. */\n\treadonly evoRegion?: 'Alola' | 'Galar';\n\t/** Evolution level. falsy if doesn't evolve. */\n\treadonly evoLevel?: number;\n\t/** Is NFE? True if this Pokemon can evolve (Mega evolution doesn't count). */\n\treadonly nfe: boolean;\n\t/** Egg groups. */\n\treadonly eggGroups: string[];\n\t/** True if this species can hatch from an Egg. */\n\treadonly canHatch: boolean;\n\t/**\n\t * Gender. M = always male, F = always female, N = always\n\t * genderless, '' = sometimes male sometimes female.\n\t */\n\treadonly gender: GenderName;\n\t/** Gender ratio. Should add up to 1 unless genderless. */\n\treadonly genderRatio: {M: number, F: number};\n\t/** Base stats. */\n\treadonly baseStats: StatsTable;\n\t/** Max HP. Overrides usual HP calculations (for Shedinja). */\n\treadonly maxHP?: number;\n\t/** A Pokemon's Base Stat Total */\n\treadonly bst: number;\n\t/** Weight (in kg). Not valid for OMs; use weighthg / 10 instead. */\n\treadonly weightkg: number;\n\t/** Weight (in integer multiples of 0.1kg). */\n\treadonly weighthg: number;\n\t/** Height (in m). */\n\treadonly heightm: number;\n\t/** Color. */\n\treadonly color: string;\n\t/**\n\t * Tags, boolean data. Currently just legendary/mythical status.\n\t */\n\treadonly tags: SpeciesTag[];\n\t/** Does this Pokemon have an unreleased hidden ability? */\n\treadonly unreleasedHidden: boolean | 'Past';\n\t/**\n\t * Is it only possible to get the hidden ability on a male pokemon?\n\t * This is mainly relevant to Gen 5.\n\t */\n\treadonly maleOnlyHidden: boolean;\n\t/** True if a pokemon is mega. */\n\treadonly isMega?: boolean;\n\t/** True if a pokemon is primal. */\n\tdeclare readonly isPrimal?: boolean;\n\t/** Name of its Gigantamax move, if a pokemon is capable of gigantamaxing. */\n\treadonly canGigantamax?: string;\n\t/** If this Pokemon can gigantamax, is its gigantamax released? */\n\treadonly gmaxUnreleased?: boolean;\n\t/** True if a Pokemon species is incapable of dynamaxing */\n\treadonly cannotDynamax?: boolean;\n\t/** What it transforms from, if a pokemon is a forme that is only accessible in battle. */\n\treadonly battleOnly?: string | string[];\n\t/** Required item. Do not use this directly; see requiredItems. */\n\treadonly requiredItem?: string;\n\t/** Required move. Move required to use this forme in-battle. */\n\tdeclare readonly requiredMove?: string;\n\t/** Required ability. Ability required to use this forme in-battle. */\n\tdeclare readonly requiredAbility?: string;\n\t/**\n\t * Required items. Items required to be in this forme, e.g. a mega\n\t * stone, or Griseous Orb. Array because Arceus formes can hold\n\t * either a Plate or a Z-Crystal.\n\t */\n\treadonly requiredItems?: string[];\n\n\t/**\n\t * Formes that can transform into this Pokemon, to inherit learnsets\n\t * from. (Like `prevo`, but for transformations that aren't\n\t * technically evolution. Includes in-battle transformations like\n\t * Zen Mode and out-of-battle transformations like Rotom.)\n\t *\n\t * Not filled out for megas/primals - fall back to baseSpecies\n\t * for in-battle formes.\n\t */\n\treadonly changesFrom?: string;\n\n\t/**\n\t * Singles Tier. The Pokemon's location in the Smogon tier system.\n\t */\n\treadonly tier: TierTypes.Singles | TierTypes.Other;\n\t/**\n\t * Doubles Tier. The Pokemon's location in the Smogon doubles tier system.\n\t */\n\treadonly doublesTier: TierTypes.Doubles | TierTypes.Other;\n\t/**\n\t * National Dex Tier. The Pokemon's location in the Smogon National Dex tier system.\n\t */\n\treadonly natDexTier: TierTypes.Singles | TierTypes.Other;\n\n\tconstructor(data: AnyObject) {\n\t\tsuper(data);\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tdata = this;\n\n\t\tthis.fullname = `pokemon: ${data.name}`;\n\t\tthis.effectType = 'Pokemon';\n\t\tthis.baseSpecies = data.baseSpecies || this.name;\n\t\tthis.forme = data.forme || '';\n\t\tthis.baseForme = data.baseForme || '';\n\t\tthis.cosmeticFormes = data.cosmeticFormes || undefined;\n\t\tthis.otherFormes = data.otherFormes || undefined;\n\t\tthis.formeOrder = data.formeOrder || undefined;\n\t\tthis.spriteid = data.spriteid ||\n\t\t\t(toID(this.baseSpecies) + (this.baseSpecies !== this.name ? `-${toID(this.forme)}` : ''));\n\t\tthis.abilities = data.abilities || {0: \"\"};\n\t\tthis.types = data.types || ['???'];\n\t\tthis.addedType = data.addedType || undefined;\n\t\tthis.prevo = data.prevo || '';\n\t\tthis.tier = data.tier || '';\n\t\tthis.doublesTier = data.doublesTier || '';\n\t\tthis.natDexTier = data.natDexTier || '';\n\t\tthis.evos = data.evos || [];\n\t\tthis.evoType = data.evoType || undefined;\n\t\tthis.evoMove = data.evoMove || undefined;\n\t\tthis.evoLevel = data.evoLevel || undefined;\n\t\tthis.nfe = data.nfe || false;\n\t\tthis.eggGroups = data.eggGroups || [];\n\t\tthis.canHatch = data.canHatch || false;\n\t\tthis.gender = data.gender || '';\n\t\tthis.genderRatio = data.genderRatio || (this.gender === 'M' ? {M: 1, F: 0} :\n\t\t\tthis.gender === 'F' ? {M: 0, F: 1} :\n\t\t\tthis.gender === 'N' ? {M: 0, F: 0} :\n\t\t\t{M: 0.5, F: 0.5});\n\t\tthis.requiredItem = data.requiredItem || undefined;\n\t\tthis.requiredItems = this.requiredItems || (this.requiredItem ? [this.requiredItem] : undefined);\n\t\tthis.baseStats = data.baseStats || {hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0};\n\t\tthis.bst = this.baseStats.hp + this.baseStats.atk + this.baseStats.def +\n\t\t\tthis.baseStats.spa + this.baseStats.spd + this.baseStats.spe;\n\t\tthis.weightkg = data.weightkg || 0;\n\t\tthis.weighthg = this.weightkg * 10;\n\t\tthis.heightm = data.heightm || 0;\n\t\tthis.color = data.color || '';\n\t\tthis.tags = data.tags || [];\n\t\tthis.unreleasedHidden = data.unreleasedHidden || false;\n\t\tthis.maleOnlyHidden = !!data.maleOnlyHidden;\n\t\tthis.maxHP = data.maxHP || undefined;\n\t\tthis.isMega = !!(this.forme && ['Mega', 'Mega-X', 'Mega-Y'].includes(this.forme)) || undefined;\n\t\tthis.canGigantamax = data.canGigantamax || undefined;\n\t\tthis.gmaxUnreleased = !!data.gmaxUnreleased;\n\t\tthis.cannotDynamax = !!data.cannotDynamax;\n\t\tthis.battleOnly = data.battleOnly || (this.isMega ? this.baseSpecies : undefined);\n\t\tthis.changesFrom = data.changesFrom ||\n\t\t\t(this.battleOnly !== this.baseSpecies ? this.battleOnly : this.baseSpecies);\n\t\tif (Array.isArray(data.changesFrom)) this.changesFrom = data.changesFrom[0];\n\n\t\tif (!this.gen && this.num >= 1) {\n\t\t\tif (this.num >= 906 || this.forme.includes('Paldea')) {\n\t\t\t\tthis.gen = 9;\n\t\t\t} else if (this.num >= 810 || ['Gmax', 'Galar', 'Galar-Zen', 'Hisui'].includes(this.forme)) {\n\t\t\t\tthis.gen = 8;\n\t\t\t} else if (this.num >= 722 || this.forme.startsWith('Alola') || this.forme === 'Starter') {\n\t\t\t\tthis.gen = 7;\n\t\t\t} else if (this.forme === 'Primal') {\n\t\t\t\tthis.gen = 6;\n\t\t\t\tthis.isPrimal = true;\n\t\t\t\tthis.battleOnly = this.baseSpecies;\n\t\t\t} else if (this.num >= 650 || this.isMega) {\n\t\t\t\tthis.gen = 6;\n\t\t\t} else if (this.num >= 494) {\n\t\t\t\tthis.gen = 5;\n\t\t\t} else if (this.num >= 387) {\n\t\t\t\tthis.gen = 4;\n\t\t\t} else if (this.num >= 252) {\n\t\t\t\tthis.gen = 3;\n\t\t\t} else if (this.num >= 152) {\n\t\t\t\tthis.gen = 2;\n\t\t\t} else {\n\t\t\t\tthis.gen = 1;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class Learnset {\n\treadonly effectType: 'Learnset';\n\t/**\n\t * Keeps track of exactly how a pokemon might learn a move, in the\n\t * form moveid:sources[].\n\t */\n\treadonly learnset?: {[moveid: string]: MoveSource[]};\n\t/** True if the only way to get this Pokemon is from events. */\n\treadonly eventOnly: boolean;\n\t/** List of event data for each event. */\n\treadonly eventData?: EventInfo[];\n\treadonly encounters?: EventInfo[];\n\treadonly exists: boolean;\n\n\tconstructor(data: AnyObject) {\n\t\tthis.exists = true;\n\t\tthis.effectType = 'Learnset';\n\t\tthis.learnset = data.learnset || undefined;\n\t\tthis.eventOnly = !!data.eventOnly;\n\t\tthis.eventData = data.eventData || undefined;\n\t\tthis.encounters = data.encounters || undefined;\n\t}\n}\n\nexport class DexSpecies {\n\treadonly dex: ModdedDex;\n\treadonly speciesCache = new Map<ID, Species>();\n\treadonly learnsetCache = new Map<ID, Learnset>();\n\tallCache: readonly Species[] | null = null;\n\n\tconstructor(dex: ModdedDex) {\n\t\tthis.dex = dex;\n\t}\n\n\tget(name?: string | Species): Species {\n\t\tif (name && typeof name !== 'string') return name;\n\n\t\tname = (name || '').trim();\n\t\tlet id = toID(name);\n\t\tif (id === 'nidoran' && name.endsWith('\u2640')) {\n\t\t\tid = 'nidoranf' as ID;\n\t\t} else if (id === 'nidoran' && name.endsWith('\u2642')) {\n\t\t\tid = 'nidoranm' as ID;\n\t\t}\n\n\t\treturn this.getByID(id);\n\t}\n\tgetByID(id: ID): Species {\n\t\tlet species: Mutable<Species> | undefined = this.speciesCache.get(id);\n\t\tif (species) return species;\n\n\t\tif (this.dex.data.Aliases.hasOwnProperty(id)) {\n\t\t\tif (this.dex.data.FormatsData.hasOwnProperty(id)) {\n\t\t\t\t// special event ID, like Rockruff-Dusk\n\t\t\t\tconst baseId = toID(this.dex.data.Aliases[id]);\n\t\t\t\tspecies = new Species({\n\t\t\t\t\t...this.dex.data.Pokedex[baseId],\n\t\t\t\t\t...this.dex.data.FormatsData[id],\n\t\t\t\t\tname: id,\n\t\t\t\t});\n\t\t\t\tspecies.abilities = {0: species.abilities['S']!};\n\t\t\t} else {\n\t\t\t\tspecies = this.get(this.dex.data.Aliases[id]);\n\t\t\t\tif (species.cosmeticFormes) {\n\t\t\t\t\tfor (const forme of species.cosmeticFormes) {\n\t\t\t\t\t\tif (toID(forme) === id) {\n\t\t\t\t\t\t\tspecies = new Species({\n\t\t\t\t\t\t\t\t...species,\n\t\t\t\t\t\t\t\tname: forme,\n\t\t\t\t\t\t\t\tforme: forme.slice(species.name.length + 1),\n\t\t\t\t\t\t\t\tbaseForme: \"\",\n\t\t\t\t\t\t\t\tbaseSpecies: species.name,\n\t\t\t\t\t\t\t\totherFormes: null,\n\t\t\t\t\t\t\t\tcosmeticFormes: null,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.speciesCache.set(id, species);\n\t\t\treturn species;\n\t\t}\n\n\t\tif (!this.dex.data.Pokedex.hasOwnProperty(id)) {\n\t\t\tlet aliasTo = '';\n\t\t\tconst formeNames: {[k: string]: string[]} = {\n\t\t\t\talola: ['a', 'alola', 'alolan'],\n\t\t\t\tgalar: ['g', 'galar', 'galarian'],\n\t\t\t\thisui: ['h', 'hisui', 'hisuian'],\n\t\t\t\tpaldea: ['p', 'paldea', 'paldean'],\n\t\t\t\tmega: ['m', 'mega'],\n\t\t\t\tprimal: ['p', 'primal'],\n\t\t\t};\n\t\t\tfor (const forme in formeNames) {\n\t\t\t\tlet pokeName = '';\n\t\t\t\tfor (const i of formeNames[forme]) {\n\t\t\t\t\tif (id.startsWith(i)) {\n\t\t\t\t\t\tpokeName = id.slice(i.length);\n\t\t\t\t\t} else if (id.endsWith(i)) {\n\t\t\t\t\t\tpokeName = id.slice(0, -i.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.dex.data.Aliases.hasOwnProperty(pokeName)) pokeName = toID(this.dex.data.Aliases[pokeName]);\n\t\t\t\tif (this.dex.data.Pokedex[pokeName + forme]) {\n\t\t\t\t\taliasTo = pokeName + forme;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (aliasTo) {\n\t\t\t\tspecies = this.get(aliasTo);\n\t\t\t\tif (species.exists) {\n\t\t\t\t\tthis.speciesCache.set(id, species);\n\t\t\t\t\treturn species;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (id && this.dex.data.Pokedex.hasOwnProperty(id)) {\n\t\t\tconst pokedexData = this.dex.data.Pokedex[id];\n\t\t\tconst baseSpeciesTags = pokedexData.baseSpecies && this.dex.data.Pokedex[toID(pokedexData.baseSpecies)].tags;\n\t\t\tspecies = new Species({\n\t\t\t\ttags: baseSpeciesTags,\n\t\t\t\t...pokedexData,\n\t\t\t\t...this.dex.data.FormatsData[id],\n\t\t\t});\n\t\t\t// Inherit any statuses from the base species (Arceus, Silvally).\n\t\t\tconst baseSpeciesStatuses = this.dex.data.Conditions[toID(species.baseSpecies)];\n\t\t\tif (baseSpeciesStatuses !== undefined) {\n\t\t\t\tlet key: keyof EffectData;\n\t\t\t\tfor (key in baseSpeciesStatuses) {\n\t\t\t\t\tif (!(key in species)) (species as any)[key] = baseSpeciesStatuses[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!species.tier && !species.doublesTier && !species.natDexTier && species.baseSpecies !== species.name) {\n\t\t\t\tif (species.baseSpecies === 'Mimikyu') {\n\t\t\t\t\tspecies.tier = this.dex.data.FormatsData[toID(species.baseSpecies)].tier || 'Illegal';\n\t\t\t\t\tspecies.doublesTier = this.dex.data.FormatsData[toID(species.baseSpecies)].doublesTier || 'Illegal';\n\t\t\t\t\tspecies.natDexTier = this.dex.data.FormatsData[toID(species.baseSpecies)].natDexTier || 'Illegal';\n\t\t\t\t} else if (species.id.endsWith('totem')) {\n\t\t\t\t\tspecies.tier = this.dex.data.FormatsData[species.id.slice(0, -5)].tier || 'Illegal';\n\t\t\t\t\tspecies.doublesTier = this.dex.data.FormatsData[species.id.slice(0, -5)].doublesTier || 'Illegal';\n\t\t\t\t\tspecies.natDexTier = this.dex.data.FormatsData[species.id.slice(0, -5)].natDexTier || 'Illegal';\n\t\t\t\t} else if (species.battleOnly) {\n\t\t\t\t\tspecies.tier = this.dex.data.FormatsData[toID(species.battleOnly)].tier || 'Illegal';\n\t\t\t\t\tspecies.doublesTier = this.dex.data.FormatsData[toID(species.battleOnly)].doublesTier || 'Illegal';\n\t\t\t\t\tspecies.natDexTier = this.dex.data.FormatsData[toID(species.battleOnly)].natDexTier || 'Illegal';\n\t\t\t\t} else {\n\t\t\t\t\tconst baseFormatsData = this.dex.data.FormatsData[toID(species.baseSpecies)];\n\t\t\t\t\tif (!baseFormatsData) {\n\t\t\t\t\t\tthrow new Error(`${species.baseSpecies} has no formats-data entry`);\n\t\t\t\t\t}\n\t\t\t\t\tspecies.tier = baseFormatsData.tier || 'Illegal';\n\t\t\t\t\tspecies.doublesTier = baseFormatsData.doublesTier || 'Illegal';\n\t\t\t\t\tspecies.natDexTier = baseFormatsData.natDexTier || 'Illegal';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!species.tier) species.tier = 'Illegal';\n\t\t\tif (!species.doublesTier) species.doublesTier = species.tier as any;\n\t\t\tif (!species.natDexTier) species.natDexTier = species.tier;\n\t\t\tif (species.gen > this.dex.gen) {\n\t\t\t\tspecies.tier = 'Illegal';\n\t\t\t\tspecies.doublesTier = 'Illegal';\n\t\t\t\tspecies.natDexTier = 'Illegal';\n\t\t\t\tspecies.isNonstandard = 'Future';\n\t\t\t}\n\t\t\tif (this.dex.currentMod === 'gen7letsgo' && !species.isNonstandard) {\n\t\t\t\tconst isLetsGo = (\n\t\t\t\t\t(species.num <= 151 || ['Meltan', 'Melmetal'].includes(species.name)) &&\n\t\t\t\t\t(!species.forme || (['Alola', 'Mega', 'Mega-X', 'Mega-Y', 'Starter'].includes(species.forme) &&\n\t\t\t\t\tspecies.name !== 'Pikachu-Alola'))\n\t\t\t\t);\n\t\t\t\tif (!isLetsGo) species.isNonstandard = 'Past';\n\t\t\t}\n\t\t\tif (this.dex.currentMod === 'gen8bdsp' &&\n\t\t\t\t(!species.isNonstandard || [\"Gigantamax\", \"CAP\"].includes(species.isNonstandard))) {\n\t\t\t\tif (species.gen > 4 || (species.num < 1 && species.isNonstandard !== 'CAP') ||\n\t\t\t\t\tspecies.id === 'pichuspikyeared') {\n\t\t\t\t\tspecies.isNonstandard = 'Future';\n\t\t\t\t\tspecies.tier = species.doublesTier = species.natDexTier = 'Illegal';\n\t\t\t\t}\n\t\t\t}\n\t\t\tspecies.nfe = species.evos.some(evo => {\n\t\t\t\tconst evoSpecies = this.get(evo);\n\t\t\t\treturn !evoSpecies.isNonstandard ||\n\t\t\t\t\tevoSpecies.isNonstandard === species?.isNonstandard ||\n\t\t\t\t\t// Pokemon with Hisui evolutions\n\t\t\t\t\tevoSpecies.isNonstandard === \"Unobtainable\";\n\t\t\t});\n\t\t\tspecies.canHatch = species.canHatch ||\n\t\t\t\t(!['Ditto', 'Undiscovered'].includes(species.eggGroups[0]) && !species.prevo && species.name !== 'Manaphy');\n\t\t\tif (this.dex.gen === 1) species.bst -= species.baseStats.spd;\n\t\t\tif (this.dex.gen < 5) delete species.abilities['H'];\n\t\t\tif (this.dex.gen === 3 && this.dex.abilities.get(species.abilities['1']).gen === 4) delete species.abilities['1'];\n\t\t} else {\n\t\t\tspecies = new Species({\n\t\t\t\tid, name: id,\n\t\t\t\texists: false, tier: 'Illegal', doublesTier: 'Illegal', natDexTier: 'Illegal', isNonstandard: 'Custom',\n\t\t\t});\n\t\t}\n\t\tif (species.exists) this.speciesCache.set(id, species);\n\t\treturn species;\n\t}\n\n\tgetLearnset(id: ID): Learnset['learnset'] {\n\t\treturn this.getLearnsetData(id).learnset;\n\t}\n\n\tgetLearnsetData(id: ID): Learnset {\n\t\tlet learnsetData = this.learnsetCache.get(id);\n\t\tif (learnsetData) return learnsetData;\n\t\tif (!this.dex.data.Learnsets.hasOwnProperty(id)) {\n\t\t\treturn new Learnset({exists: false});\n\t\t}\n\t\tlearnsetData = new Learnset(this.dex.data.Learnsets[id]);\n\t\tthis.learnsetCache.set(id, learnsetData);\n\t\treturn learnsetData;\n\t}\n\n\tall(): readonly Species[] {\n\t\tif (this.allCache) return this.allCache;\n\t\tconst species = [];\n\t\tfor (const id in this.dex.data.Pokedex) {\n\t\t\tspecies.push(this.getByID(id as ID));\n\t\t}\n\t\tthis.allCache = species;\n\t\treturn this.allCache;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
