{
  "version": 3,
  "sources": ["../../sim/team-validator.ts"],
  "sourcesContent": ["/**\n * Team Validator\n * Pokemon Showdown - http://pokemonshowdown.com/\n *\n * Handles team validation, and specifically learnset checking.\n *\n * @license MIT\n */\n\nimport {Dex, toID} from './dex';\nimport {Utils} from '../lib';\nimport {Tags} from '../data/tags';\nimport {Teams} from './teams';\nimport {PRNG} from './prng';\n\n/**\n * Describes a possible way to get a pokemon. Is not exhaustive!\n * sourcesBefore covers all sources that do not have exclusive\n * moves (like catching wild pokemon).\n *\n * First character is a generation number, 1-8.\n * Second character is a source ID, one of:\n *\n * - E = egg, 3rd char+ is the father in gen 2-5, empty in gen 6-7\n *   because egg moves aren't restricted to fathers anymore\n * - S = event, 3rd char+ is the index in .eventData\n * - D = Dream World, only 5D is valid\n * - V = Virtual Console or Let's Go transfer, only 7V/8V is valid\n *\n * Designed to match MoveSource where possible.\n */\nexport type PokemonSource = string;\n\n/**\n * Represents a set of possible ways to get a Pok\u00E9mon with a given\n * set.\n *\n * `new PokemonSources()` creates an empty set;\n * `new PokemonSources(dex.gen)` allows all Pokemon.\n *\n * The set mainly stored as an Array `sources`, but for sets that\n * could be sourced from anywhere (for instance, TM moves), we\n * instead just set `sourcesBefore` to a number meaning \"any\n * source at or before this gen is possible.\"\n *\n * In other words, this variable represents the set of all\n * sources in `sources`, union all sources at or before\n * gen `sourcesBefore`.\n */\nexport class PokemonSources {\n\t/**\n\t * A set of specific possible PokemonSources; implemented as\n\t * an Array rather than a Set for perf reasons.\n\t */\n\tsources: PokemonSource[];\n\t/**\n\t * if nonzero: the set also contains all possible sources from\n\t * this gen and earlier.\n\t */\n\tsourcesBefore: number;\n\t/**\n\t * the set requires sources from this gen or later\n\t * this should be unchanged from the format's minimum past gen\n\t * (3 in modern games, 6 if pentagon is required, etc)\n\t */\n\tsourcesAfter: number;\n\tisHidden: boolean | null;\n\t/**\n\t * `limitedEggMoves` is a list of moves that can only be obtained from an\n\t * egg with another father in gen 2-5. If there are multiple such moves,\n\t * potential fathers need to be checked to see if they can actually\n\t * learn the move combination in question.\n\t *\n\t * `null` = the current move is definitely not a limited egg move\n\t *\n\t * `undefined` = the current move may or may not be a limited egg move\n\t */\n\tlimitedEggMoves?: ID[] | null;\n\t/**\n\t * Some Pokemon evolve by having a move in their learnset (like Piloswine\n\t * with Ancient Power). These can only carry three other moves from their\n\t * prevo, because the fourth move must be the evo move. This restriction\n\t * doesn't apply to gen 6+ eggs, which can get around the restriction with\n\t * the relearner.\n\t */\n\tmoveEvoCarryCount: number;\n\n\tbabyOnly?: string;\n\tsketchMove?: string;\n\tdreamWorldMoveCount: number;\n\thm?: string;\n\trestrictiveMoves?: string[];\n\t/** Obscure learn methods */\n\trestrictedMove?: ID;\n\n\tconstructor(sourcesBefore = 0, sourcesAfter = 0) {\n\t\tthis.sources = [];\n\t\tthis.sourcesBefore = sourcesBefore;\n\t\tthis.sourcesAfter = sourcesAfter;\n\t\tthis.isHidden = null;\n\t\tthis.limitedEggMoves = undefined;\n\t\tthis.moveEvoCarryCount = 0;\n\t\tthis.dreamWorldMoveCount = 0;\n\t}\n\tsize() {\n\t\tif (this.sourcesBefore) return Infinity;\n\t\treturn this.sources.length;\n\t}\n\tadd(source: PokemonSource, limitedEggMove?: ID | null) {\n\t\tif (this.sources[this.sources.length - 1] !== source) this.sources.push(source);\n\t\tif (limitedEggMove && this.limitedEggMoves !== null) {\n\t\t\tthis.limitedEggMoves = [limitedEggMove];\n\t\t} else if (limitedEggMove === null) {\n\t\t\tthis.limitedEggMoves = null;\n\t\t}\n\t}\n\taddGen(sourceGen: number) {\n\t\tthis.sourcesBefore = Math.max(this.sourcesBefore, sourceGen);\n\t\tthis.limitedEggMoves = null;\n\t}\n\tminSourceGen() {\n\t\tif (this.sourcesBefore) return this.sourcesAfter || 1;\n\t\tlet min = 10;\n\t\tfor (const source of this.sources) {\n\t\t\tconst sourceGen = parseInt(source.charAt(0));\n\t\t\tif (sourceGen < min) min = sourceGen;\n\t\t}\n\t\tif (min === 10) return 0;\n\t\treturn min;\n\t}\n\tmaxSourceGen() {\n\t\tlet max = this.sourcesBefore;\n\t\tfor (const source of this.sources) {\n\t\t\tconst sourceGen = parseInt(source.charAt(0));\n\t\t\tif (sourceGen > max) max = sourceGen;\n\t\t}\n\t\treturn max;\n\t}\n\tintersectWith(other: PokemonSources) {\n\t\tif (other.sourcesBefore || this.sourcesBefore) {\n\t\t\t// having sourcesBefore is the equivalent of having everything before that gen\n\t\t\t// in sources, so we fill the other array in preparation for intersection\n\t\t\tif (other.sourcesBefore > this.sourcesBefore) {\n\t\t\t\tfor (const source of this.sources) {\n\t\t\t\t\tconst sourceGen = parseInt(source.charAt(0));\n\t\t\t\t\tif (sourceGen <= other.sourcesBefore) {\n\t\t\t\t\t\tother.sources.push(source);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this.sourcesBefore > other.sourcesBefore) {\n\t\t\t\tfor (const source of other.sources) {\n\t\t\t\t\tconst sourceGen = parseInt(source.charAt(0));\n\t\t\t\t\tif (sourceGen <= this.sourcesBefore) {\n\t\t\t\t\t\tthis.sources.push(source);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.sourcesBefore = Math.min(other.sourcesBefore, this.sourcesBefore);\n\t\t}\n\t\tif (this.sources.length) {\n\t\t\tif (other.sources.length) {\n\t\t\t\tconst sourcesSet = new Set(other.sources);\n\t\t\t\tconst intersectSources = this.sources.filter(source => sourcesSet.has(source));\n\t\t\t\tthis.sources = intersectSources;\n\t\t\t} else {\n\t\t\t\tthis.sources = [];\n\t\t\t}\n\t\t}\n\n\t\tif (other.restrictedMove && other.restrictedMove !== this.restrictedMove) {\n\t\t\tif (this.restrictedMove) {\n\t\t\t\t// incompatible\n\t\t\t\tthis.sources = [];\n\t\t\t\tthis.sourcesBefore = 0;\n\t\t\t} else {\n\t\t\t\tthis.restrictedMove = other.restrictedMove;\n\t\t\t}\n\t\t}\n\t\tif (other.limitedEggMoves) {\n\t\t\tif (!this.limitedEggMoves) {\n\t\t\t\tthis.limitedEggMoves = other.limitedEggMoves;\n\t\t\t} else {\n\t\t\t\tthis.limitedEggMoves.push(...other.limitedEggMoves);\n\t\t\t}\n\t\t}\n\t\tthis.moveEvoCarryCount += other.moveEvoCarryCount;\n\t\tthis.dreamWorldMoveCount += other.dreamWorldMoveCount;\n\t\tif (other.sourcesAfter > this.sourcesAfter) this.sourcesAfter = other.sourcesAfter;\n\t\tif (other.isHidden) this.isHidden = true;\n\t}\n}\n\nexport class TeamValidator {\n\treadonly format: Format;\n\treadonly dex: ModdedDex;\n\treadonly gen: number;\n\treadonly ruleTable: import('./dex-formats').RuleTable;\n\treadonly minSourceGen: number;\n\n\treadonly toID: (str: any) => ID;\n\tconstructor(format: string | Format, dex = Dex) {\n\t\tthis.format = dex.formats.get(format);\n\t\tthis.dex = dex.forFormat(this.format);\n\t\tthis.gen = this.dex.gen;\n\t\tthis.ruleTable = this.dex.formats.getRuleTable(this.format);\n\n\t\tthis.minSourceGen = this.ruleTable.minSourceGen;\n\n\t\tthis.toID = toID;\n\t}\n\n\tvalidateTeam(\n\t\tteam: PokemonSet[] | null,\n\t\toptions: {\n\t\t\tremoveNicknames?: boolean,\n\t\t\tskipSets?: {[name: string]: {[key: string]: boolean}},\n\t\t} = {}\n\t): string[] | null {\n\t\tif (team && this.format.validateTeam) {\n\t\t\treturn this.format.validateTeam.call(this, team, options) || null;\n\t\t}\n\t\treturn this.baseValidateTeam(team, options);\n\t}\n\n\tbaseValidateTeam(\n\t\tteam: PokemonSet[] | null,\n\t\toptions: {\n\t\t\tremoveNicknames?: boolean,\n\t\t\tskipSets?: {[name: string]: {[key: string]: boolean}},\n\t\t} = {}\n\t): string[] | null {\n\t\tconst format = this.format;\n\t\tconst dex = this.dex;\n\n\t\tlet problems: string[] = [];\n\t\tconst ruleTable = this.ruleTable;\n\t\tif (format.team) {\n\t\t\tif (team) {\n\t\t\t\treturn [\n\t\t\t\t\t`This format doesn't let you use your own team.`,\n\t\t\t\t\t`If you're not using a custom client, please report this as a bug. If you are, remember to use \\`/utm null\\` before starting a game in this format.`,\n\t\t\t\t];\n\t\t\t}\n\t\t\tconst testTeamSeed = PRNG.generateSeed();\n\t\t\ttry {\n\t\t\t\tconst testTeamGenerator = Teams.getGenerator(format, testTeamSeed);\n\t\t\t\ttestTeamGenerator.getTeam(options); // Throws error if generation fails\n\t\t\t} catch (e) {\n\t\t\t\treturn [\n\t\t\t\t\t`${format.name}'s team generator (${format.team}) failed using these rules and seed (${testTeamSeed}):-`,\n\t\t\t\t\t`${e}`,\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\tif (!team) {\n\t\t\treturn [\n\t\t\t\t`This format requires you to use your own team.`,\n\t\t\t\t`If you're not using a custom client, please report this as a bug.`,\n\t\t\t];\n\t\t}\n\t\tif (!Array.isArray(team)) {\n\t\t\tthrow new Error(`Invalid team data`);\n\t\t}\n\n\t\tif (team.length < ruleTable.minTeamSize) {\n\t\t\tproblems.push(`You must bring at least ${ruleTable.minTeamSize} Pok\\u00E9mon (your team has ${team.length}).`);\n\t\t}\n\t\tif (team.length > ruleTable.maxTeamSize) {\n\t\t\treturn [`You may only bring up to ${ruleTable.maxTeamSize} Pok\\u00E9mon (your team has ${team.length}).`];\n\t\t}\n\n\t\t// A limit is imposed here to prevent too much engine strain or\n\t\t// too much layout deformation - to be exact, this is the limit\n\t\t// allowed in Custom Game.\n\t\tif (team.length > 24) {\n\t\t\tproblems.push(`Your team has more than than 24 Pok\\u00E9mon, which the simulator can't handle.`);\n\t\t\treturn problems;\n\t\t}\n\n\t\tconst teamHas: {[k: string]: number} = {};\n\t\tlet lgpeStarterCount = 0;\n\t\tlet deoxysType;\n\t\tfor (const set of team) {\n\t\t\tif (!set) return [`You sent invalid team data. If you're not using a custom client, please report this as a bug.`];\n\n\t\t\tlet setProblems: string[] | null = null;\n\t\t\tif (options.skipSets && options.skipSets[set.name]) {\n\t\t\t\tfor (const i in options.skipSets[set.name]) {\n\t\t\t\t\tteamHas[i] = (teamHas[i] || 0) + 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetProblems = (format.validateSet || this.validateSet).call(this, set, teamHas);\n\t\t\t}\n\n\t\t\tif (set.species === 'Pikachu-Starter' || set.species === 'Eevee-Starter') {\n\t\t\t\tlgpeStarterCount++;\n\t\t\t\tif (lgpeStarterCount === 2 && ruleTable.isBanned('nonexistent')) {\n\t\t\t\t\tproblems.push(`You can only have one of Pikachu-Starter or Eevee-Starter on a team.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dex.gen === 3 && set.species.startsWith('Deoxys')) {\n\t\t\t\tif (!deoxysType) {\n\t\t\t\t\tdeoxysType = set.species;\n\t\t\t\t} else if (deoxysType !== set.species && ruleTable.isBanned('nonexistent')) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t`You cannot have more than one type of Deoxys forme.`,\n\t\t\t\t\t\t`(Each game in Gen 3 supports only one forme of Deoxys.)`,\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (setProblems) {\n\t\t\t\tproblems = problems.concat(setProblems);\n\t\t\t}\n\t\t\tif (options.removeNicknames) {\n\t\t\t\tconst species = dex.species.get(set.species);\n\t\t\t\tlet crossSpecies: Species;\n\t\t\t\tif (format.name === '[Gen 9] Cross Evolution' && (crossSpecies = dex.species.get(set.name)).exists) {\n\t\t\t\t\tset.name = crossSpecies.name;\n\t\t\t\t} else {\n\t\t\t\t\tset.name = species.baseSpecies;\n\t\t\t\t\tif (species.baseSpecies === 'Unown') set.species = 'Unown';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [rule, source, limit, bans] of ruleTable.complexTeamBans) {\n\t\t\tlet count = 0;\n\t\t\tfor (const ban of bans) {\n\t\t\t\tif (teamHas[ban] > 0) {\n\t\t\t\t\tcount += limit ? teamHas[ban] : 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (limit && count > limit) {\n\t\t\t\tconst clause = source ? ` by ${source}` : ``;\n\t\t\t\tproblems.push(`You are limited to ${limit} of ${rule}${clause}.`);\n\t\t\t} else if (!limit && count >= bans.length) {\n\t\t\t\tconst clause = source ? ` by ${source}` : ``;\n\t\t\t\tproblems.push(`Your team has the combination of ${rule}, which is banned${clause}.`);\n\t\t\t}\n\t\t}\n\n\t\tfor (const rule of ruleTable.keys()) {\n\t\t\tif ('!+-'.includes(rule.charAt(0))) continue;\n\t\t\tconst subformat = dex.formats.get(rule);\n\t\t\tif (subformat.onValidateTeam && ruleTable.has(subformat.id)) {\n\t\t\t\tproblems = problems.concat(subformat.onValidateTeam.call(this, team, format, teamHas) || []);\n\t\t\t}\n\t\t}\n\t\tif (format.onValidateTeam) {\n\t\t\tproblems = problems.concat(format.onValidateTeam.call(this, team, format, teamHas) || []);\n\t\t}\n\n\t\tif (!problems.length) return null;\n\t\treturn problems;\n\t}\n\n\tgetEventOnlyData(species: Species, noRecurse?: boolean): {species: Species, eventData: EventInfo[]} | null {\n\t\tconst dex = this.dex;\n\t\tconst learnset = dex.species.getLearnsetData(species.id);\n\t\tif (!learnset?.eventOnly) {\n\t\t\tif (noRecurse) return null;\n\t\t\treturn this.getEventOnlyData(dex.species.get(species.prevo), true);\n\t\t}\n\n\t\tif (!learnset.eventData && species.forme) {\n\t\t\treturn this.getEventOnlyData(dex.species.get(species.baseSpecies), true);\n\t\t}\n\t\tif (!learnset.eventData) {\n\t\t\tthrow new Error(`Event-only species ${species.name} has no eventData table`);\n\t\t}\n\n\t\treturn {species, eventData: learnset.eventData};\n\t}\n\n\tgetValidationSpecies(set: PokemonSet): [Species, Species] {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\t\tconst species = dex.species.get(set.species);\n\t\tconst item = dex.items.get(set.item);\n\t\tconst ability = dex.abilities.get(set.ability);\n\n\t\tlet outOfBattleSpecies = species;\n\t\tlet tierSpecies = species;\n\t\tif (ability.id === 'battlebond' && species.id === 'greninja') {\n\t\t\toutOfBattleSpecies = dex.species.get('greninjaash');\n\t\t\tif (ruleTable.has('obtainableformes')) {\n\t\t\t\ttierSpecies = outOfBattleSpecies;\n\t\t\t}\n\t\t}\n\t\tif (ability.id === 'owntempo' && species.id === 'rockruff') {\n\t\t\ttierSpecies = outOfBattleSpecies = dex.species.get('rockruffdusk');\n\t\t}\n\n\t\tif (ruleTable.has('obtainableformes')) {\n\t\t\tconst canMegaEvo = dex.gen <= 7 || ruleTable.has('+pokemontag:past');\n\t\t\tif (item.megaEvolves === species.name) {\n\t\t\t\tif (!item.megaStone) throw new Error(`Item ${item.name} has no base form for mega evolution`);\n\t\t\t\ttierSpecies = dex.species.get(item.megaStone);\n\t\t\t} else if (item.id === 'redorb' && species.id === 'groudon') {\n\t\t\t\ttierSpecies = dex.species.get('Groudon-Primal');\n\t\t\t} else if (item.id === 'blueorb' && species.id === 'kyogre') {\n\t\t\t\ttierSpecies = dex.species.get('Kyogre-Primal');\n\t\t\t} else if (canMegaEvo && species.id === 'rayquaza' && set.moves.map(toID).includes('dragonascent' as ID) &&\n\t\t\t\t\t!ruleTable.has('megarayquazaclause')) {\n\t\t\t\ttierSpecies = dex.species.get('Rayquaza-Mega');\n\t\t\t} else if (item.id === 'rustedsword' && species.id === 'zacian') {\n\t\t\t\ttierSpecies = dex.species.get('Zacian-Crowned');\n\t\t\t} else if (item.id === 'rustedshield' && species.id === 'zamazenta') {\n\t\t\t\ttierSpecies = dex.species.get('Zamazenta-Crowned');\n\t\t\t}\n\t\t}\n\n\t\treturn [outOfBattleSpecies, tierSpecies];\n\t}\n\n\tvalidateSet(set: PokemonSet, teamHas: AnyObject): string[] | null {\n\t\tconst format = this.format;\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\tlet problems: string[] = [];\n\t\tif (!set) {\n\t\t\treturn [`This is not a Pokemon.`];\n\t\t}\n\n\t\tlet species = dex.species.get(set.species);\n\t\tset.species = species.name;\n\t\t// Backwards compatability with old Gmax format\n\t\tif (set.species.toLowerCase().endsWith('-gmax') && this.format.id !== 'gen8megamax') {\n\t\t\tset.species = set.species.slice(0, -5);\n\t\t\tspecies = dex.species.get(set.species);\n\t\t\tif (set.name && set.name.endsWith('-Gmax')) set.name = species.baseSpecies;\n\t\t\tset.gigantamax = true;\n\t\t}\n\t\tif (set.name && set.name.length > 18) {\n\t\t\tif (set.name === set.species) {\n\t\t\t\tset.name = species.baseSpecies;\n\t\t\t} else {\n\t\t\t\tproblems.push(`Nickname \"${set.name}\" too long (should be 18 characters or fewer)`);\n\t\t\t}\n\t\t}\n\t\tset.name = dex.getName(set.name);\n\t\tlet item = dex.items.get(Utils.getString(set.item));\n\t\tset.item = item.name;\n\t\tlet ability = dex.abilities.get(Utils.getString(set.ability));\n\t\tset.ability = ability.name;\n\t\tlet nature = dex.natures.get(Utils.getString(set.nature));\n\t\tset.nature = nature.name;\n\t\tif (!Array.isArray(set.moves)) set.moves = [];\n\n\t\tset.name = set.name || species.baseSpecies;\n\t\tlet name = set.species;\n\t\tif (set.species !== set.name && species.baseSpecies !== set.name) {\n\t\t\tname = `${set.name} (${set.species})`;\n\t\t}\n\n\t\tif (!set.teraType && this.gen === 9) {\n\t\t\tset.teraType = species.types[0];\n\t\t}\n\n\t\tif (!set.level) set.level = ruleTable.defaultLevel;\n\n\t\tlet adjustLevel = ruleTable.adjustLevel;\n\t\tif (ruleTable.adjustLevelDown && set.level >= ruleTable.adjustLevelDown) {\n\t\t\tadjustLevel = ruleTable.adjustLevelDown;\n\t\t}\n\t\tif (set.level === adjustLevel || (set.level === 100 && ruleTable.maxLevel < 100)) {\n\t\t\t// Note that we're temporarily setting level 50 pokemon in VGC to level 100\n\t\t\t// This allows e.g. level 50 Hydreigon even though it doesn't evolve until level 64.\n\t\t\t// Leveling up can't make an obtainable pokemon unobtainable, so this is safe.\n\t\t\t// Just remember to set the level back to adjustLevel at the end of validation.\n\t\t\tset.level = ruleTable.maxLevel;\n\t\t}\n\t\tif (set.level < ruleTable.minLevel) {\n\t\t\tproblems.push(`${name} (level ${set.level}) is below the minimum level of ${ruleTable.minLevel}${ruleTable.blame('minlevel')}`);\n\t\t}\n\t\tif (set.level > ruleTable.maxLevel) {\n\t\t\tproblems.push(`${name} (level ${set.level}) is above the maximum level of ${ruleTable.maxLevel}${ruleTable.blame('maxlevel')}`);\n\t\t}\n\n\t\tconst setHas: {[k: string]: true} = {};\n\n\t\tif (!set.evs) set.evs = TeamValidator.fillStats(null, ruleTable.evLimit === null ? 252 : 0);\n\t\tif (!set.ivs) set.ivs = TeamValidator.fillStats(null, 31);\n\n\t\tif (ruleTable.has('obtainableformes')) {\n\t\t\tproblems.push(...this.validateForme(set));\n\t\t\tspecies = dex.species.get(set.species);\n\t\t}\n\t\tconst setSources = this.allSources(species);\n\n\t\tfor (const [rule] of ruleTable) {\n\t\t\tif ('!+-'.includes(rule.charAt(0))) continue;\n\t\t\tconst subformat = dex.formats.get(rule);\n\t\t\tif (subformat.onChangeSet && ruleTable.has(subformat.id)) {\n\t\t\t\tproblems = problems.concat(subformat.onChangeSet.call(this, set, format, setHas, teamHas) || []);\n\t\t\t}\n\t\t}\n\t\tif (format.onChangeSet) {\n\t\t\tproblems = problems.concat(format.onChangeSet.call(this, set, format, setHas, teamHas) || []);\n\t\t}\n\n\t\t// onChangeSet can modify set.species, set.item, set.ability\n\t\tspecies = dex.species.get(set.species);\n\t\titem = dex.items.get(set.item);\n\t\tability = dex.abilities.get(set.ability);\n\n\t\tconst [outOfBattleSpecies, tierSpecies] = this.getValidationSpecies(set);\n\t\tif (ability.id === 'battlebond' && species.id === 'greninja') {\n\t\t\tif (ruleTable.has('obtainablemisc')) {\n\t\t\t\tif (set.gender && set.gender !== 'M') {\n\t\t\t\t\tproblems.push(`Battle Bond Greninja must be male.`);\n\t\t\t\t}\n\t\t\t\tset.gender = 'M';\n\t\t\t}\n\t\t}\n\t\tif (species.id === 'melmetal' && set.gigantamax && this.dex.species.getLearnsetData(species.id).eventData) {\n\t\t\tsetSources.sourcesBefore = 0;\n\t\t\tsetSources.sources = ['8S0 melmetal'];\n\t\t}\n\t\tif (!species.exists) {\n\t\t\treturn [`The Pokemon \"${set.species}\" does not exist.`];\n\t\t}\n\n\t\tif (item.id && !item.exists) {\n\t\t\treturn [`\"${set.item}\" is an invalid item.`];\n\t\t}\n\t\tif (ability.id && !ability.exists) {\n\t\t\tif (dex.gen < 3) {\n\t\t\t\t// gen 1-2 don't have abilities, just silently remove\n\t\t\t\tability = dex.abilities.get('');\n\t\t\t\tset.ability = '';\n\t\t\t} else {\n\t\t\t\treturn [`\"${set.ability}\" is an invalid ability.`];\n\t\t\t}\n\t\t}\n\t\tif (nature.id && !nature.exists) {\n\t\t\tif (dex.gen < 3) {\n\t\t\t\t// gen 1-2 don't have natures, just remove them\n\t\t\t\tnature = dex.natures.get('');\n\t\t\t\tset.nature = '';\n\t\t\t} else {\n\t\t\t\tproblems.push(`\"${set.nature}\" is an invalid nature.`);\n\t\t\t}\n\t\t}\n\t\tif (set.happiness !== undefined && isNaN(set.happiness)) {\n\t\t\tproblems.push(`${name} has an invalid happiness value.`);\n\t\t}\n\t\tif (set.hpType) {\n\t\t\tconst type = dex.types.get(set.hpType);\n\t\t\tif (!type.exists || ['normal', 'fairy'].includes(type.id)) {\n\t\t\t\tproblems.push(`${name}'s Hidden Power type (${set.hpType}) is invalid.`);\n\t\t\t} else {\n\t\t\t\tset.hpType = type.name;\n\t\t\t}\n\t\t}\n\t\tif (set.teraType) {\n\t\t\tconst type = dex.types.get(set.teraType);\n\t\t\tif (!type.exists) {\n\t\t\t\tproblems.push(`${name}'s Terastal type (${set.teraType}) is invalid.`);\n\t\t\t} else {\n\t\t\t\tset.teraType = type.name;\n\t\t\t}\n\t\t}\n\n\t\tlet problem = this.checkSpecies(set, species, tierSpecies, setHas);\n\t\tif (problem) problems.push(problem);\n\n\t\tproblem = this.checkItem(set, item, setHas);\n\t\tif (problem) problems.push(problem);\n\t\tif (ruleTable.has('obtainablemisc')) {\n\t\t\tif (dex.gen === 4 && item.id === 'griseousorb' && species.num !== 487) {\n\t\t\t\tproblems.push(`${set.name} cannot hold the Griseous Orb.`, `(In Gen 4, only Giratina could hold the Griseous Orb).`);\n\t\t\t}\n\t\t\tif (dex.gen <= 1) {\n\t\t\t\tif (item.id) {\n\t\t\t\t\t// no items allowed\n\t\t\t\t\tset.item = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!set.ability) set.ability = 'No Ability';\n\t\tif (ruleTable.has('obtainableabilities')) {\n\t\t\tif (dex.gen <= 2 || dex.currentMod === 'gen7letsgo') {\n\t\t\t\tset.ability = 'No Ability';\n\t\t\t} else {\n\t\t\t\tif (!ability.name || ability.name === 'No Ability') {\n\t\t\t\t\tproblems.push(`${name} needs to have an ability.`);\n\t\t\t\t} else if (!Object.values(species.abilities).includes(ability.name)) {\n\t\t\t\t\tif (tierSpecies.abilities[0] === ability.name) {\n\t\t\t\t\t\tset.ability = species.abilities[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproblems.push(`${name} can't have ${set.ability}.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ability.name === species.abilities['H']) {\n\t\t\t\t\tsetSources.isHidden = true;\n\n\t\t\t\t\tlet unreleasedHidden = species.unreleasedHidden;\n\t\t\t\t\tif (unreleasedHidden === 'Past' && this.minSourceGen < dex.gen) unreleasedHidden = false;\n\n\t\t\t\t\tif (unreleasedHidden && ruleTable.has('-unreleased')) {\n\t\t\t\t\t\tproblems.push(`${name}'s Hidden Ability is unreleased.`);\n\t\t\t\t\t} else if (dex.gen === 7 && ['entei', 'suicune', 'raikou'].includes(species.id) && this.minSourceGen > 1) {\n\t\t\t\t\t\tproblems.push(`${name}'s Hidden Ability is only available from Virtual Console, which is not allowed in this format.`);\n\t\t\t\t\t} else if (dex.gen === 6 && ability.name === 'Symbiosis' &&\n\t\t\t\t\t\t(set.species.endsWith('Orange') || set.species.endsWith('White'))) {\n\t\t\t\t\t\tproblems.push(`${name}'s Hidden Ability is unreleased for the Orange and White forms.`);\n\t\t\t\t\t} else if (dex.gen === 5 && set.level < 10 && (species.maleOnlyHidden || species.gender === 'N')) {\n\t\t\t\t\t\tproblems.push(`${name} must be at least level 10 to have a Hidden Ability.`);\n\t\t\t\t\t}\n\t\t\t\t\tif (species.maleOnlyHidden) {\n\t\t\t\t\t\tif (set.gender && set.gender !== 'M') {\n\t\t\t\t\t\t\tproblems.push(`${name} must be male to have a Hidden Ability.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.gender = 'M';\n\t\t\t\t\t\tsetSources.sources = ['5D'];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetSources.isHidden = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tability = dex.abilities.get(set.ability);\n\t\tproblem = this.checkAbility(set, ability, setHas);\n\t\tif (problem) problems.push(problem);\n\n\t\tif (!set.nature || dex.gen <= 2) {\n\t\t\tset.nature = '';\n\t\t}\n\t\tnature = dex.natures.get(set.nature);\n\t\tproblem = this.checkNature(set, nature, setHas);\n\t\tif (problem) problems.push(problem);\n\n\t\tif (set.moves && Array.isArray(set.moves)) {\n\t\t\tset.moves = set.moves.filter(val => val);\n\t\t}\n\t\tif (!set.moves?.length) {\n\t\t\tproblems.push(`${name} has no moves (it must have at least one to be usable).`);\n\t\t\tset.moves = [];\n\t\t}\n\t\tif (set.moves.length > ruleTable.maxMoveCount) {\n\t\t\tproblems.push(`${name} has ${set.moves.length} moves, which is more than the limit of ${ruleTable.maxMoveCount}.`);\n\t\t\treturn problems;\n\t\t}\n\n\t\tif (ruleTable.isBanned('nonexistent')) {\n\t\t\tproblems.push(...this.validateStats(set, species, setSources));\n\t\t}\n\n\t\tconst moveLegalityWhitelist: {[k: string]: true | undefined} = {};\n\t\tfor (const moveName of set.moves) {\n\t\t\tif (!moveName) continue;\n\t\t\tconst move = dex.moves.get(Utils.getString(moveName));\n\t\t\tif (!move.exists) return [`\"${move.name}\" is an invalid move.`];\n\n\t\t\tproblem = this.checkMove(set, move, setHas);\n\t\t\tif (problem) {\n\t\t\t\tlet allowedByOM;\n\t\t\t\tif (problem.includes('hacking or glitches') &&\n\t\t\t\t\truleTable.has('omunobtainablemoves')) {\n\t\t\t\t\tproblem = `${name}'s ${problem}`;\n\t\t\t\t\tallowedByOM = !this.omCheckCanLearn(move, outOfBattleSpecies, setSources, set, problem);\n\t\t\t\t}\n\t\t\t\tif (!allowedByOM) {\n\t\t\t\t\tproblems.push(problem);\n\t\t\t\t} else {\n\t\t\t\t\tmoveLegalityWhitelist[move.id] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (ruleTable.has('obtainablemoves')) {\n\t\t\tproblems.push(...this.validateMoves(outOfBattleSpecies, set.moves, setSources, set, name, moveLegalityWhitelist));\n\t\t}\n\n\t\tconst learnsetSpecies = dex.species.getLearnsetData(outOfBattleSpecies.id);\n\t\tlet eventOnlyData;\n\n\t\tif (!setSources.sourcesBefore && setSources.sources.length) {\n\t\t\tlet legal = false;\n\t\t\tfor (const source of setSources.sources) {\n\t\t\t\tif (this.validateSource(set, source, setSources, outOfBattleSpecies)) continue;\n\t\t\t\tlegal = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!legal) {\n\t\t\t\tlet nonEggSource = null;\n\t\t\t\tfor (const source of setSources.sources) {\n\t\t\t\t\tif (source.charAt(1) !== 'E') {\n\t\t\t\t\t\tnonEggSource = source;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!nonEggSource) {\n\t\t\t\t\t// all egg moves\n\t\t\t\t\tproblems.push(`${name} can't get its egg move combination (${setSources.limitedEggMoves!.join(', ')}) from any possible father.`);\n\t\t\t\t\tproblems.push(`(Is this incorrect? If so, post the chainbreeding instructions in Bug Reports)`);\n\t\t\t\t} else {\n\t\t\t\t\tif (setSources.sources.length > 1) {\n\t\t\t\t\t\tproblems.push(`${name} has an event-exclusive move that it doesn't qualify for (only one of several ways to get the move will be listed):`);\n\t\t\t\t\t}\n\t\t\t\t\tconst eventProblems = this.validateSource(\n\t\t\t\t\t\tset, nonEggSource, setSources, outOfBattleSpecies, ` because it has a move only available`\n\t\t\t\t\t);\n\t\t\t\t\tif (eventProblems) problems.push(...eventProblems);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (ruleTable.has('obtainablemisc') && (eventOnlyData = this.getEventOnlyData(outOfBattleSpecies))) {\n\t\t\tconst {species: eventSpecies, eventData} = eventOnlyData;\n\t\t\tlet legal = false;\n\t\t\tfor (const event of eventData) {\n\t\t\t\tif (this.validateEvent(set, setSources, event, eventSpecies)) continue;\n\t\t\t\tlegal = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!legal && species.gen <= 2 && dex.gen >= 7 && !this.validateSource(set, '7V', setSources, species)) {\n\t\t\t\tlegal = true;\n\t\t\t}\n\t\t\tif (!legal) {\n\t\t\t\tif (eventData.length === 1) {\n\t\t\t\t\tproblems.push(`${species.name} is only obtainable from an event - it needs to match its event:`);\n\t\t\t\t} else {\n\t\t\t\t\tproblems.push(`${species.name} is only obtainable from events - it needs to match one of its events:`);\n\t\t\t\t}\n\t\t\t\tfor (const [i, event] of eventData.entries()) {\n\t\t\t\t\tif (event.generation <= dex.gen && event.generation >= this.minSourceGen) {\n\t\t\t\t\t\tconst eventInfo = event;\n\t\t\t\t\t\tconst eventNum = i + 1;\n\t\t\t\t\t\tconst eventName = eventData.length > 1 ? ` #${eventNum}` : ``;\n\t\t\t\t\t\tconst eventProblems = this.validateEvent(\n\t\t\t\t\t\t\tset, setSources, eventInfo, eventSpecies, ` to be`, `from its event${eventName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (eventProblems) problems.push(...eventProblems);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet isFromRBYEncounter = false;\n\t\tif (this.gen === 1 && ruleTable.has('obtainablemisc') && !this.ruleTable.has('allowtradeback')) {\n\t\t\tlet lowestEncounterLevel;\n\t\t\tfor (const encounter of learnsetSpecies.encounters || []) {\n\t\t\t\tif (encounter.generation !== 1) continue;\n\t\t\t\tif (!encounter.level) continue;\n\t\t\t\tif (lowestEncounterLevel && encounter.level > lowestEncounterLevel) continue;\n\n\t\t\t\tlowestEncounterLevel = encounter.level;\n\t\t\t}\n\n\t\t\tif (lowestEncounterLevel) {\n\t\t\t\tif (set.level < lowestEncounterLevel) {\n\t\t\t\t\tproblems.push(`${name} is not obtainable at levels below ${lowestEncounterLevel} in Gen 1.`);\n\t\t\t\t}\n\t\t\t\tisFromRBYEncounter = true;\n\t\t\t}\n\t\t}\n\t\tif (!isFromRBYEncounter && ruleTable.has('obtainablemisc')) {\n\t\t\t// FIXME: Event pokemon given at a level under what it normally can be attained at gives a false positive\n\t\t\tlet evoSpecies = species;\n\t\t\twhile (evoSpecies.prevo) {\n\t\t\t\tif (set.level < (evoSpecies.evoLevel || 0)) {\n\t\t\t\t\tproblems.push(`${name} must be at least level ${evoSpecies.evoLevel} to be evolved.`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevoSpecies = dex.species.get(evoSpecies.prevo);\n\t\t\t}\n\t\t}\n\n\t\tif (ruleTable.has('obtainablemoves')) {\n\t\t\tif (species.id === 'keldeo' && set.moves.includes('secretsword') && this.minSourceGen > 5 && dex.gen <= 7) {\n\t\t\t\tproblems.push(`${name} has Secret Sword, which is only compatible with Keldeo-Ordinary obtained from Gen 5.`);\n\t\t\t}\n\t\t\tconst requiresGen3Source = setSources.maxSourceGen() <= 3;\n\t\t\tif (requiresGen3Source && dex.abilities.get(set.ability).gen === 4 && !species.prevo && dex.gen <= 5) {\n\t\t\t\t// Ability Capsule allows this in Gen 6+\n\t\t\t\tproblems.push(`${name} has a Gen 4 ability and isn't evolved - it can't use moves from Gen 3.`);\n\t\t\t}\n\t\t\tconst canUseAbilityPatch = dex.gen >= 8 && format.mod !== 'gen8dlc1';\n\t\t\tif (setSources.isHidden && !canUseAbilityPatch && setSources.maxSourceGen() < 5) {\n\t\t\t\tproblems.push(`${name} has a Hidden Ability - it can't use moves from before Gen 5.`);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tspecies.maleOnlyHidden && setSources.isHidden && setSources.sourcesBefore < 5 &&\n\t\t\t\tsetSources.sources.every(source => source.charAt(1) === 'E')\n\t\t\t) {\n\t\t\t\tproblems.push(`${name} has an unbreedable Hidden Ability - it can't use egg moves.`);\n\t\t\t}\n\t\t}\n\n\t\tif (teamHas) {\n\t\t\tfor (const i in setHas) {\n\t\t\t\tif (i in teamHas) {\n\t\t\t\t\tteamHas[i]++;\n\t\t\t\t} else {\n\t\t\t\t\tteamHas[i] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const [rule, source, limit, bans] of ruleTable.complexBans) {\n\t\t\tlet count = 0;\n\t\t\tfor (const ban of bans) {\n\t\t\t\tif (setHas[ban]) count++;\n\t\t\t}\n\t\t\tif (limit && count > limit) {\n\t\t\t\tconst clause = source ? ` by ${source}` : ``;\n\t\t\t\tproblems.push(`${name} is limited to ${limit} of ${rule}${clause}.`);\n\t\t\t} else if (!limit && count >= bans.length) {\n\t\t\t\tconst clause = source ? ` by ${source}` : ``;\n\t\t\t\tif (source === 'Obtainable Moves') {\n\t\t\t\t\tproblems.push(`${name} has the combination of ${rule}, which is impossible to obtain legitimately.`);\n\t\t\t\t} else {\n\t\t\t\t\tproblems.push(`${name} has the combination of ${rule}, which is banned${clause}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [rule] of ruleTable) {\n\t\t\tif ('!+-'.includes(rule.charAt(0))) continue;\n\t\t\tconst subformat = dex.formats.get(rule);\n\t\t\tif (subformat.onValidateSet && ruleTable.has(subformat.id)) {\n\t\t\t\tproblems = problems.concat(subformat.onValidateSet.call(this, set, format, setHas, teamHas) || []);\n\t\t\t}\n\t\t}\n\t\tif (format.onValidateSet) {\n\t\t\tproblems = problems.concat(format.onValidateSet.call(this, set, format, setHas, teamHas) || []);\n\t\t}\n\n\t\tconst nameSpecies = dex.species.get(set.name);\n\t\tif (nameSpecies.exists && nameSpecies.name.toLowerCase() === set.name.toLowerCase()) {\n\t\t\t// nickname is the name of a species\n\t\t\tif (nameSpecies.baseSpecies === species.baseSpecies) {\n\t\t\t\tset.name = species.baseSpecies;\n\t\t\t} else if (nameSpecies.name !== species.name && nameSpecies.name !== species.baseSpecies) {\n\t\t\t\t// nickname species doesn't match actual species\n\t\t\t\t// Nickname Clause\n\t\t\t\tproblems.push(`${name} must not be nicknamed a different Pok\u00E9mon species than what it actually is.`);\n\t\t\t}\n\t\t}\n\n\t\tif (!problems.length) {\n\t\t\tif (adjustLevel) set.level = adjustLevel;\n\t\t\treturn null;\n\t\t}\n\n\t\treturn problems;\n\t}\n\n\tvalidateStats(set: PokemonSet, species: Species, setSources: PokemonSources) {\n\t\tconst ruleTable = this.ruleTable;\n\t\tconst dex = this.dex;\n\n\t\tconst allowAVs = ruleTable.has('allowavs');\n\t\tconst evLimit = ruleTable.evLimit;\n\t\tconst canBottleCap = dex.gen >= 7 && (set.level >= (dex.gen < 9 ? 100 : 50) || !ruleTable.has('obtainablemisc'));\n\n\t\tif (!set.evs) set.evs = TeamValidator.fillStats(null, evLimit === null ? 252 : 0);\n\t\tif (!set.ivs) set.ivs = TeamValidator.fillStats(null, 31);\n\n\t\tconst problems = [];\n\t\tconst name = set.name || set.species;\n\n\t\tconst maxedIVs = Object.values(set.ivs).every(stat => stat === 31);\n\t\tfor (const moveName of set.moves) {\n\t\t\tconst move = dex.moves.get(moveName);\n\t\t\tif (move.id === 'hiddenpower' && move.type !== 'Normal') {\n\t\t\t\tif (!set.hpType) {\n\t\t\t\t\tset.hpType = move.type;\n\t\t\t\t} else if (set.hpType !== move.type && ruleTable.has('obtainablemisc')) {\n\t\t\t\t\tproblems.push(`${name}'s Hidden Power type ${set.hpType} is incompatible with Hidden Power ${move.type}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (set.hpType && maxedIVs && ruleTable.has('obtainablemisc')) {\n\t\t\tif (dex.gen <= 2) {\n\t\t\t\tconst HPdvs = dex.types.get(set.hpType).HPdvs;\n\t\t\t\tset.ivs = {hp: 30, atk: 30, def: 30, spa: 30, spd: 30, spe: 30};\n\t\t\t\tlet statName: StatID;\n\t\t\t\tfor (statName in HPdvs) {\n\t\t\t\t\tset.ivs[statName] = HPdvs[statName]! * 2;\n\t\t\t\t}\n\t\t\t\tset.ivs.hp = -1;\n\t\t\t} else if (!canBottleCap) {\n\t\t\t\tset.ivs = TeamValidator.fillStats(dex.types.get(set.hpType).HPivs, 31);\n\t\t\t}\n\t\t}\n\n\t\tconst cantBreedNorEvolve = (species.eggGroups[0] === 'Undiscovered' && !species.prevo && !species.nfe);\n\t\tconst isLegendary = (cantBreedNorEvolve && !species.tags.includes('Paradox') && ![\n\t\t\t'Pikachu', 'Unown', 'Dracozolt', 'Arctozolt', 'Dracovish', 'Arctovish',\n\t\t].includes(species.baseSpecies)) || [\n\t\t\t'Manaphy', 'Cosmog', 'Cosmoem', 'Solgaleo', 'Lunala',\n\t\t].includes(species.baseSpecies);\n\t\tconst diancieException = species.name === 'Diancie' && !set.shiny;\n\t\tconst has3PerfectIVs = setSources.minSourceGen() >= 6 && isLegendary && !diancieException;\n\n\t\tif (set.hpType === 'Fighting' && ruleTable.has('obtainablemisc')) {\n\t\t\tif (has3PerfectIVs) {\n\t\t\t\t// Legendary Pokemon must have at least 3 perfect IVs in gen 6+\n\t\t\t\tproblems.push(`${name} must not have Hidden Power Fighting because it starts with 3 perfect IVs because it's a Gen 6+ legendary.`);\n\t\t\t}\n\t\t}\n\n\t\tif (has3PerfectIVs && ruleTable.has('obtainablemisc')) {\n\t\t\tlet perfectIVs = 0;\n\t\t\tfor (const stat in set.ivs) {\n\t\t\t\tif (set.ivs[stat as 'hp'] >= 31) perfectIVs++;\n\t\t\t}\n\t\t\tif (perfectIVs < 3) {\n\t\t\t\tconst reason = (this.minSourceGen === 6 ? ` and this format requires Gen ${dex.gen} Pok\u00E9mon` : ` in Gen 6 or later`);\n\t\t\t\tproblems.push(`${name} must have at least three perfect IVs because it's a legendary${reason}.`);\n\t\t\t}\n\t\t}\n\n\t\tif (set.hpType && !canBottleCap) {\n\t\t\tconst ivHpType = dex.getHiddenPower(set.ivs).type;\n\t\t\tif (set.hpType !== ivHpType) {\n\t\t\t\tproblems.push(`${name} has Hidden Power ${set.hpType}, but its IVs are for Hidden Power ${ivHpType}.`);\n\t\t\t}\n\t\t} else if (set.hpType) {\n\t\t\tif (!this.possibleBottleCapHpType(set.hpType, set.ivs)) {\n\t\t\t\tproblems.push(`${name} has Hidden Power ${set.hpType}, but its IVs don't allow this even with (Bottle Cap) Hyper Training.`);\n\t\t\t}\n\t\t}\n\n\t\tif (dex.gen <= 2) {\n\t\t\t// validate DVs\n\t\t\tconst ivs = set.ivs;\n\t\t\tconst atkDV = Math.floor(ivs.atk / 2);\n\t\t\tconst defDV = Math.floor(ivs.def / 2);\n\t\t\tconst speDV = Math.floor(ivs.spe / 2);\n\t\t\tconst spcDV = Math.floor(ivs.spa / 2);\n\t\t\tconst expectedHpDV = (atkDV % 2) * 8 + (defDV % 2) * 4 + (speDV % 2) * 2 + (spcDV % 2);\n\t\t\tif (ivs.hp === -1) ivs.hp = expectedHpDV * 2;\n\t\t\tconst hpDV = Math.floor(ivs.hp / 2);\n\t\t\tif (expectedHpDV !== hpDV) {\n\t\t\t\tproblems.push(`${name} has an HP DV of ${hpDV}, but its Atk, Def, Spe, and Spc DVs give it an HP DV of ${expectedHpDV}.`);\n\t\t\t}\n\t\t\tif (ivs.spa !== ivs.spd) {\n\t\t\t\tif (dex.gen === 2) {\n\t\t\t\t\tproblems.push(`${name} has different SpA and SpD DVs, which is not possible in Gen 2.`);\n\t\t\t\t} else {\n\t\t\t\t\tivs.spd = ivs.spa;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dex.gen > 1 && !species.gender) {\n\t\t\t\t// Gen 2 gender is calculated from the Atk DV.\n\t\t\t\t// High Atk DV <-> M. The meaning of \"high\" depends on the gender ratio.\n\t\t\t\tconst genderThreshold = species.genderRatio.F * 16;\n\n\t\t\t\tconst expectedGender = (atkDV >= genderThreshold ? 'M' : 'F');\n\t\t\t\tif (set.gender && set.gender !== expectedGender) {\n\t\t\t\t\tproblems.push(`${name} is ${set.gender}, but it has an Atk DV of ${atkDV}, which makes its gender ${expectedGender}.`);\n\t\t\t\t} else {\n\t\t\t\t\tset.gender = expectedGender;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\n\t\t\t\tset.species === 'Marowak' && toID(set.item) === 'thickclub' &&\n\t\t\t\tset.moves.map(toID).includes('swordsdance' as ID) && set.level === 100\n\t\t\t) {\n\t\t\t\t// Marowak hack\n\t\t\t\tset.ivs.atk = Math.floor(set.ivs.atk / 2) * 2;\n\t\t\t\twhile (set.evs.atk > 0 && 2 * 80 + set.ivs.atk + Math.floor(set.evs.atk / 4) + 5 > 255) {\n\t\t\t\t\tset.evs.atk -= 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dex.gen > 1) {\n\t\t\t\tconst expectedShiny = !!(defDV === 10 && speDV === 10 && spcDV === 10 && atkDV % 4 >= 2);\n\t\t\t\tif (expectedShiny && !set.shiny) {\n\t\t\t\t\tproblems.push(`${name} is not shiny, which does not match its DVs.`);\n\t\t\t\t} else if (!expectedShiny && set.shiny) {\n\t\t\t\t\tproblems.push(`${name} is shiny, which does not match its DVs (its DVs must all be 10, except Atk which must be 2, 3, 6, 7, 10, 11, 14, or 15).`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tset.nature = 'Serious';\n\t\t}\n\n\t\tfor (const stat in set.evs) {\n\t\t\tif (set.evs[stat as 'hp'] < 0) {\n\t\t\t\tproblems.push(`${name} has less than 0 ${allowAVs ? 'Awakening Values' : 'EVs'} in ${Dex.stats.names[stat as 'hp']}.`);\n\t\t\t}\n\t\t}\n\n\t\tif (dex.currentMod === 'gen7letsgo') { // AVs\n\t\t\tfor (const stat in set.evs) {\n\t\t\t\tif (set.evs[stat as 'hp'] > 0 && !allowAVs) {\n\t\t\t\t\tproblems.push(`${name} has Awakening Values but this format doesn't allow them.`);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (set.evs[stat as 'hp'] > 200) {\n\t\t\t\t\tproblems.push(`${name} has more than 200 Awakening Values in ${Dex.stats.names[stat as 'hp']}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // EVs\n\t\t\tfor (const stat in set.evs) {\n\t\t\t\tif (set.evs[stat as StatID] > 255) {\n\t\t\t\t\tproblems.push(`${name} has more than 255 EVs in ${Dex.stats.names[stat as 'hp']}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dex.gen <= 2) {\n\t\t\t\tif (set.evs.spa !== set.evs.spd) {\n\t\t\t\t\tif (dex.gen === 2) {\n\t\t\t\t\t\tproblems.push(`${name} has different SpA and SpD EVs, which is not possible in Gen 2.`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tset.evs.spd = set.evs.spa;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet totalEV = 0;\n\t\tfor (const stat in set.evs) totalEV += set.evs[stat as 'hp'];\n\t\tif (!this.format.debug) {\n\t\t\tif (set.level > 1 && evLimit !== 0 && totalEV === 0) {\n\t\t\t\tproblems.push(`${name} has exactly 0 EVs - did you forget to EV it? (If this was intentional, add exactly 1 to one of your EVs, which won't change its stats but will tell us that it wasn't a mistake).`);\n\t\t\t} else if (![508, 510].includes(evLimit!) && [508, 510].includes(totalEV)) {\n\t\t\t\tproblems.push(`${name} has exactly ${totalEV} EVs, but this format does not restrict you to 510 EVs (If this was intentional, add exactly 1 to one of your EVs, which won't change its stats but will tell us that it wasn't a mistake).`);\n\t\t\t}\n\t\t\t// Check for level import errors from user in VGC -> DOU, etc.\n\t\t\t// Note that in VGC etc (Adjust Level Down = 50), `set.level` will be 100 here for validation purposes\n\t\t\tif (set.level === 50 && ruleTable.maxLevel !== 50 && !ruleTable.maxTotalLevel && evLimit !== 0 && totalEV % 4 === 0) {\n\t\t\t\tproblems.push(`${name} is level 50, but this format allows level ${ruleTable.maxLevel} Pok\u00E9mon. (If this was intentional, add exactly 1 to one of your EVs, which won't change its stats but will tell us that it wasn't a mistake).`);\n\t\t\t}\n\t\t}\n\n\t\tif (evLimit !== null && totalEV > evLimit) {\n\t\t\tif (!evLimit) {\n\t\t\t\tproblems.push(`${name} has EVs, which is not allowed by this format.`);\n\t\t\t} else {\n\t\t\t\tproblems.push(`${name} has ${totalEV} total EVs, which is more than this format's limit of ${evLimit}.`);\n\t\t\t}\n\t\t}\n\n\t\treturn problems;\n\t}\n\n\t/**\n\t * Not exhaustive, just checks Atk and Spe, which are the only competitively\n\t * relevant IVs outside of extremely obscure situations.\n\t */\n\tpossibleBottleCapHpType(type: string, ivs: StatsTable) {\n\t\tif (!type) return true;\n\t\tif (['Dark', 'Dragon', 'Grass', 'Ghost', 'Poison'].includes(type)) {\n\t\t\t// Spe must be odd\n\t\t\tif (ivs.spe % 2 === 0) return false;\n\t\t}\n\t\tif (['Psychic', 'Fire', 'Rock', 'Fighting'].includes(type)) {\n\t\t\t// Spe must be even\n\t\t\tif (ivs.spe !== 31 && ivs.spe % 2 === 1) return false;\n\t\t}\n\t\tif (type === 'Dark') {\n\t\t\t// Atk must be odd\n\t\t\tif (ivs.atk % 2 === 0) return false;\n\t\t}\n\t\tif (['Ice', 'Water'].includes(type)) {\n\t\t\t// Spe or Atk must be odd\n\t\t\tif (ivs.spe % 2 === 0 && ivs.atk % 2 === 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tvalidateSource(\n\t\tset: PokemonSet, source: PokemonSource, setSources: PokemonSources, species: Species, because: string\n\t): string[] | undefined;\n\tvalidateSource(\n\t\tset: PokemonSet, source: PokemonSource, setSources: PokemonSources, species: Species\n\t): true | undefined;\n\t/**\n\t * Returns array of error messages if invalid, undefined if valid\n\t *\n\t * If `because` is not passed, instead returns true if invalid.\n\t */\n\tvalidateSource(\n\t\tset: PokemonSet, source: PokemonSource, setSources: PokemonSources, species: Species, because?: string\n\t) {\n\t\tlet eventData: EventInfo | undefined;\n\t\tlet eventSpecies = species;\n\t\tif (source.charAt(1) === 'S') {\n\t\t\tconst splitSource = source.substr(source.charAt(2) === 'T' ? 3 : 2).split(' ');\n\t\t\tconst dex = (this.dex.gen === 1 ? this.dex.mod('gen2') : this.dex);\n\t\t\teventSpecies = dex.species.get(splitSource[1]);\n\t\t\tconst eventLsetData = this.dex.species.getLearnsetData(eventSpecies.id);\n\t\t\teventData = eventLsetData.eventData?.[parseInt(splitSource[0])];\n\t\t\tif (!eventData) {\n\t\t\t\tthrow new Error(`${eventSpecies.name} from ${species.name} doesn't have data for event ${source}`);\n\t\t\t}\n\t\t} else if (source === '7V') {\n\t\t\tconst isMew = species.id === 'mew';\n\t\t\tconst isCelebi = species.id === 'celebi';\n\t\t\tconst g7speciesName = (species.gen > 2 && species.prevo) ? species.prevo : species.id;\n\t\t\tconst isHidden = !!this.dex.mod('gen7').species.get(g7speciesName).abilities['H'];\n\t\t\teventData = {\n\t\t\t\tgeneration: 2,\n\t\t\t\tlevel: isMew ? 5 : isCelebi ? 30 : 3, // Level 1/2 Pok\u00E9mon can't be obtained by transfer from RBY/GSC\n\t\t\t\tperfectIVs: isMew || isCelebi ? 5 : 3,\n\t\t\t\tisHidden,\n\t\t\t\tshiny: isMew ? undefined : 1,\n\t\t\t\tpokeball: 'pokeball',\n\t\t\t\tfrom: 'Gen 1-2 Virtual Console transfer',\n\t\t\t};\n\t\t} else if (source === '8V') {\n\t\t\tconst isMew = species.id === 'mew';\n\t\t\teventData = {\n\t\t\t\tgeneration: 8,\n\t\t\t\tperfectIVs: isMew ? 3 : undefined,\n\t\t\t\tshiny: isMew ? undefined : 1,\n\t\t\t\tfrom: 'Gen 7 Let\\'s Go! HOME transfer',\n\t\t\t};\n\t\t} else if (source.charAt(1) === 'D') {\n\t\t\teventData = {\n\t\t\t\tgeneration: 5,\n\t\t\t\tlevel: 10,\n\t\t\t\tfrom: 'Gen 5 Dream World',\n\t\t\t\tisHidden: !!this.dex.mod('gen5').species.get(species.id).abilities['H'],\n\t\t\t};\n\t\t} else if (source.charAt(1) === 'E') {\n\t\t\tif (this.findEggMoveFathers(source, species, setSources)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (because) throw new Error(`Wrong place to get an egg incompatibility message`);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new Error(`Unidentified source ${source} passed to validateSource`);\n\t\t}\n\n\t\t// complicated fancy return signature\n\t\treturn this.validateEvent(set, setSources, eventData, eventSpecies, because as any) as any;\n\t}\n\n\tfindEggMoveFathers(source: PokemonSource, species: Species, setSources: PokemonSources): boolean;\n\tfindEggMoveFathers(source: PokemonSource, species: Species, setSources: PokemonSources, getAll: true): ID[] | null;\n\tfindEggMoveFathers(source: PokemonSource, species: Species, setSources: PokemonSources, getAll = false) {\n\t\t// tradebacks have an eggGen of 2 even though the source is 1ET\n\t\tconst eggGen = Math.max(parseInt(source.charAt(0)), 2);\n\t\tconst fathers: ID[] = [];\n\t\t// Gen 6+ don't have egg move incompatibilities\n\t\t// (except for certain cases with baby Pokemon not handled here)\n\t\tif (!getAll && eggGen >= 6) return true;\n\n\t\tconst eggMoves = setSources.limitedEggMoves;\n\t\t// must have 2 or more egg moves to have egg move incompatibilities\n\t\tif (!eggMoves) {\n\t\t\t// happens often in gen 1-6 LC if your only egg moves are level-up moves,\n\t\t\t// which aren't limited and so aren't in `limitedEggMoves`\n\t\t\treturn getAll ? ['*'] : true;\n\t\t}\n\t\tif (!getAll && eggMoves.length <= 1) return true;\n\n\t\t// gen 1 eggs come from gen 2 breeding\n\t\tconst dex = this.dex.gen === 1 ? this.dex.mod('gen2') : this.dex;\n\t\t// In Gen 5 and earlier, egg moves can only be inherited from the father\n\t\t// we'll test each possible father separately\n\t\tlet eggGroups = species.eggGroups;\n\t\tif (species.id === 'nidoqueen' || species.id === 'nidorina') {\n\t\t\teggGroups = dex.species.get('nidoranf').eggGroups;\n\t\t} else if (species.id === 'shedinja') {\n\t\t\t// Shedinja and Nincada are different Egg groups; Shedinja itself is genderless\n\t\t\teggGroups = dex.species.get('nincada').eggGroups;\n\t\t} else if (dex !== this.dex) {\n\t\t\t// Gen 1 tradeback; grab the egg groups from Gen 2\n\t\t\teggGroups = dex.species.get(species.id).eggGroups;\n\t\t}\n\t\tif (eggGroups[0] === 'Undiscovered') eggGroups = dex.species.get(species.evos[0]).eggGroups;\n\t\tif (eggGroups[0] === 'Undiscovered' || !eggGroups.length) {\n\t\t\tthrow new Error(`${species.name} has no egg groups for source ${source}`);\n\t\t}\n\t\t// no chainbreeding necessary if the father can be Smeargle\n\t\tif (!getAll && eggGroups.includes('Field')) return true;\n\n\t\t// try to find a father to inherit the egg move combination from\n\t\tfor (const father of dex.species.all()) {\n\t\t\t// can't inherit from CAP pokemon\n\t\t\tif (father.isNonstandard) continue;\n\t\t\t// can't breed mons from future gens\n\t\t\tif (father.gen > eggGen) continue;\n\t\t\t// father must be male\n\t\t\tif (father.gender === 'N' || father.gender === 'F') continue;\n\t\t\t// can't inherit from dex entries with no learnsets\n\t\t\tif (!dex.species.getLearnset(father.id)) continue;\n\t\t\t// something is clearly wrong if its only possible father is itself\n\t\t\t// (exceptions: ExtremeSpeed Dragonite, Self-destruct Snorlax)\n\t\t\tif (species.id === father.id && !['dragonite', 'snorlax'].includes(father.id)) continue;\n\t\t\t// don't check NFE Pok\u00E9mon - their evolutions will know all their moves and more\n\t\t\t// exception: Combee/Salandit, because their evos can't be fathers\n\t\t\tif (father.evos.length) {\n\t\t\t\tconst evolvedFather = dex.species.get(father.evos[0]);\n\t\t\t\tif (evolvedFather.gen <= eggGen && evolvedFather.gender !== 'F') continue;\n\t\t\t}\n\n\t\t\t// must be able to breed with father\n\t\t\tif (!father.eggGroups.some(eggGroup => eggGroups.includes(eggGroup))) continue;\n\n\t\t\t// father must be able to learn the move\n\t\t\tif (!this.fatherCanLearn(father, eggMoves, eggGen)) continue;\n\n\t\t\t// father found!\n\t\t\tif (!getAll) return true;\n\t\t\tfathers.push(father.id);\n\t\t}\n\t\tif (!getAll) return false;\n\t\treturn (!fathers.length && eggGen < 6) ? null : fathers;\n\t}\n\n\t/**\n\t * We could, if we wanted, do a complete move validation of the father's\n\t * moveset to see if it's valid. This would recurse and be NP-Hard so\n\t * instead we won't. We'll instead use a simplified algorithm: The father\n\t * can learn the moveset if it has at most one egg/event move.\n\t *\n\t * `eggGen` should be 5 or earlier. Later gens should never call this\n\t * function (the answer is always yes).\n\t */\n\tfatherCanLearn(species: Species, moves: ID[], eggGen: number) {\n\t\tlet learnset = this.dex.species.getLearnset(species.id);\n\t\tif (!learnset) return false;\n\n\t\tif (species.id === 'smeargle') return true;\n\t\tconst canBreedWithSmeargle = species.eggGroups.includes('Field');\n\n\t\tlet eggMoveCount = 0;\n\t\tfor (const move of moves) {\n\t\t\tlet curSpecies: Species | null = species;\n\t\t\t/** 1 = can learn from egg, 2 = can learn unrestricted */\n\t\t\tlet canLearn: 0 | 1 | 2 = 0;\n\n\t\t\twhile (curSpecies) {\n\t\t\t\tlearnset = this.dex.species.getLearnset(curSpecies.id);\n\t\t\t\tif (learnset && learnset[move]) {\n\t\t\t\t\tfor (const moveSource of learnset[move]) {\n\t\t\t\t\t\tif (parseInt(moveSource.charAt(0)) > eggGen) continue;\n\t\t\t\t\t\tconst canLearnFromSmeargle = moveSource.charAt(1) === 'E' && canBreedWithSmeargle;\n\t\t\t\t\t\tif (!'ESDV'.includes(moveSource.charAt(1)) || canLearnFromSmeargle) {\n\t\t\t\t\t\t\tcanLearn = 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcanLearn = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (canLearn === 2) break;\n\t\t\t\tcurSpecies = this.learnsetParent(curSpecies);\n\t\t\t}\n\n\t\t\tif (!canLearn) return false;\n\t\t\tif (canLearn === 1) {\n\t\t\t\teggMoveCount++;\n\t\t\t\tif (eggMoveCount > 1) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tvalidateForme(set: PokemonSet) {\n\t\tconst dex = this.dex;\n\t\tconst name = set.name || set.species;\n\n\t\tconst problems = [];\n\t\tconst item = dex.items.get(set.item);\n\t\tconst species = dex.species.get(set.species);\n\n\t\tif (species.name === 'Necrozma-Ultra') {\n\t\t\tconst whichMoves = (set.moves.includes('sunsteelstrike') ? 1 : 0) +\n\t\t\t\t(set.moves.includes('moongeistbeam') ? 2 : 0);\n\t\t\tif (item.name !== 'Ultranecrozium Z') {\n\t\t\t\t// Necrozma-Ultra transforms from one of two formes, and neither one is the base forme\n\t\t\t\tproblems.push(`Necrozma-Ultra must start the battle holding Ultranecrozium Z.`);\n\t\t\t} else if (whichMoves === 1) {\n\t\t\t\tset.species = 'Necrozma-Dusk-Mane';\n\t\t\t} else if (whichMoves === 2) {\n\t\t\t\tset.species = 'Necrozma-Dawn-Wings';\n\t\t\t} else {\n\t\t\t\tproblems.push(`Necrozma-Ultra must start the battle as Necrozma-Dusk-Mane or Necrozma-Dawn-Wings holding Ultranecrozium Z. Please specify which Necrozma it should start as.`);\n\t\t\t}\n\t\t} else if (species.name === 'Zygarde-Complete') {\n\t\t\tproblems.push(`Zygarde-Complete must start the battle as Zygarde or Zygarde-10% with Power Construct. Please specify which Zygarde it should start as.`);\n\t\t} else if (species.battleOnly) {\n\t\t\tif (species.requiredAbility && set.ability !== species.requiredAbility) {\n\t\t\t\t// Darmanitan-Zen\n\t\t\t\tproblems.push(`${species.name} transforms in-battle with ${species.requiredAbility}, please fix its ability.`);\n\t\t\t}\n\t\t\tif (species.requiredItems) {\n\t\t\t\tif (!species.requiredItems.includes(item.name)) {\n\t\t\t\t\t// Mega or Primal\n\t\t\t\t\tproblems.push(`${species.name} transforms in-battle with ${species.requiredItem}, please fix its item.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (species.requiredMove && !set.moves.map(toID).includes(toID(species.requiredMove))) {\n\t\t\t\t// Meloetta-Pirouette, Rayquaza-Mega\n\t\t\t\tproblems.push(`${species.name} transforms in-battle with ${species.requiredMove}, please fix its moves.`);\n\t\t\t}\n\t\t\tif (typeof species.battleOnly !== 'string') {\n\t\t\t\t// Ultra Necrozma and Complete Zygarde are already checked above\n\t\t\t\tthrow new Error(`${species.name} should have a string battleOnly`);\n\t\t\t}\n\t\t\t// Set to out-of-battle forme\n\t\t\tset.species = species.battleOnly;\n\t\t} else {\n\t\t\tif (species.requiredAbility) {\n\t\t\t\t// Impossible!\n\t\t\t\tthrow new Error(`Species ${species.name} has a required ability despite not being a battle-only forme; it should just be in its abilities table.`);\n\t\t\t}\n\t\t\tif (species.requiredItems && !species.requiredItems.includes(item.name)) {\n\t\t\t\tif (dex.gen >= 8 && (species.baseSpecies === 'Arceus' || species.baseSpecies === 'Silvally')) {\n\t\t\t\t\t// Arceus/Silvally formes in gen 8 only require the item with Multitype/RKS System\n\t\t\t\t\tif (set.ability === species.abilities[0]) {\n\t\t\t\t\t\tproblems.push(\n\t\t\t\t\t\t\t`${name} needs to hold ${species.requiredItems.join(' or ')}.`,\n\t\t\t\t\t\t\t`(It will revert to its Normal forme if you remove the item or give it a different item.)`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Memory/Drive/Griseous Orb/Plate/Z-Crystal - Forme mismatch\n\t\t\t\t\tconst baseSpecies = this.dex.species.get(species.changesFrom);\n\t\t\t\t\tproblems.push(\n\t\t\t\t\t\t`${name} needs to hold ${species.requiredItems.join(' or ')} to be in its ${species.forme} forme.`,\n\t\t\t\t\t\t`(It will revert to its ${baseSpecies.baseForme || 'base'} forme if you remove the item or give it a different item.)`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (species.requiredMove && !set.moves.map(toID).includes(toID(species.requiredMove))) {\n\t\t\t\tconst baseSpecies = this.dex.species.get(species.changesFrom);\n\t\t\t\tproblems.push(\n\t\t\t\t\t`${name} needs to know the move ${species.requiredMove} to be in its ${species.forme} forme.`,\n\t\t\t\t\t`(It will revert to its ${baseSpecies.baseForme} forme if it forgets the move.)`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Mismatches between the set forme (if not base) and the item signature forme will have been rejected already.\n\t\t\t// It only remains to assign the right forme to a set with the base species (Arceus/Genesect/Giratina/Silvally).\n\t\t\tif (item.forcedForme && species.name === dex.species.get(item.forcedForme).baseSpecies) {\n\t\t\t\tset.species = item.forcedForme;\n\t\t\t}\n\t\t}\n\n\t\tif (species.name === 'Pikachu-Cosplay') {\n\t\t\tconst cosplay: {[k: string]: string} = {\n\t\t\t\tmeteormash: 'Pikachu-Rock-Star', iciclecrash: 'Pikachu-Belle', drainingkiss: 'Pikachu-Pop-Star',\n\t\t\t\telectricterrain: 'Pikachu-PhD', flyingpress: 'Pikachu-Libre',\n\t\t\t};\n\t\t\tfor (const moveid of set.moves) {\n\t\t\t\tif (moveid in cosplay) {\n\t\t\t\t\tset.species = cosplay[moveid];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (species.name === 'Keldeo' && set.moves.map(toID).includes('secretsword' as ID) && dex.gen >= 8) {\n\t\t\tset.species = 'Keldeo-Resolute';\n\t\t}\n\n\t\tconst crowned: {[k: string]: string} = {\n\t\t\t'Zacian-Crowned': 'behemothblade', 'Zamazenta-Crowned': 'behemothbash',\n\t\t};\n\t\tif (species.name in crowned) {\n\t\t\tconst behemothMove = set.moves.map(toID).indexOf(crowned[species.name] as ID);\n\t\t\tif (behemothMove >= 0) {\n\t\t\t\tset.moves[behemothMove] = 'ironhead';\n\t\t\t}\n\t\t}\n\t\treturn problems;\n\t}\n\n\tcheckSpecies(set: PokemonSet, species: Species, tierSpecies: Species, setHas: {[k: string]: true}) {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\t// https://www.smogon.com/forums/posts/8659168\n\t\tif (\n\t\t\t(tierSpecies.id === 'zamazentacrowned' && species.id === 'zamazenta') ||\n\t\t\t(tierSpecies.id === 'zaciancrowned' && species.id === 'zacian')\n\t\t) {\n\t\t\tspecies = tierSpecies;\n\t\t}\n\n\t\tsetHas['pokemon:' + species.id] = true;\n\t\tsetHas['basepokemon:' + toID(species.baseSpecies)] = true;\n\n\t\tlet isMega = false;\n\t\tif (tierSpecies !== species) {\n\t\t\tsetHas['pokemon:' + tierSpecies.id] = true;\n\t\t\tif (tierSpecies.isMega || tierSpecies.isPrimal) {\n\t\t\t\tsetHas['pokemontag:mega'] = true;\n\t\t\t\tisMega = true;\n\t\t\t}\n\t\t}\n\n\t\tlet isGmax = false;\n\t\tif (tierSpecies.canGigantamax && set.gigantamax) {\n\t\t\tsetHas['pokemon:' + tierSpecies.id + 'gmax'] = true;\n\t\t\tisGmax = true;\n\t\t}\n\n\t\tconst tier = tierSpecies.tier === '(PU)' ? 'ZU' : tierSpecies.tier === '(NU)' ? 'PU' : tierSpecies.tier;\n\t\tconst tierTag = 'pokemontag:' + toID(tier);\n\t\tsetHas[tierTag] = true;\n\n\t\tconst doublesTier = tierSpecies.doublesTier === '(DUU)' ? 'DNU' : tierSpecies.doublesTier;\n\t\tconst doublesTierTag = 'pokemontag:' + toID(doublesTier);\n\t\tsetHas[doublesTierTag] = true;\n\n\t\tconst ndTier = tierSpecies.natDexTier === '(PU)' ? 'ZU' :\n\t\t\ttierSpecies.natDexTier === '(NU)' ? 'PU' : tierSpecies.natDexTier;\n\t\tconst ndTierTag = 'pokemontag:nd' + toID(ndTier);\n\t\tsetHas[ndTierTag] = true;\n\n\t\t// Only pokemon that can gigantamax should have the Gmax flag\n\t\tif (!tierSpecies.canGigantamax && set.gigantamax) {\n\t\t\treturn `${tierSpecies.name} cannot Gigantamax but is flagged as being able to.`;\n\t\t}\n\n\t\tlet banReason = ruleTable.check('pokemon:' + species.id);\n\t\tif (banReason) {\n\t\t\treturn `${species.name} is ${banReason}.`;\n\t\t}\n\t\tif (banReason === '') return null;\n\n\t\tif (tierSpecies !== species) {\n\t\t\tbanReason = ruleTable.check('pokemon:' + tierSpecies.id);\n\t\t\tif (banReason) {\n\t\t\t\treturn `${tierSpecies.name} is ${banReason}.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\tif (isMega) {\n\t\t\tbanReason = ruleTable.check('pokemontag:mega', setHas);\n\t\t\tif (banReason) {\n\t\t\t\treturn `Mega evolutions are ${banReason}.`;\n\t\t\t}\n\t\t}\n\n\t\tif (isGmax) {\n\t\t\tbanReason = ruleTable.check('pokemon:' + tierSpecies.id + 'gmax');\n\t\t\tif (banReason) {\n\t\t\t\treturn `Gigantamaxing ${species.name} is ${banReason}.`;\n\t\t\t}\n\t\t}\n\n\t\tbanReason = ruleTable.check('basepokemon:' + toID(species.baseSpecies));\n\t\tif (banReason) {\n\t\t\treturn `${species.name} is ${banReason}.`;\n\t\t}\n\t\tif (banReason === '') {\n\t\t\t// don't allow nonstandard speciess when whitelisting standard base species\n\t\t\t// i.e. unbanning Pichu doesn't mean allowing Pichu-Spiky-Eared outside of Gen 4\n\t\t\tconst baseSpecies = dex.species.get(species.baseSpecies);\n\t\t\tif (baseSpecies.isNonstandard === species.isNonstandard) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// We can't return here because the `-nonexistent` rule is a bit\n\t\t// complicated in terms of what trumps it. We don't want e.g.\n\t\t// +Mythical to unban Shaymin in Gen 1, for instance.\n\t\tlet nonexistentCheck = Tags.nonexistent.genericFilter!(tierSpecies) && ruleTable.check('nonexistent');\n\n\t\tconst EXISTENCE_TAG = ['past', 'future', 'lgpe', 'unobtainable', 'cap', 'custom', 'nonexistent'];\n\n\t\tfor (const ruleid of ruleTable.tagRules) {\n\t\t\tif (ruleid.startsWith('*')) continue;\n\t\t\tconst tagid = ruleid.slice(12);\n\t\t\tconst tag = Tags[tagid];\n\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(tierSpecies)) {\n\t\t\t\tconst existenceTag = EXISTENCE_TAG.includes(tagid);\n\t\t\t\tif (ruleid.startsWith('+')) {\n\t\t\t\t\t// we want rules like +CAP to trump -Nonexistent, but most tags shouldn't\n\t\t\t\t\tif (!existenceTag && nonexistentCheck) continue;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (existenceTag) {\n\t\t\t\t\t// for a nicer error message\n\t\t\t\t\tnonexistentCheck = 'banned';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn `${species.name} is tagged ${tag.name}, which is ${ruleTable.check(ruleid.slice(1)) || \"banned\"}.`;\n\t\t\t}\n\t\t}\n\n\t\tif (nonexistentCheck) {\n\t\t\tif (tierSpecies.isNonstandard === 'Past' || tierSpecies.isNonstandard === 'Future') {\n\t\t\t\treturn `${tierSpecies.name} does not exist in Gen ${dex.gen}.`;\n\t\t\t}\n\t\t\tif (tierSpecies.isNonstandard === 'LGPE') {\n\t\t\t\treturn `${tierSpecies.name} does not exist in this game, only in Let's Go Pikachu/Eevee.`;\n\t\t\t}\n\t\t\tif (tierSpecies.isNonstandard === 'CAP') {\n\t\t\t\treturn `${tierSpecies.name} is a CAP and does not exist in this game.`;\n\t\t\t}\n\t\t\tif (tierSpecies.isNonstandard === 'Unobtainable') {\n\t\t\t\treturn `${tierSpecies.name} is not possible to obtain in this game.`;\n\t\t\t}\n\t\t\tif (tierSpecies.isNonstandard === 'Gigantamax') {\n\t\t\t\treturn `${tierSpecies.name} is a placeholder for a Gigantamax sprite, not a real Pok\u00E9mon. (This message is likely to be a validator bug.)`;\n\t\t\t}\n\t\t\treturn `${tierSpecies.name} does not exist in this game.`;\n\t\t}\n\t\tif (nonexistentCheck === '') return null;\n\n\t\t// Special casing for Pokemon that can Gmax, but their Gmax factor cannot be legally obtained\n\t\tif (tierSpecies.gmaxUnreleased && set.gigantamax) {\n\t\t\tbanReason = ruleTable.check('pokemontag:unobtainable');\n\t\t\tif (banReason) {\n\t\t\t\treturn `${tierSpecies.name} is flagged as gigantamax, but it cannot gigantamax without hacking or glitches.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\tbanReason = ruleTable.check('pokemontag:allpokemon');\n\t\tif (banReason) {\n\t\t\treturn `${species.name} is not in the list of allowed pokemon.`;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcheckItem(set: PokemonSet, item: Item, setHas: {[k: string]: true}) {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\tsetHas['item:' + item.id] = true;\n\n\t\tlet banReason = ruleTable.check('item:' + (item.id || 'noitem'));\n\t\tif (banReason) {\n\t\t\tif (!item.id) {\n\t\t\t\treturn `${set.name} not holding an item is ${banReason}.`;\n\t\t\t}\n\t\t\treturn `${set.name}'s item ${item.name} is ${banReason}.`;\n\t\t}\n\t\tif (banReason === '') return null;\n\n\t\tif (!item.id) return null;\n\n\t\tbanReason = ruleTable.check('pokemontag:allitems');\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s item ${item.name} is not in the list of allowed items.`;\n\t\t}\n\n\t\t// obtainability\n\t\tif (item.isNonstandard) {\n\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(item.isNonstandard));\n\t\t\tif (banReason) {\n\t\t\t\tif (item.isNonstandard === 'Unobtainable') {\n\t\t\t\t\treturn `${item.name} is not obtainable without hacking or glitches.`;\n\t\t\t\t}\n\t\t\t\treturn `${set.name}'s item ${item.name} is tagged ${item.isNonstandard}, which is ${banReason}.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\tif (item.isNonstandard && item.isNonstandard !== 'Unobtainable') {\n\t\t\tbanReason = ruleTable.check('nonexistent', setHas);\n\t\t\tif (banReason) {\n\t\t\t\tif (['Past', 'Future'].includes(item.isNonstandard)) {\n\t\t\t\t\treturn `${set.name}'s item ${item.name} does not exist in Gen ${dex.gen}.`;\n\t\t\t\t}\n\t\t\t\treturn `${set.name}'s item ${item.name} does not exist in this game.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcheckMove(set: PokemonSet, move: Move, setHas: {[k: string]: true}) {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\tsetHas['move:' + move.id] = true;\n\n\t\tlet banReason = ruleTable.check('move:' + move.id);\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s move ${move.name} is ${banReason}.`;\n\t\t}\n\t\tif (banReason === '') return null;\n\n\t\tbanReason = ruleTable.check('pokemontag:allmoves');\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s move ${move.name} is not in the list of allowed moves.`;\n\t\t}\n\n\t\t// obtainability\n\t\tif (move.isNonstandard) {\n\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(move.isNonstandard));\n\t\t\tif (banReason) {\n\t\t\t\tif (move.isNonstandard === 'Unobtainable') {\n\t\t\t\t\treturn `${move.name} is not obtainable without hacking or glitches${dex.gen >= 9 && move.gen < dex.gen ? ` in Gen ${dex.gen}` : ``}.`;\n\t\t\t\t}\n\t\t\t\tif (move.isNonstandard === 'Gigantamax') {\n\t\t\t\t\treturn `${move.name} is not usable without Gigantamaxing its user, ${move.isMax}.`;\n\t\t\t\t}\n\t\t\t\treturn `${set.name}'s move ${move.name} is tagged ${move.isNonstandard}, which is ${banReason}.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\tif (move.isNonstandard && move.isNonstandard !== 'Unobtainable') {\n\t\t\tbanReason = ruleTable.check('nonexistent', setHas);\n\t\t\tif (banReason) {\n\t\t\t\tif (['Past', 'Future'].includes(move.isNonstandard)) {\n\t\t\t\t\treturn `${set.name}'s move ${move.name} does not exist in Gen ${dex.gen}.`;\n\t\t\t\t}\n\t\t\t\treturn `${set.name}'s move ${move.name} does not exist in this game.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcheckAbility(set: PokemonSet, ability: Ability, setHas: {[k: string]: true}) {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\tsetHas['ability:' + ability.id] = true;\n\n\t\tif (this.format.id.startsWith('gen9pokebilities')) {\n\t\t\tconst species = dex.species.get(set.species);\n\t\t\tconst unSeenAbilities = Object.keys(species.abilities)\n\t\t\t\t.filter(key => key !== 'S' && (key !== 'H' || !species.unreleasedHidden))\n\t\t\t\t.map(key => species.abilities[key as \"0\" | \"1\" | \"H\" | \"S\"]);\n\n\t\t\tif (ability.id !== this.toID(species.abilities['S'])) {\n\t\t\t\tfor (const abilityName of unSeenAbilities) {\n\t\t\t\t\tsetHas['ability:' + toID(abilityName)] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet banReason = ruleTable.check('ability:' + ability.id);\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s ability ${ability.name} is ${banReason}.`;\n\t\t}\n\t\tif (banReason === '') return null;\n\n\t\tbanReason = ruleTable.check('pokemontag:allabilities');\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s ability ${ability.name} is not in the list of allowed abilities.`;\n\t\t}\n\n\t\t// obtainability\n\t\tif (ability.isNonstandard) {\n\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(ability.isNonstandard));\n\t\t\tif (banReason) {\n\t\t\t\treturn `${set.name}'s ability ${ability.name} is tagged ${ability.isNonstandard}, which is ${banReason}.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\n\t\t\tbanReason = ruleTable.check('nonexistent', setHas);\n\t\t\tif (banReason) {\n\t\t\t\tif (['Past', 'Future'].includes(ability.isNonstandard)) {\n\t\t\t\t\treturn `${set.name}'s ability ${ability.name} does not exist in Gen ${dex.gen}.`;\n\t\t\t\t}\n\t\t\t\treturn `${set.name}'s ability ${ability.name} does not exist in this game.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcheckNature(set: PokemonSet, nature: Nature, setHas: {[k: string]: true}) {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\tsetHas['nature:' + nature.id] = true;\n\n\t\tlet banReason = ruleTable.check('nature:' + nature.id);\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s nature ${nature.name} is ${banReason}.`;\n\t\t}\n\t\tif (banReason === '') return null;\n\n\t\tbanReason = ruleTable.check('allnatures');\n\t\tif (banReason) {\n\t\t\treturn `${set.name}'s nature ${nature.name} is not in the list of allowed natures.`;\n\t\t}\n\n\t\t// obtainability\n\t\tif (nature.isNonstandard) {\n\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(nature.isNonstandard));\n\t\t\tif (banReason) {\n\t\t\t\treturn `${set.name}'s nature ${nature.name} is tagged ${nature.isNonstandard}, which is ${banReason}.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\n\t\t\tbanReason = ruleTable.check('nonexistent', setHas);\n\t\t\tif (banReason) {\n\t\t\t\tif (['Past', 'Future'].includes(nature.isNonstandard)) {\n\t\t\t\t\treturn `${set.name}'s nature ${nature.name} does not exist in Gen ${dex.gen}.`;\n\t\t\t\t}\n\t\t\t\treturn `${set.name}'s nature ${nature.name} does not exist in this game.`;\n\t\t\t}\n\t\t\tif (banReason === '') return null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tvalidateEvent(\n\t\tset: PokemonSet, setSources: PokemonSources, eventData: EventInfo, eventSpecies: Species\n\t): true | undefined;\n\tvalidateEvent(\n\t\tset: PokemonSet, setSources: PokemonSources, eventData: EventInfo, eventSpecies: Species,\n\t\tbecause: string, from?: string\n\t): string[] | undefined;\n\t/**\n\t * Returns array of error messages if invalid, undefined if valid\n\t *\n\t * If `because` is not passed, instead returns true if invalid.\n\t */\n\tvalidateEvent(\n\t\tset: PokemonSet, setSources: PokemonSources, eventData: EventInfo, eventSpecies: Species,\n\t\tbecause = ``, from = `from an event`\n\t) {\n\t\tconst dex = this.dex;\n\t\tlet name = set.species;\n\t\tconst species = dex.species.get(set.species);\n\t\tconst maxSourceGen = this.ruleTable.has('allowtradeback') ? Utils.clampIntRange(dex.gen + 1, 1, 8) : dex.gen;\n\t\tif (!eventSpecies) eventSpecies = species;\n\t\tif (set.name && set.species !== set.name && species.baseSpecies !== set.name) name = `${set.name} (${set.species})`;\n\n\t\tconst fastReturn = !because;\n\t\tif (eventData.from) from = `from ${eventData.from}`;\n\t\tconst etc = `${because} ${from}`;\n\n\t\tconst problems = [];\n\n\t\tif (dex.gen < 8 && this.minSourceGen > eventData.generation) {\n\t\t\tif (fastReturn) return true;\n\t\t\tproblems.push(`This format requires Pokemon from gen ${this.minSourceGen} or later and ${name} is from gen ${eventData.generation}${etc}.`);\n\t\t}\n\t\tif (maxSourceGen < eventData.generation) {\n\t\t\tif (fastReturn) return true;\n\t\t\tproblems.push(`This format is in gen ${dex.gen} and ${name} is from gen ${eventData.generation}${etc}.`);\n\t\t}\n\n\t\tif (eventData.japan && dex.currentMod !== 'gen1jpn') {\n\t\t\tif (fastReturn) return true;\n\t\t\tproblems.push(`${name} has moves from Japan-only events, but this format simulates International Yellow/Crystal which can't trade with Japanese games.`);\n\t\t}\n\n\t\tif (eventData.level && (set.level || 0) < eventData.level) {\n\t\t\tif (fastReturn) return true;\n\t\t\tproblems.push(`${name} must be at least level ${eventData.level}${etc}.`);\n\t\t}\n\t\tif ((eventData.shiny === true && !set.shiny) || (!eventData.shiny && set.shiny)) {\n\t\t\tif (fastReturn) return true;\n\t\t\tconst shinyReq = eventData.shiny ? ` be shiny` : ` not be shiny`;\n\t\t\tproblems.push(`${name} must${shinyReq}${etc}.`);\n\t\t}\n\t\tif (eventData.gender) {\n\t\t\tif (set.gender && eventData.gender !== set.gender) {\n\t\t\t\tif (fastReturn) return true;\n\t\t\t\tproblems.push(`${name}'s gender must be ${eventData.gender}${etc}.`);\n\t\t\t}\n\t\t}\n\t\tconst canMint = dex.gen > 7;\n\t\tif (eventData.nature && eventData.nature !== set.nature && !canMint) {\n\t\t\tif (fastReturn) return true;\n\t\t\tproblems.push(`${name} must have a ${eventData.nature} nature${etc} - Mints are only available starting gen 8.`);\n\t\t}\n\t\tlet requiredIVs = 0;\n\t\tif (eventData.ivs) {\n\t\t\t/** In Gen 7+, IVs can be changed to 31 */\n\t\t\tconst canBottleCap = dex.gen >= 7 && set.level >= (dex.gen < 9 ? 100 : 50);\n\n\t\t\tif (!set.ivs) set.ivs = {hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31};\n\t\t\tlet statName: StatID;\n\t\t\tfor (statName in eventData.ivs) {\n\t\t\t\tif (canBottleCap && set.ivs[statName] === 31) continue;\n\t\t\t\tif (set.ivs[statName] !== eventData.ivs[statName]) {\n\t\t\t\t\tif (fastReturn) return true;\n\t\t\t\t\tproblems.push(`${name} must have ${eventData.ivs[statName]} ${Dex.stats.names[statName]} IVs${etc}.`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (canBottleCap) {\n\t\t\t\t// IVs can be overridden but Hidden Power type can't\n\t\t\t\tif (Object.keys(eventData.ivs).length >= 6) {\n\t\t\t\t\tconst requiredHpType = dex.getHiddenPower(eventData.ivs).type;\n\t\t\t\t\tif (set.hpType && set.hpType !== requiredHpType) {\n\t\t\t\t\t\tif (fastReturn) return true;\n\t\t\t\t\t\tproblems.push(`${name} can only have Hidden Power ${requiredHpType}${etc}.`);\n\t\t\t\t\t}\n\t\t\t\t\tset.hpType = requiredHpType;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\trequiredIVs = eventData.perfectIVs || 0;\n\t\t}\n\t\tif (requiredIVs && set.ivs) {\n\t\t\t// Legendary Pokemon must have at least 3 perfect IVs in gen 6\n\t\t\t// Events can also have a certain amount of guaranteed perfect IVs\n\t\t\tlet perfectIVs = 0;\n\t\t\tlet statName: StatID;\n\t\t\tfor (statName in set.ivs) {\n\t\t\t\tif (set.ivs[statName] >= 31) perfectIVs++;\n\t\t\t}\n\t\t\tif (perfectIVs < requiredIVs) {\n\t\t\t\tif (fastReturn) return true;\n\t\t\t\tif (eventData.perfectIVs) {\n\t\t\t\t\tproblems.push(`${name} must have at least ${requiredIVs} perfect IVs${etc}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The perfect IV count affects Hidden Power availability\n\t\t\tif (dex.gen >= 3 && requiredIVs >= 3 && set.hpType === 'Fighting') {\n\t\t\t\tif (fastReturn) return true;\n\t\t\t\tproblems.push(`${name} can't use Hidden Power Fighting because it must have at least three perfect IVs${etc}.`);\n\t\t\t} else if (dex.gen >= 3 && requiredIVs >= 5 && set.hpType &&\n\t\t\t\t\t!['Dark', 'Dragon', 'Electric', 'Steel', 'Ice'].includes(set.hpType)) {\n\t\t\t\tif (fastReturn) return true;\n\t\t\t\tproblems.push(`${name} can only use Hidden Power Dark/Dragon/Electric/Steel/Ice because it must have at least 5 perfect IVs${etc}.`);\n\t\t\t}\n\t\t}\n\t\tconst ruleTable = this.ruleTable;\n\t\tif (ruleTable.has('obtainablemoves')) {\n\t\t\tconst ssMaxSourceGen = setSources.maxSourceGen();\n\t\t\tconst tradebackEligible = dex.gen === 2 && (species.gen === 1 || eventSpecies.gen === 1);\n\t\t\tif (ssMaxSourceGen && eventData.generation > ssMaxSourceGen && !tradebackEligible) {\n\t\t\t\tif (fastReturn) return true;\n\t\t\t\tproblems.push(`${name} must not have moves only learnable in gen ${ssMaxSourceGen}${etc}.`);\n\t\t\t}\n\n\t\t\tif (eventData.from === \"Gen 5 Dream World\" && setSources.dreamWorldMoveCount > 1) {\n\t\t\t\tproblems.push(`${name} can only have one Dream World move.`);\n\t\t\t}\n\t\t}\n\t\tif (ruleTable.has('obtainableabilities')) {\n\t\t\tif (dex.gen <= 5 && eventData.abilities && eventData.abilities.length === 1 && !eventData.isHidden) {\n\t\t\t\tif (species.name === eventSpecies.name) {\n\t\t\t\t\t// has not evolved, abilities must match\n\t\t\t\t\tconst requiredAbility = dex.abilities.get(eventData.abilities[0]).name;\n\t\t\t\t\tif (set.ability !== requiredAbility) {\n\t\t\t\t\t\tif (fastReturn) return true;\n\t\t\t\t\t\tproblems.push(`${name} must have ${requiredAbility}${etc}.`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// has evolved\n\t\t\t\t\tconst ability1 = dex.abilities.get(eventSpecies.abilities['1']);\n\t\t\t\t\tif (ability1.gen && eventData.generation >= ability1.gen) {\n\t\t\t\t\t\t// pokemon had 2 available abilities in the gen the event happened\n\t\t\t\t\t\t// ability is restricted to a single ability slot\n\t\t\t\t\t\tconst requiredAbilitySlot = (toID(eventData.abilities[0]) === ability1.id ? 1 : 0);\n\t\t\t\t\t\tconst requiredAbility = dex.abilities.get(species.abilities[requiredAbilitySlot] || species.abilities['0']).name;\n\t\t\t\t\t\tif (set.ability !== requiredAbility) {\n\t\t\t\t\t\t\tconst originalAbility = dex.abilities.get(eventData.abilities[0]).name;\n\t\t\t\t\t\t\tif (fastReturn) return true;\n\t\t\t\t\t\t\tproblems.push(`${name} must have ${requiredAbility}${because} from a ${originalAbility} ${eventSpecies.name} event.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (species.abilities['H']) {\n\t\t\t\tconst isHidden = (set.ability === species.abilities['H']);\n\t\t\t\tif (!isHidden && eventData.isHidden && dex.gen <= 8) {\n\t\t\t\t\tif (fastReturn) return true;\n\t\t\t\t\tproblems.push(`${name} must have its Hidden Ability${etc}.`);\n\t\t\t\t}\n\n\t\t\t\tconst canUseAbilityPatch = dex.gen >= 8 && this.format.mod !== 'gen8dlc1';\n\t\t\t\tif (isHidden && !eventData.isHidden && !canUseAbilityPatch) {\n\t\t\t\t\tif (fastReturn) return true;\n\t\t\t\t\tproblems.push(`${name} must not have its Hidden Ability${etc}.`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (problems.length) return problems;\n\t\tif (eventData.gender) set.gender = eventData.gender;\n\t}\n\n\tallSources(species?: Species) {\n\t\tlet minSourceGen = this.minSourceGen;\n\t\tif (this.dex.gen >= 3 && minSourceGen < 3) minSourceGen = 3;\n\t\tif (species) minSourceGen = Math.max(minSourceGen, species.gen);\n\t\tconst maxSourceGen = this.ruleTable.has('allowtradeback') ? Utils.clampIntRange(this.dex.gen + 1, 1, 8) : this.dex.gen;\n\t\treturn new PokemonSources(maxSourceGen, minSourceGen);\n\t}\n\n\tvalidateMoves(\n\t\tspecies: Species, moves: string[], setSources: PokemonSources, set?: Partial<PokemonSet>,\n\t\tname: string = species.name, moveLegalityWhitelist: {[k: string]: true | undefined} = {}\n\t) {\n\t\tconst dex = this.dex;\n\t\tconst ruleTable = this.ruleTable;\n\n\t\tconst problems = [];\n\n\t\tconst checkCanLearn = (ruleTable.checkCanLearn?.[0] || this.checkCanLearn);\n\t\tfor (const moveName of moves) {\n\t\t\tconst move = dex.moves.get(moveName);\n\t\t\tif (moveLegalityWhitelist[move.id]) continue;\n\t\t\tconst problem = checkCanLearn.call(this, move, species, setSources, set);\n\t\t\tif (problem) {\n\t\t\t\tproblems.push(`${name}${problem}`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (setSources.size() && setSources.moveEvoCarryCount > 3) {\n\t\t\tif (setSources.sourcesBefore < 6) setSources.sourcesBefore = 0;\n\t\t\tsetSources.sources = setSources.sources.filter(\n\t\t\t\tsource => source.charAt(1) === 'E' && parseInt(source.charAt(0)) >= 6\n\t\t\t);\n\t\t\tif (!setSources.size()) {\n\t\t\t\tproblems.push(`${name} needs to know ${species.evoMove || 'a Fairy-type move'} to evolve, so it can only know 3 other moves from ${species.prevo}.`);\n\t\t\t}\n\t\t}\n\n\t\tif (problems.length) return problems;\n\n\t\tif (setSources.isHidden) {\n\t\t\tsetSources.sources = setSources.sources.filter(\n\t\t\t\tsource => parseInt(source.charAt(0)) >= 5\n\t\t\t);\n\t\t\tif (setSources.sourcesBefore < 5) setSources.sourcesBefore = 0;\n\t\t\tconst canUseAbilityPatch = dex.gen >= 8 && this.format.mod !== 'gen8dlc1';\n\t\t\tif (!setSources.size() && !canUseAbilityPatch) {\n\t\t\t\tproblems.push(`${name} has a hidden ability - it can't have moves only learned before gen 5.`);\n\t\t\t\treturn problems;\n\t\t\t}\n\t\t}\n\n\t\tif (setSources.babyOnly && setSources.sources.length) {\n\t\t\tconst baby = dex.species.get(setSources.babyOnly);\n\t\t\tconst babyEvo = toID(baby.evos[0]);\n\t\t\tsetSources.sources = setSources.sources.filter(source => {\n\t\t\t\tif (source.charAt(1) === 'S') {\n\t\t\t\t\tconst sourceId = source.split(' ')[1];\n\t\t\t\t\tif (sourceId !== baby.id) return false;\n\t\t\t\t}\n\t\t\t\tif (source.charAt(1) === 'E') {\n\t\t\t\t\tif (babyEvo && source.slice(2) === babyEvo) return false;\n\t\t\t\t}\n\t\t\t\tif (source.charAt(1) === 'D') {\n\t\t\t\t\tif (babyEvo && source.slice(2) === babyEvo) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (!setSources.size()) {\n\t\t\t\tproblems.push(`${name}'s event/egg moves are from an evolution, and are incompatible with its moves from ${baby.name}.`);\n\t\t\t}\n\t\t}\n\t\tif (setSources.babyOnly && setSources.size() && this.gen > 2) {\n\t\t\t// there do theoretically exist evo/tradeback incompatibilities in\n\t\t\t// gen 2, but those are very complicated to validate and should be\n\t\t\t// handled separately anyway, so for now we just treat them all as\n\t\t\t// legal (competitively relevant ones can be manually banned)\n\t\t\tconst baby = dex.species.get(setSources.babyOnly);\n\t\t\tsetSources.sources = setSources.sources.filter(source => {\n\t\t\t\tif (baby.gen > parseInt(source.charAt(0)) && !source.startsWith('1ST')) return false;\n\t\t\t\tif (baby.gen > 2 && source === '7V') return false;\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (setSources.sourcesBefore < baby.gen) setSources.sourcesBefore = 0;\n\t\t\tif (!setSources.size()) {\n\t\t\t\tproblems.push(`${name} has moves from before Gen ${baby.gen}, which are incompatible with its moves from ${baby.name}.`);\n\t\t\t}\n\t\t}\n\n\t\treturn problems;\n\t}\n\n\tomCheckCanLearn(\n\t\tmove: Move,\n\t\ts: Species,\n\t\tsetSources = this.allSources(s),\n\t\tset: Partial<PokemonSet> = {},\n\t\tproblem = `${set.name || s.name} can't learn ${move.name}`,\n\t): string | null {\n\t\tif (!this.ruleTable.checkCanLearn?.[0]) return problem;\n\t\tconst baseCheckCanLearn = this.checkCanLearn;\n\t\t// tell the custom move legality check that the move is illegal by default\n\t\tthis.checkCanLearn = () => problem;\n\t\tconst omVerdict = this.ruleTable.checkCanLearn[0].call(this, move, s, setSources, set);\n\t\tthis.checkCanLearn = baseCheckCanLearn;\n\t\treturn omVerdict;\n\t}\n\n\t/** Returns null if you can learn the move, or a string explaining why you can't learn it */\n\tcheckCanLearn(\n\t\tmove: Move,\n\t\ts: Species,\n\t\tsetSources = this.allSources(s),\n\t\tset: Partial<PokemonSet> = {}\n\t): string | null {\n\t\tconst dex = this.dex;\n\t\tif (!setSources.size()) throw new Error(`Bad sources passed to checkCanLearn`);\n\n\t\tmove = dex.moves.get(move);\n\t\tconst moveid = move.id;\n\t\tconst baseSpecies = dex.species.get(s);\n\t\tlet species: Species | null = baseSpecies;\n\n\t\tconst format = this.format;\n\t\tconst ruleTable = dex.formats.getRuleTable(format);\n\t\tconst alreadyChecked: {[k: string]: boolean} = {};\n\t\tconst level = set.level || 100;\n\n\t\tlet cantLearnReason = null;\n\n\t\tlet limit1 = true;\n\t\tlet sketch = false;\n\t\tlet blockedHM = false;\n\n\t\tlet babyOnly = '';\n\n\t\t// This is a pretty complicated algorithm\n\n\t\t// Abstractly, what it does is construct the union of sets of all\n\t\t// possible ways this pokemon could be obtained, and then intersect\n\t\t// it with a the pokemon's existing set of all possible ways it could\n\t\t// be obtained. If this intersection is non-empty, the move is legal.\n\n\t\t// set of possible sources of a pokemon with this move\n\t\tconst moveSources = new PokemonSources();\n\n\t\t/**\n\t\t * The format doesn't allow Pokemon traded from the future\n\t\t * (This is everything except in Gen 1 Tradeback)\n\t\t */\n\t\tconst noFutureGen = !ruleTable.has('allowtradeback');\n\t\t/**\n\t\t * The format allows Sketch to copy moves in Gen 8\n\t\t */\n\t\tconst canSketchPostGen7Moves = ruleTable.has('sketchpostgen7moves') || this.dex.currentMod === 'gen8bdsp';\n\n\t\tlet tradebackEligible = false;\n\t\twhile (species?.name && !alreadyChecked[species.id]) {\n\t\t\talreadyChecked[species.id] = true;\n\t\t\tif (dex.gen <= 2 && species.gen === 1) tradebackEligible = true;\n\t\t\tlet learnset = dex.species.getLearnset(species.id);\n\t\t\tif (!learnset) {\n\t\t\t\tif ((species.changesFrom || species.baseSpecies) !== species.name) {\n\t\t\t\t\t// forme without its own learnset\n\t\t\t\t\tspecies = dex.species.get(species.changesFrom || species.baseSpecies);\n\t\t\t\t\t// warning: formes with their own learnset, like Wormadam, should NOT\n\t\t\t\t\t// inherit from their base forme unless they're freely switchable\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (species.isNonstandard) {\n\t\t\t\t\t// It's normal for a nonstandard species not to have learnset data\n\n\t\t\t\t\t// Formats should replace the `Obtainable Moves` rule if they want to\n\t\t\t\t\t// allow pokemon without learnsets.\n\t\t\t\t\treturn ` can't learn any moves at all.`;\n\t\t\t\t}\n\t\t\t\tif (species.prevo && dex.species.getLearnset(toID(species.prevo))) {\n\t\t\t\t\tlearnset = dex.species.getLearnset(toID(species.prevo));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// should never happen\n\t\t\t\tthrow new Error(`Species with no learnset data: ${species.id}`);\n\t\t\t}\n\t\t\tconst checkingPrevo = species.baseSpecies !== s.baseSpecies;\n\t\t\tif (checkingPrevo && !moveSources.size()) {\n\t\t\t\tif (!setSources.babyOnly || !species.prevo) {\n\t\t\t\t\tbabyOnly = species.id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet sources = learnset[moveid];\n\t\t\tif (moveid === 'sketch') {\n\t\t\t\tsketch = true;\n\t\t\t} else if (learnset['sketch']) {\n\t\t\t\tif (move.noSketch || move.isZ || move.isMax) {\n\t\t\t\t\tcantLearnReason = `can't be Sketched.`;\n\t\t\t\t} else if (move.gen > 7 && !canSketchPostGen7Moves) {\n\t\t\t\t\tcantLearnReason = `can't be Sketched because it's a Gen ${move.gen} move and Sketch isn't available in Gen ${move.gen}.`;\n\t\t\t\t} else {\n\t\t\t\t\tif (!sources || !moveSources.size()) sketch = true;\n\t\t\t\t\tsources = learnset['sketch'].concat(sources || []);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof sources === 'string') sources = [sources];\n\t\t\tif (sources) {\n\t\t\t\tfor (let learned of sources) {\n\t\t\t\t\t// Every `learned` represents a single way a pokemon might\n\t\t\t\t\t// learn a move. This can be handled one of several ways:\n\t\t\t\t\t// `continue`\n\t\t\t\t\t//   means we can't learn it\n\t\t\t\t\t// `return null`\n\t\t\t\t\t//   means we can learn it with no restrictions\n\t\t\t\t\t//   (there's a way to just teach any pokemon of this species\n\t\t\t\t\t//   the move in the current gen, like a TM.)\n\t\t\t\t\t// `moveSources.add(source)`\n\t\t\t\t\t//   means we can learn it only if obtained that exact way described\n\t\t\t\t\t//   in source\n\t\t\t\t\t// `moveSources.addGen(learnedGen)`\n\t\t\t\t\t//   means we can learn it only if obtained at or before learnedGen\n\t\t\t\t\t//   (i.e. get the pokemon however you want, transfer to that gen,\n\t\t\t\t\t//   teach it, and transfer it to the current gen.)\n\n\t\t\t\t\tconst learnedGen = parseInt(learned.charAt(0));\n\t\t\t\t\tif (learnedGen < this.minSourceGen) {\n\t\t\t\t\t\tif (!cantLearnReason) {\n\t\t\t\t\t\t\tcantLearnReason = `can't be transferred from Gen ${learnedGen} to ${this.minSourceGen}.`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (noFutureGen && learnedGen > dex.gen) {\n\t\t\t\t\t\tif (!cantLearnReason) {\n\t\t\t\t\t\t\tcantLearnReason = `can't be transferred from Gen ${learnedGen} to ${dex.gen}.`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// redundant\n\t\t\t\t\tif (learnedGen <= moveSources.sourcesBefore) continue;\n\n\t\t\t\t\tif (baseSpecies.evoRegion === 'Alola' && checkingPrevo && learnedGen >= 8) {\n\t\t\t\t\t\tcantLearnReason = `is from a ${species.name} that can't be transferred to USUM to evolve into ${baseSpecies.name}.`;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst canUseAbilityPatch = dex.gen >= 8 && format.mod !== 'gen8dlc1';\n\t\t\t\t\tif (\n\t\t\t\t\t\tlearnedGen < 7 && setSources.isHidden && !canUseAbilityPatch &&\n\t\t\t\t\t\t!dex.mod('gen' + learnedGen).species.get(baseSpecies.name).abilities['H']\n\t\t\t\t\t) {\n\t\t\t\t\t\tcantLearnReason = `can only be learned in gens without Hidden Abilities.`;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!species.isNonstandard) {\n\t\t\t\t\t\t// HMs can't be transferred\n\t\t\t\t\t\tif (dex.gen >= 4 && learnedGen <= 3 && [\n\t\t\t\t\t\t\t'cut', 'fly', 'surf', 'strength', 'flash', 'rocksmash', 'waterfall', 'dive',\n\t\t\t\t\t\t].includes(moveid)) {\n\t\t\t\t\t\t\tcantLearnReason = `can't be transferred from Gen 3 to 4 because it's an HM move.`;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (dex.gen >= 5 && learnedGen <= 4 && [\n\t\t\t\t\t\t\t'cut', 'fly', 'surf', 'strength', 'rocksmash', 'waterfall', 'rockclimb',\n\t\t\t\t\t\t].includes(moveid)) {\n\t\t\t\t\t\t\tcantLearnReason = `can't be transferred from Gen 4 to 5 because it's an HM move.`;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Defog and Whirlpool can't be transferred together\n\t\t\t\t\t\tif (dex.gen >= 5 && ['defog', 'whirlpool'].includes(moveid) && learnedGen <= 4) blockedHM = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (learned.charAt(1) === 'L') {\n\t\t\t\t\t\t// special checking for level-up moves\n\t\t\t\t\t\tif (level >= parseInt(learned.substr(2)) || learnedGen === 7) {\n\t\t\t\t\t\t\t// we're past the required level to learn it\n\t\t\t\t\t\t\t// (gen 7 level-up moves can be relearnered at any level)\n\t\t\t\t\t\t\t// falls through to LMT check below\n\t\t\t\t\t\t} else if (level >= 5 && learnedGen === 3 && species.canHatch) {\n\t\t\t\t\t\t\t// Pomeg Glitch\n\t\t\t\t\t\t} else if ((!species.gender || species.gender === 'F') && learnedGen >= 2 && species.canHatch) {\n\t\t\t\t\t\t\t// available as egg move\n\t\t\t\t\t\t\tlearned = learnedGen + 'Eany';\n\t\t\t\t\t\t\t// falls through to E check below\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// this move is unavailable, skip it\n\t\t\t\t\t\t\tcantLearnReason = `is learned at level ${parseInt(learned.substr(2))}.`;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Gen 8+ egg moves can be taught to any pokemon from any source\n\t\t\t\t\tif (learnedGen >= 8 && learned.charAt(1) === 'E' || 'LMTR'.includes(learned.charAt(1))) {\n\t\t\t\t\t\tif (learnedGen === dex.gen && learned.charAt(1) !== 'R') {\n\t\t\t\t\t\t\t// current-gen level-up, TM or tutor moves:\n\t\t\t\t\t\t\t//   always available\n\t\t\t\t\t\t\tif (!(learnedGen >= 8 && learned.charAt(1) === 'E') && babyOnly) setSources.babyOnly = babyOnly;\n\t\t\t\t\t\t\tif (!moveSources.moveEvoCarryCount) return null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// past-gen level-up, TM, or tutor moves:\n\t\t\t\t\t\t//   available as long as the source gen was or was before this gen\n\t\t\t\t\t\tif (learned.charAt(1) === 'R') {\n\t\t\t\t\t\t\tmoveSources.restrictedMove = moveid;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlimit1 = false;\n\t\t\t\t\t\tmoveSources.addGen(learnedGen);\n\t\t\t\t\t} else if (learned.charAt(1) === 'E') {\n\t\t\t\t\t\t// egg moves:\n\t\t\t\t\t\t//   only if hatched from an egg\n\t\t\t\t\t\tlet limitedEggMove: ID | null | undefined = undefined;\n\t\t\t\t\t\tif (learned.slice(1) === 'Eany') {\n\t\t\t\t\t\t\tlimitedEggMove = null;\n\t\t\t\t\t\t} else if (learnedGen < 6) {\n\t\t\t\t\t\t\tlimitedEggMove = move.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlearned = learnedGen + 'E' + (species.prevo ? species.id : '');\n\t\t\t\t\t\tif (tradebackEligible && learnedGen === 2 && move.gen <= 1) {\n\t\t\t\t\t\t\t// can tradeback\n\t\t\t\t\t\t\tmoveSources.add('1ET' + learned.slice(2));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoveSources.add(learned, limitedEggMove);\n\t\t\t\t\t} else if (learned.charAt(1) === 'S') {\n\t\t\t\t\t\t// event moves:\n\t\t\t\t\t\t//   only if that was the source\n\t\t\t\t\t\t// Event Pok\u00E9mon:\n\t\t\t\t\t\t// \tAvailable as long as the past gen can get the Pok\u00E9mon and then trade it back.\n\t\t\t\t\t\tif (tradebackEligible && learnedGen === 2 && move.gen <= 1) {\n\t\t\t\t\t\t\t// can tradeback\n\t\t\t\t\t\t\tmoveSources.add('1ST' + learned.slice(2) + ' ' + species.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoveSources.add(learned + ' ' + species.id);\n\t\t\t\t\t} else if (learned.charAt(1) === 'D') {\n\t\t\t\t\t\t// DW moves:\n\t\t\t\t\t\t//   only if that was the source\n\t\t\t\t\t\tmoveSources.add(learned + species.id);\n\t\t\t\t\t\tmoveSources.dreamWorldMoveCount++;\n\t\t\t\t\t} else if (learned.charAt(1) === 'V' && this.minSourceGen < learnedGen) {\n\t\t\t\t\t\t// Virtual Console or Let's Go transfer moves:\n\t\t\t\t\t\t//   only if that was the source\n\t\t\t\t\t\tmoveSources.add(learned);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ruleTable.has('mimicglitch') && species.gen < 5) {\n\t\t\t\t// include the Mimic Glitch when checking this mon's learnset\n\t\t\t\tconst glitchMoves = ['metronome', 'copycat', 'transform', 'mimic', 'assist'];\n\t\t\t\tlet getGlitch = false;\n\t\t\t\tfor (const i of glitchMoves) {\n\t\t\t\t\tif (learnset[i]) {\n\t\t\t\t\t\tif (!(i === 'mimic' && dex.abilities.get(set.ability).gen === 4 && !species.prevo)) {\n\t\t\t\t\t\t\tgetGlitch = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (getGlitch) {\n\t\t\t\t\tmoveSources.addGen(4);\n\t\t\t\t\tif (move.gen < 5) {\n\t\t\t\t\t\tlimit1 = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!moveSources.size()) {\n\t\t\t\tif (\n\t\t\t\t\t(species.evoType === 'levelMove' && species.evoMove !== move.name) ||\n\t\t\t\t\t(species.id === 'sylveon' && move.type !== 'Fairy')\n\t\t\t\t) {\n\t\t\t\t\tmoveSources.moveEvoCarryCount = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// also check to see if the mon's prevo or freely switchable formes can learn this move\n\t\t\tspecies = this.learnsetParent(species);\n\t\t}\n\n\t\tif (limit1 && sketch) {\n\t\t\t// limit 1 sketch move\n\t\t\tif (setSources.sketchMove) {\n\t\t\t\treturn ` can't Sketch ${move.name} and ${setSources.sketchMove} because it can only Sketch 1 move.`;\n\t\t\t}\n\t\t\tsetSources.sketchMove = move.name;\n\t\t}\n\n\t\tif (blockedHM) {\n\t\t\t// Limit one of Defog/Whirlpool to be transferred\n\t\t\tif (setSources.hm) return ` can't simultaneously transfer Defog and Whirlpool from Gen 4 to 5.`;\n\t\t\tsetSources.hm = moveid;\n\t\t}\n\n\t\tif (!setSources.restrictiveMoves) {\n\t\t\tsetSources.restrictiveMoves = [];\n\t\t}\n\t\tsetSources.restrictiveMoves.push(move.name);\n\n\t\t// Now that we have our list of possible sources, intersect it with the current list\n\t\tif (!moveSources.size()) {\n\t\t\tif (cantLearnReason) return `'s move ${move.name} ${cantLearnReason}`;\n\t\t\treturn ` can't learn ${move.name}.`;\n\t\t}\n\t\tconst backupSources = setSources.sources;\n\t\tconst backupSourcesBefore = setSources.sourcesBefore;\n\t\tsetSources.intersectWith(moveSources);\n\t\tif (!setSources.size()) {\n\t\t\t// pretend this pokemon didn't have this move:\n\t\t\t// prevents a crash if OMs override `checkCanLearn` to keep validating after an error\n\t\t\tsetSources.sources = backupSources;\n\t\t\tsetSources.sourcesBefore = backupSourcesBefore;\n\t\t\treturn `'s moves ${(setSources.restrictiveMoves || []).join(', ')} are incompatible.`;\n\t\t}\n\n\t\tif (babyOnly) setSources.babyOnly = babyOnly;\n\t\treturn null;\n\t}\n\n\tlearnsetParent(species: Species) {\n\t\t// Own Tempo Rockruff and Battle Bond Greninja are special event formes\n\t\t// that are visually indistinguishable from their base forme but have\n\t\t// different learnsets. To prevent a leak, we make them show up as their\n\t\t// base forme, but hardcode their learnsets into Rockruff-Dusk and\n\t\t// Greninja-Ash\n\t\tif (['Gastrodon', 'Pumpkaboo', 'Sinistea'].includes(species.baseSpecies) && species.forme) {\n\t\t\treturn this.dex.species.get(species.baseSpecies);\n\t\t} else if (species.name === 'Lycanroc-Dusk') {\n\t\t\treturn this.dex.species.get('Rockruff-Dusk');\n\t\t} else if (species.name === 'Greninja-Ash') {\n\t\t\treturn null;\n\t\t} else if (species.prevo) {\n\t\t\t// there used to be a check for Hidden Ability here, but apparently it's unnecessary\n\t\t\t// Shed Skin Pupitar can definitely evolve into Unnerve Tyranitar\n\t\t\tspecies = this.dex.species.get(species.prevo);\n\t\t\tif (species.gen > Math.max(2, this.dex.gen)) return null;\n\t\t\treturn species;\n\t\t} else if (species.changesFrom && species.baseSpecies !== 'Kyurem') {\n\t\t\t// For Pokemon like Rotom and Necrozma whose movesets are extensions are their base formes\n\t\t\treturn this.dex.species.get(species.changesFrom);\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic fillStats(stats: SparseStatsTable | null, fillNum = 0): StatsTable {\n\t\tconst filledStats: StatsTable = {hp: fillNum, atk: fillNum, def: fillNum, spa: fillNum, spd: fillNum, spe: fillNum};\n\t\tif (stats) {\n\t\t\tlet statName: StatID;\n\t\t\tfor (statName in filledStats) {\n\t\t\t\tconst stat = stats[statName];\n\t\t\t\tif (typeof stat === 'number') filledStats[statName] = stat;\n\t\t\t}\n\t\t}\n\t\treturn filledStats;\n\t}\n\n\tstatic get(format: string | Format) {\n\t\treturn new TeamValidator(format);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
